const t={map:'[{"时间复杂度":["0.0","24.0"],"时间复杂度表":["0.1"],"miller":["0.2","3.1"],"离线算法":["0.3"],"前缀和":["0.4"],"一维数组前缀和":["0.5"],"二维数组前缀和":["0.6"],"acwing":["1.0"],"p":["2.0","6.0"],"时间戳题":["2.1"],"手撸十六转八进制":["2.3"],"第十三届":["2.4"],"求":["2.5"],"一些模板":["3.0"],"欧拉筛法":["3.2","14.9","17.11"],"最大公约数":["3.3","14.11","17.13"],"x":["3.4","14.4","17.4"],"归并排序":["3.5","15.16","26.3"],"并查集":["3.6","23.21"],"单调队列":["3.7","15.5","23.23"],"使用小根堆":["3.8","15.15","23.36"],"datastructure":["3.9"],"使用":["3.10","12.4","23.24"],"快读快写":["3.11","20.3"],"对拍代码":["3.12"],"start":["4.0","8.0"],"杭电的题目":["4.1"],"二叉搜索树":["4.2","23.14"],"记录一下":["5.0"],"技巧类":["5.1"],"关于卡常和输入问题":["5.2"],"题目":["5.3"],"link":["5.4"],"seventeen":["5.5"],"蜜蜂路线":["6.1"],"字符串中找名字":["6.2"],"牛客题":["7.0"],"目录":["7.1"],"toc":["7.2"],"求多项式的每个项的质数":["7.3"],"分元宵题":["7.4"],"菜鸡版":["7.6"],"dalao":["7.8"],"ll":["7.10"],"简单查找题":["7.11"],"while":["7.13"],"set":["7.15","12.3"],"exp":["7.17"],"牛客训练营补题":["8.1"],"day1":["8.2"],"团队天梯":["9.0"],"沙漏题":["9.1"],"帅到没朋友":["9.2","9.3"],"罚酒题":["9.4"],"算法知识索引":["10.0"],"基础知识":["10.1"],"算法":["10.2"],"高级知识":["10.3"],"实践":["10.4"],"c":["11.0","20.4","21.0"],"stringstream":["11.1"],"lambda":["11.2"],"thread":["11.3"],"函数传入函数参数":["11.4"],"stl":["12.0"],"unordered":["12.1"],"priority":["12.2","15.2"],"emplace":["12.5"],"asfsd":["13.0"],"math":["14.0","17.0"],"偏移量数组":["14.1","17.1"],"进制":["14.2","17.2"],"十进制转":["14.3","17.3"],"自然常数":["14.5","17.6"],"素数算法":["14.6","17.8"],"常规试除法":["14.7","17.9"],"米勒":["14.8","17.10"],"位运算算法":["14.10","17.12"],"辗转相除法":["14.12","17.14"],"更相减损术":["14.13","17.15"],"最小公倍数":["14.14","17.16"],"算法笔记":["15.0"],"技巧":["15.1"],"树状数组":["15.3","23.19"],"线段树":["15.4","23.20"],"深搜与广搜":["15.6","23.25"],"搜索求组合情况":["15.7","23.26"],"搜索求全排列":["15.8","23.27"],"回溯题目":["15.9","23.28"],"查找单词":["15.10","23.29"],"连连看":["15.11","23.30"],"全球变暖":["15.12","23.31"],"数字三角形":["15.13"],"普通":["15.14","23.35"],"二分答案模板":["15.17","26.5"],"使用c":["17.5"],"自然常数的扩展":["17.7"],"高级数学":["17.17"],"斯特林公式求阶乘":["17.18"],"杂类":["20.0"],"一些小技巧":["20.1"],"输入输出重定向":["20.2"],"jiangly":["20.5"],"关于":["20.6","20.9"],"关于空指针":["20.7"],"野指针与":["20.8"],"生成数据函数":["21.1"],"对拍主函数":["21.2"],"排序":["22.0"],"宇宙总统":["22.1"],"data":["23.0"],"简介":["23.1"],"顺序表":["23.2"],"链表":["23.3"],"array":["23.4"],"list":["23.5"],"循环双向链表":["23.6"],"链表的一些":["23.7"],"栈":["23.8"],"队列":["23.9"],"运行程序的四大层次":["23.10"],"树":["23.11"],"二叉树实现":["23.12"],"完全二叉树":["23.13"],"一个之前没有考虑过的点":["23.15"],"前缀和与差分":["23.16"],"二维前缀和":["23.17"],"基础差分":["23.18"],"单调栈":["23.22"],"图":["23.32"],"邻边矩阵":["23.33"],"邻接表":["23.34"],"堆排序":["23.37"],"快速排序":["23.38","26.4"],"拓扑排序":["23.39"],"排序算法时间的比较":["23.40"],"复习":["23.41"],"入度和出度":["23.42"],"图的存储结构":["23.43"],"稀疏矩阵":["23.44"],"逆邻接表":["23.45"],"算法复杂度中":["24.1"],"greedy":["25.0"],"分治思想":["26.0"],"快速幂":["26.1"],"最大子段和":["26.2"],"区间二分":["26.6"],"实数域二分":["26.7"],"跳石头":["26.8"],"经典实数二分题":["26.9"],"又是一道二分":["26.10"],"string":["26.12"],"递归":["26.13"],"递归思路":["26.14"],"递推算法":["26.15"],"runtime":["27.0"],"results":["27.1","27.5"],"theme":["27.2","27.6"],"page":["27.3","27.4","27.7","27.8"],"more":["27.9","46.3"],"index":["29.0","30.0","31.0"],"todo":["41.0"],"记录每天遇到的坑点":["42.0"],"here":["43.0","45.0","47.0","50.0"],"bookmarkvue":["44.0"],"markdown":["46.0"],"syntax":["46.1"],"custom":["46.2"],"hello":["49.0"],"heroimage":["52.0"]},{"0":["3.2","3.5","14.9","15.10","15.16","17.4","17.11","20.7","23.11","23.13","23.21","23.24","23.29","26.3","26.11"],"1":["1.1","3.3","3.6","3.7","3.10","7.4","11.2","12.1","12.2","14.11","15.1","15.2","15.4","15.5","15.10","15.12","17.7","17.10","17.11","17.12","23.4","23.6","23.11","23.13","23.17","23.20","23.21","23.23","23.24","23.29","23.32","23.37","23.41","26.9","26.11","26.14"],"2":["3.6","3.7","11.2","12.2","15.1","15.2","15.4","15.5","17.12","23.11","23.13","23.20","23.23","23.41","26.1","26.5","26.14"],"3":["2.3","11.2","12.2","15.2","23.41"],"4":["7.3","12.2","15.2","15.4","15.10","20.3","23.20","23.29","26.5"],"5":["3.11","12.2","20.3","24.0"],"6":["15.12"],"7":["0.3"],"8":["24.0","26.5","26.10"],"10":["3.8","7.3","15.14","15.15","17.7","20.3","23.21","23.35","23.36","24.0","26.2"],"11":["11.0","33.0","34.0","35.0","39.0","40.0"],"16":["34.0"],"18":["35.0"],"23":["40.0"],"30":["24.1"],"36":["26.10"],"70":["6.1","15.13"],"100":["23.21","24.1","26.7"],"1010":["15.11","23.30","23.31"],"2023":["33.0","34.0","35.0","36.0","37.0","38.0","39.0","40.0"],"33188":["8.2"],"50005":["15.4","23.20"],"1000000007":["2.5"],"robin":["0.2","3.1"],"isprime":["0.2"],"test":["0.2"],"c":["0.2","0.3","0.5","0.6","1.1","2.1","2.3","2.4","3.1","3.4","3.6","3.8","3.12","4.2","5.5","6.1","6.2","7.3","7.6","7.11","7.17","8.2","9.1","9.2","9.3","9.4","11.2","12.1","12.3","14.1","14.3","14.4","14.8","14.10","14.12","14.13","14.14","15.4","15.6","15.7","15.8","15.10","15.11","15.13","15.14","15.15","15.17","17.1","17.3","17.4","17.5","17.10","17.12","17.13","17.14","17.15","17.16","17.18","20.2","20.3","20.6","20.7","20.9","21.1","21.2","22.1","23.5","23.6","23.14","23.18","23.20","23.21","23.25","23.26","23.27","23.29","23.30","23.31","23.35","23.36","23.37","23.40","26.1","26.2","26.4","26.6","26.7","26.8","26.14"],"line":["0.2","0.3","0.5","0.6","1.1","2.1","2.3","3.1","3.4","3.6","3.8","3.12","4.2","5.5","6.1","6.2","7.3","7.6","7.11","8.2","9.1","9.2","9.3","9.4","11.2","12.1","14.1","14.3","14.4","14.8","14.10","14.12","14.13","14.14","15.4","15.6","15.7","15.8","15.10","15.11","15.13","15.14","15.15","15.17","17.1","17.3","17.4","17.5","17.10","17.12","17.13","17.14","17.15","17.16","17.18","20.2","20.3","20.4","20.6","21.0","21.1","21.2","22.1","23.5","23.6","23.14","23.18","23.20","23.21","23.25","23.26","23.27","23.29","23.30","23.31","23.35","23.36","23.37","23.40","26.2","26.4","26.6","26.7","26.8","26.14","34.0","35.0"],"numbers":["0.2","0.3","0.6","1.1","2.1","2.3","3.1","3.4","3.6","3.8","3.12","4.2","5.5","6.1","6.2","7.3","7.6","7.11","8.2","9.1","9.2","9.3","9.4","11.2","12.1","14.1","14.3","14.4","14.8","14.13","15.4","15.6","15.7","15.8","15.10","15.11","15.13","15.14","15.15","15.17","17.1","17.3","17.4","17.5","17.10","17.12","17.13","17.15","17.18","20.3","20.6","21.1","21.2","22.1","23.5","23.6","23.14","23.18","23.20","23.21","23.25","23.26","23.27","23.29","23.30","23.31","23.35","23.36","23.37","23.40","26.2","26.4","26.6","26.7","26.8","26.14","34.0","35.0"],"int":["0.2","0.3","2.3","3.1","3.4","3.6","3.8","3.12","4.2","6.1","7.6","8.2","9.1","9.3","9.4","11.2","12.1","12.2","12.4","14.1","14.4","14.8","15.4","15.7","15.8","15.10","15.11","15.13","15.14","15.15","15.17","17.1","17.4","17.7","17.10","17.12","20.3","20.6","20.7","21.1","23.5","23.14","23.18","23.20","23.21","23.26","23.27","23.29","23.30","23.31","23.35","23.36","26.2","26.4","26.7","26.14"],"fpow":["0.2","14.8","17.10","17.12"],"a":["0.2","2.5","3.3","3.5","14.11","15.16","17.11","17.13","23.41","26.1","26.2","26.3","26.9"],"x":["0.2","2.5","3.6","12.2","14.3","14.5","15.2","17.3","17.6","17.10","23.5","23.11","23.17","23.21","23.41","24.0"],"include":["0.3","1.1","2.3","3.8","4.2","5.5","6.1","6.2","7.3","7.6","7.11","8.2","9.1","9.2","9.3","9.4","15.8","15.11","15.13","15.14","15.15","17.18","22.1","23.21","23.27","23.30","23.31","23.35","23.36","23.40","26.7","26.8"],"iostream":["0.3","4.2","23.21"],"cstdio":["0.3"],"algorithm":["0.3","4.2","25.0"],"using":["0.3","2.3","3.8","4.2","6.1","6.2","7.3","7.6","7.11","8.2","9.1","9.3","9.4","15.8","15.11","15.13","15.14","15.15","22.1","23.21","23.27","23.30","23.31","23.35","23.36","26.7"],"namespace":["0.3","2.3","3.8","4.2","6.1","6.2","7.3","7.6","7.11","8.2","9.1","9.3","9.4","15.8","15.11","15.13","15.14","15.15","22.1","23.21","23.27","23.30","23.31","23.35","23.36","26.7"],"std":["0.3","2.3","3.8","4.2","6.1","6.2","7.3","7.6","7.11","8.2","9.1","9.3","9.4","15.8","15.11","15.13","15.14","15.15","22.1","23.21","23.27","23.30","23.31","23.35","23.36","26.7"],"typedef":["0.3","17.18","20.6"],"long":["0.3","2.3","3.1","6.1","17.12","17.18","26.2","26.7"],"ll":["0.3","3.1","17.13","17.18"],"const":["0.3","3.8","8.2","12.1","15.8","15.11","15.13","15.14","15.15","23.21","23.27","23.30","23.31","23.35","23.36","26.2","26.7","34.0"],"mod":["0.3","17.10","26.1"],"1e9":["0.3"],"题":["1.0"],"放养题":["1.1"],"style":["2.0","6.0"],"br":["2.1","2.3","2.5","5.5","6.1","6.2","15.11","15.12","15.13","23.30","23.31","24.1"],"ac":["2.1","2.3","2.5","5.5","6.1","6.2","8.2","15.11","15.12","15.13","23.30","23.31"],"码":["2.1","2.3","2.5","5.5","6.1","6.2","15.11","15.12","15.13","23.30","23.31"],"define":["2.3","3.1","3.8","6.1","7.3","7.6","7.11","9.2","15.4","15.14","15.15","17.12","20.7","23.20","23.35","23.36","26.2","26.7"],"endl":["2.3","9.2","23.21"],"n":["2.3","3.2","3.5","9.2","9.3","14.7","14.9","15.1","15.4","15.7","15.10","15.11","15.16","17.9","17.11","20.5","23.13","23.20","23.21","23.26","23.29","23.30","23.41","23.43","24.1","26.3","26.5","26.6","26.9","26.11","26.14"],"pragma":["2.3"],"gcc":["2.3"],"optimize":["2.3"],"signed":["2.3"],"进制减法":["2.5"],"题目链接":["2.5","5.4","5.5","6.1","6.2","8.2","15.10","15.11","15.12","15.13","22.1","23.29","23.30","23.31"],"表示":["2.5","14.5","17.6"],"进制数":["2.5"],"b":["2.5","3.3","14.11","17.13","23.41","26.1","40.0"],"的结果的最小可能值转换为十进制后再模":["2.5"],"的结果":["2.5"],"推出":["2.5"],"ans":["2.5","17.4","17.7","17.10","17.12"],"modd":["2.5"],"tmp":["2.5","7.15","9.1","23.14","23.21"],"用于线下赛比赛的模板使用":["3.0"],"素数检测":["3.1"],"ld":["3.1"],"double":["3.1","17.7","26.7","26.10"],"ull":["3.1"],"unsigned":["3.1","7.6","17.18"],"if":["3.2","3.6","14.9","17.4","17.10","17.11","17.12","23.6","23.14","23.21"],"i":["3.2","3.5","14.9","15.16","17.4","17.11","20.5","23.21","26.3","26.9","26.11"],"prime":["3.2","14.9","17.11"],"j":["3.2","3.5","14.9","15.16","17.11","23.21","26.3"],"break":["3.2","14.9","17.11","23.21"],"区别于埃氏筛的原因":["3.2","14.9","17.11"],"导致了其的复杂度为":["3.2","14.9","17.11"],"o":["3.2","3.7","12.2","14.9","15.5","17.11","23.4","23.23","24.1"],"每个数只被筛过一次":["3.2","14.9","17.11"],"保证都是被最小质因数整除":["3.2","14.9","17.11"],"解释":["3.2","14.9","17.11"],"若":["3.2","14.7","14.9","17.9","17.11"],"gcd":["3.3","14.11","17.13"],"ka":["3.3"],"进制转":["3.4","14.4","17.4"],"y":["3.4","14.4","17.4","23.17","23.21"],"进制":["3.4","14.3","14.4","17.3","17.4"],"从高位开始累乘":["3.4","14.4","17.4"],"string":["3.4","12.1","14.3","14.4","17.3","17.4","17.18"],"trans":["3.4","14.4","17.4"],"num1":["3.4","14.4","14.8","17.4","17.10","17.12","23.5"],"求逆序对":["3.5","15.16","26.3"],"逆序对":["3.5","15.16","26.3"],"在升序的数组中发现":["3.5","15.16","26.3"],"and":["3.5","5.2","14.5","15.16","17.6","23.5","26.3"],"说明":["3.5","15.16","26.3"],"为一个逆序对":["3.5","15.16","26.3"],"又因为左边":["3.5","15.16","26.3"],"l":["3.5","4.2","15.4","15.16","23.20","26.3"],"mid":["3.5","15.16","26.3"],"数组已经是有序的":["3.5","15.16","26.3"],"复杂版本":["3.6"],"带权并查集模板":["3.6"],"公式推导":["3.6"],"变量":["3.6"],"sum":["3.6","15.1","15.4","23.18","23.20","26.9","26.11"],"max":["3.6","3.8","5.4","8.2","15.7","15.8","15.11","15.14","15.15","23.21","23.26","23.27","23.30","23.31","23.35","23.36","26.2","26.7"],"数组记录边权":["3.6"],"核心代码":["3.6"],"修改后的查找与合并":["3.6"],"find":["3.6","23.21"],"在查找中要将顺带的递归记录到根节点权值":["3.6"],"fa":["3.6","23.21"],"return":["3.6","11.2","17.10","17.12","17.13","23.5","23.14","23.21","26.14"],"t":["3.6","17.18","20.7","23.21"],"加上原父节点":["3.6"],"此时已经是递归完后的父节点":["3.6"],"经典例题":["3.7","15.5","23.23"],"滑动窗口":["3.7","15.5","23.23"],"即单调":["3.7","15.5","23.23"],"单调递增或递减":["3.7","15.5","23.23"],"队列":["3.7","15.5","23.23"],"说明有出队入队时间复杂度为":["3.7","15.5","23.23"],"可以使用":["3.7","12.4","15.5","23.23"],"stl":["3.7","3.10","15.5","23.23","23.24"],"的":["3.7","15.5","23.23"],"deque":["3.7","15.5","23.23"],"维护最大值或最小值":["3.7","15.5","23.23"],"步骤":["3.7","15.5"],"判断是否需要将队头出队":["3.7","15.5","23.23"],"原因是滑动窗口":["3.7","15.5","23.23"],"当队头不在窗口内":["3.7","15.5","23.23"],"则出队":["3.7","15.5","23.23"],"大根堆取负":["3.8","15.15","23.36"],"优化":["3.8","15.15","23.36"],"dijkstra":["3.8","15.14","15.15","23.35","23.36"],"bits":["3.8","5.5","6.2","9.2","15.8","15.11","15.14","15.15","22.1","23.21","23.27","23.30","23.31","23.35","23.36","26.7","26.8"],"stdc":["3.8","6.2","9.2","15.8","15.11","15.14","15.15","22.1","23.21","23.27","23.30","23.31","23.35","23.36","26.7","26.8"],"h":["3.8","6.2","9.2","15.8","15.11","15.14","15.15","17.18","22.1","23.13","23.21","23.27","23.30","23.31","23.35","23.36","26.7","26.8"],"inf":["3.8","15.14","15.15","23.35","23.36"],"1e3":["3.8","15.14","15.15","23.35","23.36"],"struct":["3.8","4.2","12.4","15.4","15.15","20.6","23.20","23.36"],"注意":["3.9","26.14"],"用":["3.9"],"set":["3.9","7.11","12.4"],"或":["3.9"],"map":["3.9","12.1","12.4"],"时":["3.9"],"结构体":["3.9"],"中的":["3.10","23.24"],"next":["3.10","23.5","23.6","23.24"],"permutation":["3.10","23.24"],"来求全排列数":["3.10","23.24"],"用于求一个集合中的某些个数的值":["3.10","23.24"],"可知":["3.10","23.24"],"使用了":["3.10","23.24"],"是不对数组自身进行操作的":["3.10","23.24"],"所以我们可以将数组最后一位的值改为":["3.10","23.24"],"一般地":["3.11","20.3"],"在我们比赛":["3.11","20.3"],"刷题过程中":["3.11","20.3"],"当输入数字数量":["3.11","20.3"],"次数":["3.11","20.3"],"超过":["3.11","20.3"],"times":["3.11","20.3"],"生成数据函数":["3.12"],"void":["3.12","9.1","15.4","20.7","21.1","23.5","23.20","23.21","26.4","26.6"],"solve":["3.12","21.1","26.6"],"vector":["3.12","4.2","6.1","12.2","12.3","15.4","15.7","15.11","21.1","23.20","23.21","23.26","23.30","23.31","26.12"],"num":["3.12","4.2","12.2","15.2","15.7","21.1","23.14","23.26"],"freopen":["3.12","21.1"],"in":["3.12","21.1","23.5"],"txt":["3.12","21.1"],"w":["3.12","21.1"],"stdout":["3.12"],"将输出的数据存入in":["3.12"],"srand":["3.12"],"doctoc":["4.0","8.0"],"generated":["4.0","8.0"],"toc":["4.0","8.0","15.12"],"please":["4.0","8.0"],"keep":["4.0","8.0"],"hdu3791":["4.2"],"我的ac代码":["4.2"],"node":["4.2","12.4","15.4","23.5","23.6","23.14","23.15","23.20","34.0"],"data":["4.2","23.5","23.6","23.14","27.2","27.3","27.6","27.7"],"r":["4.2","15.4","15.7","23.20","23.26"],"acm":["5.0","8.2"],"建议使用":["5.2"],"scanf":["5.2","17.5"],"printf":["5.2","17.18"],"而不是使用":["5.2"],"cin":["5.2","9.3","23.21"],"cout":["5.2","20.5","23.21"],"然后再去使用":["5.2"],"ios":["5.2"],"sync":["5.2"],"with":["5.2","5.4","46.1"],"stdio":["5.2","17.18"],"false":["5.2","15.12","23.14"],"tie":["5.2"],"monotonic":["5.4"],"subsequence":["5.4"],"img":["5.4","5.5","6.1","15.13","23.45"],"src":["5.4","5.5","6.1","15.13","23.45"],"lis":["5.4"],"lds":["5.4"],"02":["5.4"],"png":["5.4","6.1"],"beeroad":["6.1"],"width":["6.1","15.13"],"有毒瘤数据吗":["6.2"],"还是我的代码不够完美":["6.2"],"质数的数据范围为":["7.3"],"res":["7.10"],"的去重":["7.11"],"查找":["7.11"],"stringstream":["7.11"],"特性":["7.11"],"ss":["7.13"],"count":["7.15"],"https":["8.2","34.0"],"nowcoder":["8.2","26.9","26.11"],"com":["8.2","26.8","26.9","26.10","26.11","34.0"],"contest":["8.2"],"2e6":["8.2"],"pta":["9.0"],"sandd":["9.1"],"key1":["9.1"],"char":["9.1","23.31","26.12"],"key2":["9.1"],"fish":["9.2"],"edition":["9.2","9.3"],"sheep":["9.3"],"main":["9.3","9.4","23.5","23.21"],"m":["9.3","15.10","15.11","23.21","23.29","23.30","23.41","26.6"],"info":["10.1","10.2","10.3","10.4","46.2"],"判断":["11.1"],"匿名函数":["11.2"],"文章链接":["11.2"],"代码格式":["11.2"],"四种写法":["11.2"],"auto":["11.2","23.6"],"func1":["11.2"],"能够通过return的类型或void类型":["11.2"],"可以省去":["11.2"],"func2":["11.2"],"不需要传入参数":["11.2"],"func3":["11.2"],"线程":["11.3"],"数据结构":["12.0"],"遍历的方法":["12.1"],"human":["12.1"],"for":["12.1","17.4","23.21"],"pair":["12.1"],"wir":["12.1"],"引用传递":["12.1"],"queue":["12.2","15.2","15.12"],"优先队列":["12.2","23.37"],"功能":["12.2","15.2"],"top":["12.2","15.2"],"empty":["12.2","15.2","23.2"],"push":["12.2","12.5","15.2","40.0"],"pop":["12.2"],"size":["12.2","23.41"],"通过大根堆来实现的队列":["12.2"],"所以默认为队列头部为最大值":["12.2"],"从小到大则需要":["12.2"],"greater":["12.2"],"或使用负数插入":["12.2"],"插入删除的时间复杂度为":["12.2"],"排序的时间复杂度为":["12.2"],"logn":["12.2"],"与":["12.3"],"使用":["12.3"],"来当作键的话":["12.4"],"和":["12.4","12.5"],"而不能使用":["12.4"],"unordered":["12.4"],"原因是":["12.4"],"but":["12.5"],"not":["12.5","23.5"],"back":["12.5","23.5"],"front":["12.5","23.5"],"都是用于以更高效的方式在容器中构造元素的函数":["12.5"],"可以避免不必要的元素复制或移动":["12.5"],"提高程序的性能":["12.5"],"example":["12.5"],"在当其结构体中有自定义函数的情况下":["12.5"],"如果使用":["12.5"],"来传入对象":["12.5"],"xy":["14.1","17.1"],"上下左右移动":["14.1","17.1"],"方法一":["14.1","14.3","17.1","17.3"],"dx":["14.1","15.10","17.1","23.29"],"reverse":["14.3","17.3"],"反转":["14.3","17.3"],"log10":["14.5","17.6","17.18"],"lg":["14.5","17.6"],"log":["14.5","17.6","17.7","23.13"],"大数且单次":["14.6","17.8"],"为合数":["14.7","17.9"],"则":["14.7","17.9","26.1"],"sqrt":["14.7","17.9"],"拉宾素性检验质数":["14.8","17.10"],"num2":["14.8","17.4","17.10","17.12","26.11"],"快速幂":["14.10","17.12"],"经典":["14.10","17.12"],"链接":["14.11"],"博客":["14.11"],"md":["15.1","29.0","30.0","31.0","34.0","35.0","46.2"],"当推出了一个公式":["15.1"],"如":["15.1"],"此时不知道是否需要取多大的":["15.1"],"来符合":["15.1"],"这个题目给的样例":["15.1"],"可以使用二分搜索进行":["15.1"],"树状数组和线段树具有相似的功能":["15.3","23.19"],"使用分治的方法来构建":["15.4","23.20"],"同时使用结构体数组模拟链表来实现二叉树":["15.4","23.20"],"lc":["15.4","23.20"],"p":["15.4","23.20","23.41","26.1"],"rc":["15.4","23.20"],"arr":["15.4","23.20","23.41","26.4"],"add":["15.4","23.20"],"tree":["15.4","23.14","23.20"],"结构数组模拟链表":["15.4","23.20"],"同时使用完全二叉树的形式":["15.4","23.20"],"pushup":["15.4","23.20"],"代码框架":["15.6","23.25"],"dfs":["15.9","23.28","24.1"],"class":["15.10","23.29","52.0"],"solution":["15.10","23.29"],"public":["15.10","23.29"],"dy":["15.10","23.29"],"site":["15.11","23.30"],"bool":["15.11","15.17","17.10","23.14","23.30"],"st":["15.11","23.30"],"import":["15.12","34.0","35.0"],"cmd":["15.12"],"depthfrom":["15.12"],"depthto":["15.12"],"orderedlist":["15.12"],"code":["15.12"],"chunk":["15.12"],"output":["15.12"],"算法笔记":["15.12"],"技巧":["15.12"],"priority":["15.12"],"树状数组":["15.12"],"线段树":["15.12"],"单调队列":["15.12"],"深搜与广搜":["15.12"],"搜索求组合情况":["15.12"],"搜索求全排列":["15.12"],"回溯题目":["15.12"],"image":["15.13"],"算法模板":["15.14","23.35"],"check":["15.17","27.9","46.3"],"str":["17.4"],"ten":["17.4"],"cet":["17.4","23.21"],"length":["17.4"],"isdigit":["17.4"],"流输入":["17.5"],"进制转换":["17.5"],"chara":["17.5"],"用于计算十进制数的位数":["17.7"],"计算位数":["17.7"],"通过对数的公式来求":["17.7"],"从高位向低位拿每一个位的数":["17.7"],"while":["17.10","17.12","21.2","23.6","23.21"],"miller":["17.10"],"rabbin":["17.10"],"得出":["17.11"],"且":["17.11"],"而对于":["17.11"],"大的素数":["17.11"],"num3":["17.12"],"lowbit函数":["17.12"],"乘以":["17.12"],"运算":["17.12"],"模板":["17.13"],"直接手写一个gcd":["17.13"],"ctype":["17.18"],"math":["17.18","23.13"],"stdlib":["17.18"],"stdint":["17.18"],"uint64":["17.18"],"ceil":["17.18"],"时使用它":["20.3"],"inline":["20.3"],"的习惯":["20.5"],"numbers中结构体":["20.6"],"ren":["20.6"],"首要原因":["20.7"],"在":["20.7","20.9","23.7"],"语言中":["20.7"],"null":["20.7","23.6"],"能够隐性指针转换":["20.7"],"即":["20.7","26.11"],"delete":["20.8"],"操作":["20.8"],"后没有指定为":["20.8"],"ambiguous":["20.9"],"structure":["23.0"],"两种方式讨论数据结构":["23.1"],"具体实现功能":["23.2"],"linked":["23.3"],"list":["23.3","23.4","34.0"],"优点是":["23.3"],"不像数组一样需要在内存中被分配一个固定连续的地址":["23.3"],"能够分散分配的地址":["23.3"],"vs":["23.4"],"比较的参数":["23.4"],"访问元素的成本":["23.4"],"数组":["23.4"],"知道了数组头地址后":["23.4"],"能够推出该数组的其他元素":["23.4"],"单链表":["23.5"],"头插入":["23.5"],"尾插入":["23.5"],"nodehead":["23.5"],"nullptr":["23.5","23.14"],"insert":["23.5","23.14"],"neww":["23.5"],"new":["23.5","23.6","23.14"],"create":["23.5","41.0"],"one":["23.5"],"to":["23.5"],"save":["23.5"],"inserted":["23.5"],"head":["23.5"],"previous":["23.5"],"so":["23.5"],"that":["23.5"],"now":["23.5"],"it":["23.5"],"is":["23.5","23.14","43.0","45.0","46.2","47.0","50.0"],"of":["23.5"],"prev":["23.5"],"let":["23.5"],"be":["23.5"],"nodeinsert":["23.5"],"front2":["23.5"],"point":["23.5"],"the":["23.5","23.21"],"version":["23.5"],"about":["23.5"],"global":["23.5"],"func":["23.5"],"nodeneww":["23.5"],"returnpoint":["23.5"],"address":["23.5"],"归并两个有序链表成为一个非递减的排序":["23.6"],"同于归并排序中":["23.6"],"tmp3":["23.6"],"tmp1":["23.6"],"tmp2":["23.6","23.21"],"else":["23.6","23.14","23.21"],"tips":["23.7"],"lifo":["23.8","23.10"],"fifo":["23.9"],"堆":["23.10"],"heap":["23.10"],"是动态的内存":["23.10"],"能够在运行时增加或减少":["23.10"],"栈":["23.10"],"stack":["23.10"],"用于函数的调用和局部变量的创建":["23.10"],"将递归的思路转为栈的思路":["23.10"],"全局变量":["23.10"],"实际用法":["23.11"],"深度":["23.11"],"root":["23.11","23.14","23.15"],"根到":["23.11"],"节点的最大路径":["23.11"],"高度":["23.11"],"叶节点到":["23.11"],"空树的高度为":["23.11"],"只有根节点时高度为":["23.11"],"二叉树定义":["23.11"],"有根":["23.11"],"每个节点只有":["23.11"],"的子节点的树":["23.11"],"普通二叉树实现":["23.12"],"完美":["23.13"],"or":["23.13"],"满":["23.13"],"完全二叉树的高度为":["23.13"],"floor":["23.13"],"当只有一个根节点时":["23.13"],"高度为":["23.13"],"完美二叉树的高度推导节点数":["23.13"],"binary":["23.14"],"search":["23.14"],"重要定义":["23.14"],"what":["23.14"],"父节点的左子树中的所有节点都父节点小于或等于":["23.14"],"右子树的所有节点比父节点大":["23.14"],"不只是左右节点":["23.14"],"而是左右子树中的所有节点都必须遵循":["23.14"],"后边函数实现都会用到该性质":["23.14"],"图例":["23.14"],"通过结构体":["23.14"],"定义三个域":["23.14"],"left":["23.14"],"right":["23.14"],"datatype":["23.14"],"顺序输出":["23.14"],"中序遍历":["23.14"],"插入元素":["23.14"],"noderoot":["23.14"],"查找树中元素":["23.14"],"true":["23.14"],"tip":["23.15"],"如前中后序遍历都需要一个":["23.15"],"类型的指针作为参数":["23.15"],"而二叉树中的":["23.15"],"是类中的私有成员函数":["23.15"],"这就导致我们没有办法使用在外部直接调用需要带":["23.15"],"基础":["23.16"],"g":["23.17"],"表示的是从起点":["23.17"],"到":["23.17"],"这个部分矩阵的总和":["23.17"],"也叫部分和":["23.17"],"构建前缀和的公式":["23.17"],"差分数组的前缀和为arr数组的值":["23.18"],"但他俩毕竟还有一些区别":["23.19"],"树状数组能有的操作":["23.19"],"线段树一定有":["23.19"],"线段树有的操作":["23.19"],"树状数组不一定有":["23.19"],"但是树状数组的代码要比线段树短":["23.19"],"思维更清晰":["23.19"],"速度也更快":["23.19"],"在解决一些单点修改的问题时":["23.19"],"树状数组是不二之选":["23.19"],"推荐博客":["23.21"],"简单版本":["23.21"],"1e4":["23.21"],"根节点一定是指向自己的":["23.21"],"使用fa":["23.21"],"后":["23.21"],"在下一次的根节点合并中":["23.21"],"会去查找根的同时":["23.21"],"将路径上的节点都赋值为根节点":["23.21"],"unionset":["23.21"],"合并x":["23.21"],"y节点的两个根节点":["23.21"],"t1":["23.21"],"t2":["23.21"],"t3":["23.21"],"f1":["23.21"],"f2":["23.21"],"例题二":["23.21"],"suspects":["23.21"],"例题三":["23.21"],"wireless":["23.21"],"networks":["23.21"],"3e4":["23.21"],"pre":["23.21"],"merge":["23.21"],"步骤1":["23.23"],"队尾入队操作":["23.23"],"然后逐渐地递减到":["23.24"],"以达到所有的":["23.24"],"nums":["23.31"],"性质":["23.32"],"圈":["23.32"],"为长度至少为":["23.32"],"且起点和":["23.32"],"优点":["23.33","23.34"],"创建一个最大最小堆":["23.37"],"通过输出头部元素然后将尾部元素放到头部":["23.37"],"通过上滤方法维护完全二叉树":["23.37"],"将尾部元素提到前面也是为了维护维护完全二叉树":["23.37"],"自下而上":["23.37"],"自上而下":["23.37"],"拓展":["23.37"],"堆排序就是优先队列的头部元素依次弹出":["23.37"],"自下而上建堆":["23.37"],"自上而下建堆":["23.37"],"排完了之后放回到原数组":["23.37"],"实现空间复杂度为":["23.37"],"使用了下滤的操作":["23.37"],"数据项":["23.41"],"数据元素":["23.41"],"通常指数据中不可再分的最小单位":["23.41"],"可以是一个字母":["23.41"],"数字":["23.41"],"符号等":["23.41"],"它是数据的基本组成单位之一":["23.41"],"但不是数据的基本单位":["23.41"],"数据的基本单位通常指整个数据元素":["23.41"],"它是由若干个数据项按照一定规律组成的具有独立含义的整体":["23.41"],"例如":["23.41"],"对于一个人的基本信息":["23.41"],"包括姓名":["23.41"],"性别":["23.41"],"出生年月":["23.41"],"身高":["23.41"],"体重等多个数据项":["23.41"],"这些数据项按照一定规律组合成一个人的基本信息数据元素":["23.41"],"成为一个具有独立含义的整体":["23.41"],"因此":["23.41"],"数据元素是数据的基本单位":["23.41"],"而数据项是组成数据元素的基本单元之一":["23.41"],"散列表":["23.41"],"哈希函数":["23.41"],"装填因子":["23.41"],"表中记录数":["23.41"],"散列表长度":["23.41"],"asl":["23.41"],"平均查找长度依赖装填因子":["23.41"],"直接定址法":["23.41"],"hash":["23.41"],"key":["23.41"],"除留余数法":["23.41"],"找到一个不大于":["23.41"],"的最大质数":["23.41"],"有向图的全部顶点入度和等于出度和":["23.42"],"邻接矩阵":["23.43"],"空间肯定为":["23.43"],"个顶点的无向连通图":["23.43"],"使用链表压缩存储相对于直接在开辟一个二维数组":["23.44"],"邻接表在有向图中使用的是出度":["23.45"],"而逆邻接表示入度的节点数":["23.45"],"bitch":["23.45"],"在竞赛中":["24.0"],"一般算机一秒能运行":["24.0"],"的范围对应的算法":["24.1"],"30n":["24.1"],"指数级别":["24.1"],"剪枝":["24.1"],"状态压缩":["24.1"],"dp":["24.1"],"100n":["24.1"],"n3":["24.1"],"floyd":["24.1"],"高斯消元":["24.1"],"感觉核心就是通过自定义":["25.0"],"sort":["25.0"],"函数来实现当前最小":["25.0"],"毕竟":["25.0"],"中两两数交换的时候和贪心的只考虑当前情况最优解的做法很相像":["25.0"],"原理是利用了所有整数都是能够转换为二进制的形式":["26.1"],"将":["26.1"],"转换为二进制":["26.1"],"方法":["26.1"],"2e5":["26.2"],"quick":["26.4"],"vi":["26.4"],"begin":["26.4"],"时间复杂度问题":["26.5"],"sup":["26.5"],"求区间中小于":["26.6"],"的最大和":["26.6"],"看到序列不保证有序":["26.6"],"但都大于0":["26.6"],"想到了前缀和":["26.6"],"二分":["26.6","26.9"],"read":["26.6"],"类":["26.7"],"1e5":["26.7"],"难点为条件特判":["26.8"],"题解":["26.8"],"p2678":["26.8"],"shawnzhou":["26.8"],"的博客":["26.8"],"洛谷博客":["26.8"],"luogu":["26.8","26.10"],"cn":["26.8","26.10"],"best":["26.9"],"cow":["26.9"],"fences":["26.9"],"0x04":["26.9"],"基本算法":["26.9"],"再次让我怀疑人生":["26.9"],"bushi":["26.9"],"考点为":["26.9"],"通过数学问题转换":["26.9"],"即将":["26.9"],"p1024":["26.10"],"noip2001":["26.10"],"提高组":["26.10"],"一元三次方程求解":["26.10"],"洛谷":["26.10"],"计算机科学教育新生态":["26.10"],"考点在于实数二分":["26.10"],"对于浮点数比较时需要通过使用定义":["26.10"],"eps":["26.10"],"来防止精度损失问题":["26.10"],"最优解设置为":["26.10"],"1e":["26.10"],"条消息":["26.10"],"等浮点数比较问题":["26.10"],"01":["26.11"],"分数规划":["26.11"],"小咪买东西":["26.11"],"考点为将题目中的公式转换成":["26.11"],"妙用":["26.12"],"个人理解":["26.12"],"就是":["26.12"],"的超集":["26.12"],"因为相对于":["26.12"],"库重载输入输出":["26.12"],"而":["26.12"],"递推":["26.13"],"经典的斐波那契问题":["26.14"],"若没有使用记忆化":["26.14"],"递归调用会过多":["26.14"],"fib":["26.14"],"递归写法":["26.14"],"覆盖墙壁":["26.15"],"api":["27.0"],"examples":["27.0","46.0"],"this":["27.0","46.2"],"page":["27.0"],"demonstrates":["27.0"],"frontmatter":["27.4","27.8"],"自动生成侧边栏内容":["34.0"],"参考链接":["34.0"],"www":["34.0"],"bilibili":["34.0"],"video":["34.0"],"bv1zc4y1m7sj":["34.0"],"details":["34.0","35.0"],"gen":["34.0"],"sidebar":["34.0"],"js":["34.0"],"path":["34.0"],"from":["34.0"],"fs":["34.0"],"文件根目录":["34.0"],"dir":["34.0"],"resolve":["34.0"],"白名单":["34.0"],"过滤不是文章的文件和文件夹":["34.0"],"white":["34.0"],"index":["34.0"],"vitepress":["34.0","46.1"],"使用python批量处理文件中c":["35.0"],"number":["35.0"],"改为c":["35.0"],"点击查看代码":["35.0"],"python":["35.0"],"os":["35.0"],"re":["35.0"],"def":["35.0"],"process":["35.0"],"git":["40.0"],"checkout":["40.0"],"master":["40.0"],"感觉好多学了都忘记了":["42.0"],"extension":["46.0"],"highlighting":["46.1"],"provides":["46.1"],"powered":["46.1"],"by":["46.1"],"shiki":["46.1"],"additional":["46.1"],"containers":["46.2"],"input":["46.2"],"an":["46.2"],"world":["49.0"],"div":["52.0"],"wrap":["52.0"]},{"0":["2.3","3.4","3.10","3.12","5.5","6.2","9.1","9.3","14.1","14.4","15.6","15.11","15.13","15.17","17.1","17.10","20.3","20.5","20.6","21.1","23.6","23.18","23.25","23.30","23.31","23.41","26.1","26.2","26.7","26.8"],"1":["0.2","3.2","3.8","5.2","5.5","7.10","9.1","14.1","14.8","14.9","15.11","15.15","17.1","17.18","20.3","21.2","23.1","23.5","23.8","23.14","23.18","23.19","23.30","23.31","23.36","23.43","23.45","26.1","26.5","26.6","26.7"],"2":["3.3","9.3","12.1","14.11","17.10","23.4","23.5","23.37","23.43","26.9","26.11"],"3":["3.3","3.7","5.5","15.5","17.10","23.23"],"4":["3.11","11.2","14.1","17.1","17.7","23.11","23.31","23.41","26.1"],"5":["0.3","15.2","15.11","17.7","23.30"],"9":["20.3"],"10":["2.5","3.11","8.2","15.8","15.13","17.4","23.24","23.27"],"11":["36.0","37.0","38.0"],"14":["33.0"],"19":["26.1","36.0"],"22":["39.0"],"30":["17.10"],"50":["26.14"],"100":["5.5","26.8"],"111":["3.10","23.24"],"1000":["24.1"],"1145":["3.12","21.1"],"10000":["17.7"],"10011":["26.1"],"12345":["17.7"],"300000":["23.21"],"mod":["0.2","3.1","7.10","14.8"],"ans":["0.2","2.3","3.4","7.6","9.1","14.3","14.4","14.8","15.7","17.3","17.18","23.17","23.18","23.26","23.31","26.7"],"while":["0.2","2.3","9.1","14.3","14.8","17.3","17.4","20.3","23.5","23.37","26.7"],"if":["0.2","4.2","6.1","14.8","15.4","15.7","23.5","23.20","23.26","23.37","26.4","26.14","35.0"],"maxn":["0.3"],"1e5":["0.3","2.5","7.3"],"struct":["0.3","12.2","15.14","17.18","23.21","23.35"],"st":["0.3","15.8","23.27","23.31"],"i":["0.3","0.5","3.12","6.2","8.2","9.3","14.5","17.6","17.10","21.1","23.5","23.18","26.6"],"记录读入的下标":["0.3"],"n":["0.3","3.8","3.12","6.2","9.4","15.8","15.13","15.14","15.15","17.5","17.12","17.18","23.4","23.11","23.14","23.24","23.27","23.31","23.35","23.36","26.7","26.8"],"nums":["0.3","3.8","12.3","15.15","23.36","23.37"],"bool":["0.3","12.2","15.6","15.8","15.10","17.11","22.1","23.21","23.25","23.27","23.29","23.31"],"cmp":["0.3","22.1"],"a":["0.3","3.1","3.2","3.8","6.1","9.4","11.2","14.5","14.9","15.13","15.15","17.4","17.5","17.6","23.36","26.10","46.2"],"b":["0.3","3.1","3.8","6.1","9.4","11.2","15.15","23.36"],"numbers":["0.5","2.5","3.5","3.7","3.10","3.11","5.4","7.17","12.2","12.3","14.10","14.12","14.14","15.5","15.12","15.16","17.7","17.11","17.14","17.16","20.2","21.0","23.19","23.23","23.24","25.0","26.3","26.10","26.11","26.12"],"for":["0.5","3.12","6.2","9.3","15.7","15.13","17.10","21.1","23.5","23.18","23.26","26.6","34.0","35.0"],"cin":["0.6","2.3","6.2","9.4","15.13","20.3","23.24","26.12"],"x1":["0.6","23.17"],"y1":["0.6","23.17"],"x2":["0.6","15.11","23.17","23.30"],"using":["1.1","2.1","2.5","3.7","5.4","5.5","9.2","12.2","15.5","15.12","23.19","23.23","26.8","26.10"],"namespace":["1.1","2.1","2.5","3.7","5.4","5.5","9.2","12.2","15.5","15.12","23.19","23.23","26.8","26.10"],"std":["1.1","2.1","2.5","3.7","5.4","5.5","9.2","12.2","15.5","15.12","23.19","23.23","26.8","26.10"],"int":["1.1","2.5","3.5","3.11","5.4","6.2","7.3","9.2","12.3","14.3","14.5","14.10","14.12","14.13","14.14","15.1","15.2","15.16","17.3","17.6","17.11","17.14","17.15","17.16","17.18","22.1","23.23","23.24","23.37","26.3","26.6","26.8"],"main":["1.1","2.3","5.4","6.2","9.2","15.13","23.10","40.0"],"string":["1.1","2.3","5.5","6.2","7.11","8.2","9.2","9.3","15.10","22.1","23.29"],"font":["2.0","6.0"],"include":["2.1","2.5","3.7","5.4","12.2","15.5","15.12","23.19","23.23","26.10"],"bits":["2.1","2.5","5.4","12.2","15.12","23.19","26.10"],"stdc":["2.1","2.5","5.4","5.5","12.2","15.12","23.19","26.10"],"h":["2.1","2.5","5.4","5.5","12.2","15.12","23.19","23.41","26.10"],"ios":["2.3"],"sync":["2.3"],"with":["2.3"],"stdio":["2.3"],"false":["2.3","17.10"],"tie":["2.3"],"cout":["2.3","3.12","12.1","17.4","21.1"],"t":["2.3","23.40"],"str":["2.3","3.4","6.2","8.2","14.4","26.12"],"str2":["2.3"],"line":["2.4","2.5","3.5","3.7","3.10","3.11","5.4","7.17","12.2","12.3","15.5","15.12","15.16","17.7","17.11","20.7","20.9","23.15","23.19","23.23","23.24","25.0","26.3","26.10","26.11","26.12","46.1"],"c":["2.5","3.5","3.7","3.10","3.11","5.2","5.4","10.1","12.2","15.5","15.12","15.16","17.7","17.11","23.11","23.15","23.19","23.23","23.24","25.0","26.3","26.10","26.11","26.12"],"define":["2.5","3.7","14.10","15.5","23.23","26.10","26.11"],"long":["2.5","7.3","7.6","7.11","9.2","14.10"],"const":["2.5","3.5","7.3","12.2","15.12","15.16","17.18","26.3","26.8"],"max":["2.5","3.5","7.3","15.13","15.16","17.18","23.14","26.3","26.8"],"vector":["2.5","3.8","8.2","15.1","15.2","15.8","15.10","15.14","15.15","17.11","22.1","23.27","23.29","23.35","23.36","23.37","26.7","26.8"],"qmul":["3.1"],"快速乘":["3.1"],"modb":["3.1"],"res":["3.1","34.0"],"ab":["3.1"],"return":["3.1","4.2","26.4"],"得出":["3.2","14.9"],"且":["3.2","14.9"],"而对于":["3.2","14.9"],"大的素数":["3.2","14.9"],"kb":["3.3"],"k":["3.3","23.41","26.5"],"定义多个整数的最大公约数":["3.3"],"num2":["3.4","7.6","14.4","20.6"],"ten":["3.4","14.4"],"cet":["3.4","3.8","9.1","14.4","15.15","23.24","23.36"],"所以当下标":["3.5","15.16","26.3"],"不为":["3.5","15.16","26.3"],"的数大于":["3.5","15.16","26.3"],"时":["3.5","12.2","12.4","12.5","15.16","26.3"],"从":["3.5","15.16","26.3"],"到":["3.5","15.16","26.3"],"的数都要大于":["3.5","15.16","26.3"],"下标":["3.5","15.16","26.3"],"求最小交换次数":["3.5","15.16","26.3"],"因为每交换一次就会减少一个逆序对":["3.5","15.16","26.3"],"所以求最小交换次数就是求所有的逆序对":["3.5","15.16","26.3"],"已经记录了到根节点":["3.6"],"void":["3.6","8.2","15.6","15.7","15.8","15.14","15.17","17.11","23.25","23.26","23.27","23.35","23.37","26.12"],"merge":["3.6","8.2"],"y":["3.6","3.9","15.10","23.29"],"z":["3.6"],"ans1":["3.6","23.21"],"ans2":["3.6","23.21"],"若两个根节点相同后":["3.6"],"表示sum":["3.6"],"root":["3.6","4.2","23.37","46.1"],"和":["3.6","5.2","20.3"],"队尾入队操作":["3.7","15.5"],"如果求最大值":["3.7","15.5","23.23"],"队尾的值小于等于新入队的值":["3.7","15.5","23.23"],"则需要将队尾元素从队尾出队":["3.7","15.5","23.23"],"原因是新进入的元素都比它前面的大":["3.7","15.5","23.23"],"那当前窗口是新加入的最大":["3.7","15.5","23.23"],"则之前元素不需要被考虑了":["3.7","15.5","23.23"],"一直出队":["3.7","15.5","23.23"],"直到有元素是大于新入队元素":["3.7","15.5","23.23"],"则新入队元素入队":["3.7","15.5","23.23"],"输出当前的队头表示维护的最大值":["3.7","15.5","23.23"],"edge":["3.8","15.14","15.15","23.35","23.36"],"v":["3.8","15.14","15.15","23.35","23.36"],"w":["3.8","8.2","15.14","15.15","23.35","23.36"],"d":["3.8","15.11","15.14","15.15","23.21","23.30","23.35","23.36"],"vis":["3.8","15.15","23.36"],"m":["3.8","15.8","15.14","15.15","17.12","23.27","23.35","23.36","26.7","26.8"],"s":["3.8","7.13","15.14","15.15","23.21","23.35","23.36"],"priority":["3.8","15.1","15.15","23.36"],"node":["3.9","12.2","12.5","23.21"],"的比较函数只按照":["3.9"],"x":["3.9","15.10","17.5","20.3","23.18","23.29"],"的大小进行比较":["3.9"],"而没有考虑":["3.9"],"的大小":["3.9"],"然后逐渐地递减到":["3.10"],"以达到所有的":["3.10"],"都变成了":["3.10","23.24"],"实现":["3.10","23.24"],"00":["3.10","23.24"],"的全排列":["3.10","23.24"],"时使用它":["3.11"],"inline":["3.11","26.7"],"unsigned":["3.12","21.1"],"time":["3.12","21.1"],"rand":["3.12","17.10"],"random":["3.12"],"shuffle":["3.12"],"comment":["4.0","8.0"],"here":["4.0","8.0"],"to":["4.0","8.0","46.1"],"allow":["4.0","8.0"],"auto":["4.0","8.0","12.1"],"nullptr":["4.2","5.2","20.8"],"nodeinsert":["4.2"],"nodenewnode":["4.2"],"new":["4.2","34.0"],"newnode":["4.2"],"else":["4.2","17.4"],"中遇到的题目和技巧":["5.0"],"来解绑":["5.2"],"卡常数例题":["5.2"],"互质":["5.2"],"在这道题中":["5.2"],"只有使用了":["5.2"],"或使用快读快写":["5.2"],"才能不被卡":["5.2"],"所以大不了以后都直接用":["5.2"],"语言输入输出":["5.2"],"br":["5.4"],"ac":["5.4"],"码":["5.4"],"arr":["5.5","23.21","25.0","26.8"],"size":["6.0","6.1","15.2"],"num":["6.1","7.6","15.1","15.17","17.18","22.1","23.5","26.6","26.7","26.9","26.14"],"pluss":["6.1"],"函数调用想清楚要不要调引用即":["6.1"],"调用后":["6.1"],"函数内操作可能会改变主调函数里的数组":["6.1"],"不要轻易地写unsigned":["7.3"],"1e3":["7.3","15.13","23.21"],"max2":["7.3","17.11"],"fpow":["7.6"],"key":["7.6"],"ll":["7.11","9.2"],"cc":["7.11"],"algorithm":["7.11"],"bitset":["7.11"],"cctype":["7.11"],"cerrno":["7.11"],"clocale":["7.11"],"cmath":["7.11"],"complex":["7.11"],"cstdio":["7.11"],"cstdlib":["7.11"],"cstring":["7.11"],"表示":["7.15"],"mid":["8.2"],"l":["8.2","15.17","26.8"],"r":["8.2"],"static":["8.2","23.10"],"clear":["8.2"],"cet2":["9.1"],"qaq":["9.2"],"map":["9.2","9.3","22.1"],"ren":["9.3"],"f":["9.3","17.4","20.3","23.21","26.7"],"sha":["9.3"],"ta":["9.4"],"tb":["9.4"],"贪心算法":["10.2"],"算法中的数学":["10.3"],"考试准备":["10.4"],"特性":["11.0"],"func4":["11.2"],"tparams":["11.2"],"函数":["11.2"],"captures":["11.2"],"捕获列表":["11.2"],"什么也不捕获":["11.2"],"无法lambda函数体使用任何外部变量":["11.2"],"按值的方式捕获所有变量":["11.2"],"按引用的方式捕获所有变量":["11.2"],"可能的写法":["11.2"],"除了a":["11.2"],"b使用引用传入外":["11.2"],"其他变量使用值传递":["11.2"],"文章链接":["11.3"],"first":["12.1"],"second":["12.1"],"endl":["12.1","17.4"],"且不能够随机访问":["12.2"],"使用仿函数来自定义比较函数":["12.2"],"id":["12.2"],"默认是优先级最高的先输出":["12.2"],"所以在重载小于号后":["12.2"],"如果是id":["12.2"],"other":["12.2"],"会以从小到大输出":["12.2"],"一般的其他自定义比较函数都是当":["12.2"],"按大到小输出排序":["12.2"],"优先队列较为特殊":["12.2"],"operator":["12.2"],"是使用树结构来排序和创建的":["12.4"],"而":["12.4"],"使用的是":["12.4"],"hash":["12.4"],"映射的":["12.4"],"注意":["12.4"],"用":["12.4"],"或":["12.4","23.13"],"结构体":["12.4"],"则需要先创建一个临时对象":["12.5"],"tmp1":["12.5","23.5","23.21","26.14"],"tmp2":["12.5","23.5","26.14"],"or":["12.5"],"node1":["12.5"],"然后再":["12.5"],"q":["12.5"],"而使用":["12.5"],"不需要有这个过程":["12.5"],"可直接当作类对象的创建":["12.5"],"dy":["14.1","17.1"],"hexx":["14.3","17.3"],"num1":["14.3","17.3","20.6","22.1","26.11"],"index":["14.3","17.3"],"char":["14.3","15.10","17.3","17.4","20.3","23.21","23.29","26.7"],"ch":["14.3","17.3","17.4","20.3","23.21","26.7"],"ln":["14.5","17.6"],"计算整数的位数":["14.5","17.6"],"double":["14.5","17.6"],"米勒":["14.6","17.8"],"小数或较大且多次":["14.6","17.8"],"times":["14.7","17.9"],"假设":["14.7","17.9"],"xy":["14.7","17.9"],"ka":["14.11"],"gcd":["14.13","17.15"],"logn":["15.1"],"级别的查找":["15.1"],"迪杰斯特拉算法中的优化版本为了规避掉优先队列实现大根堆的声明构成":["15.1"],"因为默认值是小根堆即":["15.1"],"queue":["15.1"],"而大根堆为":["15.1"],"greater":["15.1","15.2"],"pop":["15.2"],"通过大根堆来实现的队列":["15.2"],"所以默认为队列头部为最大值":["15.2"],"从小到大则需要":["15.2"],"但他俩毕竟还有一些区别":["15.3"],"树状数组能有的操作":["15.3"],"使用后序遍历的方法":["15.4","23.20"],"递归到最底层后回退的时候边加上子节点的值":["15.4","23.20"],"pushdown":["15.4","23.20"],"如果存在懒标记":["15.4","23.20"],"将懒标记传递给两个子节点":["15.4","23.20"],"flag":["15.6","15.11","23.24","23.25","23.30","23.31"],"dfs":["15.6","15.7","15.10","23.25","23.26","23.29"],"cur":["15.7","23.26"],"sum":["15.7","23.26","26.7"],"记录每个数的状态":["15.8","23.27"],"path":["15.8","23.27","35.0"],"记录全排列":["15.8","23.27"],"深搜":["15.9","23.28"],"step":["15.10","23.29"],"board":["15.10","23.29"],"tmp":["15.10","17.10","23.29"],"copy1":["15.11","23.30"],"copy2":["15.11","23.30"],"偏移量数组":["15.11","23.30"],"y2":["15.11","23.17","23.30"],"全局":["15.11","23.5","23.30"],"查找单词":["15.12"],"连连看":["15.12"],"数字三角形":["15.12"],"普通":["15.12"],"dijkstra":["15.12","24.1"],"算法模板":["15.12"],"使用小根堆":["15.12"],"大根堆取负":["15.12"],"优化":["15.12"],"归并排序":["15.12"],"求逆序对":["15.12"],"二分答案模板":["15.12"],"dp":["15.13"],"e":["15.14","23.35"],"state":["15.14","23.35"],"solve":["15.17","26.2","26.12"],"十六转八进制":["17.5"],"printf":["17.5"],"o":["17.5","23.14","23.21"],"例如":["17.7"],"位数":["17.7"],"两数相除得最高位":["17.7"],"true":["17.10","17.11"],"now":["17.10"],"范围为":["17.10"],"now最大值为maxx":["17.10"],"后面的话":["17.11"],"已经被":["17.11"],"筛掉了":["17.11"],"所以就得提前":["17.11"],"防止重复":["17.11"],"is":["17.11"],"get":["17.11"],"multwo":["17.12"],"计算":["17.12","23.17"],"n2":["17.12","24.1"],"除以":["17.12"],"divtwo":["17.12"],"负奇数的运算不可用":["17.12"],"的m次方":["17.12"],"multwopower":["17.12"],"divtwopower":["17.12"],"使用stl库内的方法":["17.13"],"两种之间的差别在于":["17.13"],"没什么区别":["17.13"],"acos":["17.18"],"malloc":["17.18"],"windows":["17.18"],"毫秒级计时":["17.18"],"bigint":["17.18"],"1e18":["17.18"],"tnum":["17.18"],"数字数组":["17.18"],"len":["17.18"],"的有效长度":["17.18"],"factorial":["17.18"],"null":["17.18"],"sizeof":["17.18"],"freopen":["20.2"],"in":["20.2","34.0","35.0"],"read":["20.3","26.7"],"getchar":["20.3","26.7"],"防止":["20.3"],"numbers新特性":["20.4"],"等同于":["20.5"],"numbers使用了":["20.6"],"后":["20.6"],"是将":["20.6"],"然而":["20.7"],"numbers语言要求更为严格":["20.7"],"不允许进行这样的隐式转换":["20.7"],"而是直接使用字面值":["20.7"],"作为零指针":["20.7"],"所以":["20.7"],"numbers的为":["20.7"],"当你再次访问这个指针时":["20.8"],"就会出现未定义行为":["20.8"],"undefined":["20.8"],"behavior":["20.8"],"numbers中":["20.9"],"left":["20.9"],"right":["20.9"],"stdout":["21.1"],"将输出的数据存入in":["21.1"],"srand":["21.1"],"system":["21.2"],"data":["21.2"],"exe":["21.2"],"unordered":["22.1"],"human":["22.1"],"通过数学和逻辑模型":["23.1"],"list":["23.2"],"has":["23.2","34.0"],"而且基本不会浪费内存":["23.3"],"顺序表需要连续空间的原因":["23.3"],"导致如果需要扩展的地址已经被分配了":["23.3"],"那需要寻找一个":["23.3"],"新块":["23.3"],"来复制原来的数组和分配地址":["23.3"],"链表":["23.4"],"只能从表头":["23.4"],"head":["23.4","23.45"],"开始遍历寻找":["23.4"],"最坏情况为":["23.4"],"empty":["23.5"],"nodetmp1":["23.5"],"until":["23.5"],"means":["23.5"],"ending":["23.5"],"任意位置插入":["23.5"],"image":["23.5"],"20221028144208026":["23.5"],"pos":["23.5"],"would":["23.5"],"stay":["23.5"],"on":["23.5"],"which":["23.5"],"position":["23.5"],"简便":["23.6"],"listnodemerge":["23.6"],"listnode":["23.6"],"phead1":["23.6"],"listnodephead2":["23.6"],"neww":["23.6"],"listnodetmp":["23.6"],"phead2":["23.6"],"stl":["23.7"],"中":["23.7"],"链表相对于数组":["23.7"],"实际用途":["23.8","23.9"],"global":["23.10"],"在":["23.10"],"函数外定义的全局变量":["23.10"],"若只需要使用在一个函数中":["23.10"],"而不是整个文件的全局":["23.10"],"可以使用":["23.10"],"修饰变量":["23.10"],"求":["23.11"],"个节点中所有存在的情况":["23.11"],"卡特兰数":["23.11"],"2n":["23.11"],"同时也适用于对于入栈出栈的元素的排序个数":["23.11"],"非空二叉树有":["23.11"],"种基本形态":["23.11"],"只有根节点":["23.11"],"只有左树":["23.11"],"只有右树":["23.11"],"左右树都有的情况":["23.11"],"对于深度和高度的定义有歧义":["23.11"],"即当空树时":["23.11"],"为一个根节点":["23.13"],"满二叉树":["23.13"],"每个节点的度只有":["23.13"],"满二叉树中的叶子节点都在同一层上":["23.13"],"且节点数即为":["23.13"],"完全二叉树的创建":["23.13"],"为了创建":["23.13"],"完整的二叉树":["23.13"],"我们需要一个":["23.13"],"队列数据结构":["23.13"],"来跟踪插入的节点":["23.13"],"找树的高度":["23.14"],"findheight":["23.14"],"当为空树时":["23.14"],"高度为":["23.14"],"合理":["23.14"],"求左右子树的高度最大值":["23.14"],"后加一":["23.14"],"指加上了原来的父节点":["23.14"],"找树中的最大":["23.14"],"小值":["23.14"],"因为左孩子节点一定小于父节点":["23.14"],"所以求最小则一直迭代到树的最左节点":["23.14"],"求最大值则相反地找到树的最右节点":["23.14"],"findmin":["23.14"],"跳出条件":["23.14"],"一直返回跳出条件时的值":["23.14"],"findmax":["23.14"],"广度优先遍历树":["23.14"],"通过使用队列来存储每个节点的左右子节点的引用":["23.14"],"时间复杂度为":["23.14"],"遍历了所有节点":["23.14"],"空间复杂度为":["23.14"],"worst":["23.14"],"average":["23.14","26.9"],"参数的函数":["23.15"],"所以我们需要写一个":["23.15"],"公共的接口函数":["23.15"],"同时还能够在接口中写入一些其他描述":["23.15"],"如下所示":["23.15"],"容斥原理":["23.16"],"的公式":["23.17"],"单点修改和区间查询":["23.19"],"卡住的点是":["23.21"],"因为我觉得t":["23.21"],"1时":["23.21"],"只有一个数作为一个集合是不需要考虑的":["23.21"],"直接使用了continue":["23.21"],"但忘记了后边还跟着另外一个值":["23.21"],"这时没有正确的输入":["23.21"],"导致后边都向前推一位了":["23.21"],"当形成网络后":["23.21"],"都连通了":["23.21"],"input":["23.21"],"will":["23.21"],"not":["23.21","40.0"],"exceed":["23.21"],"lines":["23.21"],"表示是不会爆吗":["23.21"],"3e5":["23.21"],"3e8":["23.21"],"方法就是在每次修好一个网络后":["23.21"],"就遍历n个网络":["23.21"],"能够连的就指向同个根节点表示一个网路":["23.21"],"if判断是否两者都修好且距离没超":["23.21"],"getdis":["23.21"],"success":["23.21"],"fail":["23.21"],"例题四":["23.21"],"升级版":["23.21"],"题目链接":["23.21"],"奶酪":["23.21"],"dx":["23.31"],"终点相同":["23.32"],"有向无圈图为":["23.32"],"dag":["23.32"],"强连通":["23.32"],"有向图中每个节点到其他节点都有路径":["23.32"],"弱连通":["23.32"],"查找":["23.33"],"修改等操作的时间复杂度为":["23.33"],"空间复杂度的优化":["23.34"],"即对于该根节点往下进行构造出符合的完全二叉子树":["23.37"],"shiftdown":["23.37"],"endd":["23.37"],"pmaxx":["23.37"],"maxx":["23.37","26.11"],"ctime":["23.40"],"clock":["23.40"],"start":["23.40","26.4"],"数字分析法":["23.41"],"平方取中法":["23.41"],"冲突解决":["23.41"],"开放定址法":["23.41"],"hi":["23.41"],"di":["23.41"],"线性探测法":["23.41"],"平方探测法":["23.41"],"再散列法":["23.41"],"hash2":["23.41"],"拉链法":["23.41"],"同义词使用一个线性链表来存储即可":["23.41"],"二分查找":["23.41"],"有序的顺序表":["23.41"],"平均查找长度为":["23.41"],"且等于边数":["23.42"],"至少有":["23.43"],"2x":["23.43"],"个非零元素":["23.43"],"空间利用率上更高":["23.44"],"02":["23.45"],"jpg":["23.45"],"且考试时":["23.45"],"前边的":["23.45"],"节点使用的是从":["23.45"],"开始到":["23.45"],"次汁算":["24.0"],"如果题目給出的时间限制カ":["24.0"],"1s":["24.0"],"那么你选择的算法执行的汁算次数最多应该在":["24.0"],"量级オ有可能解决这个题目":["24.0"],"1000n":["24.1"],"n2logn":["24.1"],"二分":["24.1"],"朴素版":["24.1"],"prim":["24.1"],"bellman":["24.1"],"ford":["24.1"],"10000n":["24.1"],"将多个数拼出一个最大的数":["25.0"],"自底向上":["26.1"],"得到":["26.1"],"sup":["26.1"],"inf":["26.2"],"1e17":["26.2"],"下的":["26.2"],"近似于":["26.2"],"正无穷":["26.2"],"end":["26.4"],"递归":["26.4"],"直到":["26.4"],"为止":["26.4"],"为二分查找平分的步数":["26.5"],"按照最坏的时间复杂度来算":["26.5"],"5e4":["26.8"],"star":["26.8"],"所以推出":["26.9"],"aver":["26.9"],"luckywahh":["26.10"],"的博客":["26.10"],"csdn":["26.10"],"博客":["26.10"],"eps":["26.11"],"是不能够类似于":["26.12"],"但":["26.12"],"中却又有":["26.12"],"容器的各种成员函数":["26.12"],"当":["26.14"],"运行时间已经很长了":["26.14"],"fib2":["26.14"],"迭代写法":["26.14"],"链接":["26.15"],"usage":["27.0"],"of":["27.0"],"some":["27.0"],"the":["27.0","27.9","46.1","46.3"],"pre":["27.2","27.3","27.4","27.6","27.7","27.8"],"out":["27.9","46.3"],"nihao":["31.0"],"解决vscode目录中文件图标间隔":["33.0"],"modules":["34.0"],"idea":["34.0"],"assets":["34.0"],"img":["34.0","52.0"],"判断是否是文件夹":["34.0"],"isdirectory":["34.0"],"lstatsync":["34.0"],"取差值":["34.0"],"intersections":["34.0"],"arr1":["34.0"],"arr2":["34.0"],"array":["34.0"],"set":["34.0"],"filter":["34.0"],"item":["34.0"],"把方法导出直接使用":["34.0"],"function":["34.0"],"getlist":["34.0"],"params":["34.0"],"path1":["34.0"],"pathname":["34.0"],"存放结果":["34.0"],"开始遍历params":["34.0"],"let":["34.0"],"file":["34.0"],"files":["35.0"],"directory":["35.0"],"filename":["35.0"],"listdir":["35.0"],"filepath":["35.0"],"join":["35.0"],"isdir":["35.0"],"markdown":["39.0"],"origin":["40.0"],"error":["40.0"],"src":["40.0","52.0"],"refspec":["40.0"],"does":["40.0"],"match":["40.0"],"what":["41.0"],"还是得记录":["42.0"],"database":["43.0"],"elementtestvue":["44.0"],"example":["45.0"],"this":["46.0"],"page":["46.0"],"features":["46.1"],"like":["46.1"],"home":["46.1"],"sends":["46.1"],"user":["46.1"],"box":["46.2"],"tip":["46.2"],"warning":["46.2"],"html":["47.0"],"vue":["50.0"]},{"0":["2.5","3.8","3.11","5.4","6.1","7.3","9.2","9.4","12.2","14.3","15.4","15.12","15.14","15.15","17.3","17.12","17.18","23.10","23.20","23.35","23.36","23.45","25.0","26.9"],"1":["0.3","0.5","2.3","2.5","3.1","3.11","5.4","6.2","7.6","8.2","9.3","14.5","15.13","15.14","17.6","17.13","23.33","23.35","26.2"],"2":["5.5","9.1","15.11","17.11","17.18","23.14","23.30"],"3":["12.1","12.3","14.11","15.7","23.13","23.26","26.7","26.9"],"4":["3.3","5.5","23.13"],"5":["5.5","11.2","14.1","17.1","17.18"],"6":["5.5"],"8":["17.18","26.11","35.0"],"10":["2.3","3.5","3.7","3.10","14.3","15.5","15.16","15.17","17.3","17.18","23.23","26.3"],"11":["10.1"],"12":["12.3"],"20":["37.0"],"21":["38.0"],"31":["17.12"],"34":["26.5"],"48":["26.7"],"75":["12.3"],"100":["23.19"],"112":["12.3"],"123":["23.5"],"200":["23.17"],"251":["5.5"],"457":["12.3"],"1010":["15.12"],"2345":["17.7"],"10000":["24.1"],"100000":["24.1"],"return":["0.2","0.3","3.12","6.1","12.2","14.8","15.6","15.7","15.10","15.11","17.4","22.1","23.6","23.18","23.25","23.26","23.29","23.30","23.31","26.2","26.7","26.10"],"bool":["0.2","4.2","14.8","15.12","26.8","26.9","26.11"],"ans":["0.3","15.12","15.17","26.6","26.14"],"main":["0.3","2.1","3.7","7.3","12.2","15.5","23.23","26.10"],"t":["0.3","4.0","5.4","6.1","8.0","9.2"],"maxx":["0.3"],"cin":["0.3","1.1","3.7","3.10","9.2","12.2","15.5","23.23"],"for":["0.3","2.3","3.4","3.8","3.10","6.1","9.1","9.4","12.2","14.4","15.8","15.10","15.14","15.15","17.11","23.24","23.27","23.29","23.35","23.36","26.8","26.11","26.14"],"y2":["0.6"],"求表":["0.6"],"cout":["0.6","15.7","23.14","23.15","23.26"],"sum":["0.6"],"cow":["1.1"],"john":["1.1"],"size":["2.0","17.11","17.18"],"40px":["2.0","6.0"],"int":["2.1","3.7","3.10","5.2","12.5","15.5","15.12","17.5","23.10","23.17","23.19","23.41","26.10","26.11","26.12"],"struct":["2.1","12.5"],"tm":["2.1"],"stime":["2.1"],"long":["2.1","3.7","5.2","15.5","17.10","23.19","23.21","23.23"],"str5":["2.3"],"str6":["2.3"],"i":["2.3","3.4","3.8","3.10","6.1","9.1","9.4","12.2","14.4","15.8","15.13","15.14","15.15","23.14","23.24","23.27","23.35","23.36","26.4","26.8","26.14"],"length":["2.3","3.4","6.2","14.4","15.10","22.1","23.29"],"if":["2.3","2.5","3.1","3.4","7.6","8.2","9.1","9.3","14.4","15.6","15.8","15.10","15.11","20.3","22.1","23.25","23.27","23.29","23.30","23.31","25.0","26.2","26.7","34.0"],"isdigit":["2.3","2.5","3.4","14.3","14.4","17.3","26.7"],"a":["2.3","7.3","14.3","14.13","17.3","17.10","17.15"],"else":["2.3","3.6","34.0"],"numbers":["2.4","5.2","12.5","14.5","15.2","17.6","20.5","20.7","23.10","23.15","23.17","23.41","26.9"],"arr1":["2.5"],"arr2":["2.5"],"read":["2.5","3.11","26.12"],"flag":["2.5","3.10","6.2","15.12"],"char":["2.5","3.11","6.2","15.12"],"ch":["2.5","3.11"],"getchar":["2.5","3.11"],"while":["2.5","3.1","5.4","6.2","7.6","8.2","12.2","14.13","15.17","17.15","23.14","23.41","26.4"],"qpow":["3.1"],"n":["3.1","3.7","3.10","5.4","12.2","15.5","15.12","21.1","23.23","23.32","23.45","24.0","25.0","26.12"],"快速幂":["3.1"],"后面的话":["3.2","14.9"],"c":["3.3","12.5","14.5","15.2","17.6","20.5","23.10","23.17","23.41","26.9"],"若":["3.3","17.12"],"1e5":["3.5","15.16","26.3"],"vector":["3.5","3.7","15.5","15.12","15.16","23.7","23.23","23.41","26.3"],"void":["3.5","3.8","15.11","15.15","15.16","23.10","23.14","23.15","23.30","23.31","23.36","26.3"],"merge":["3.5","15.16","26.3"],"r":["3.5","15.16","15.17","20.2","23.21","26.2","26.3","35.0"],"static":["3.5","15.16","26.3"],"w":["3.5","15.16","26.3"],"clear":["3.5","15.16","26.3"],"清空size":["3.5","15.16","26.3"],"z表示x":["3.6"],"y则等于sum":["3.6"],"cnt":["3.6"],"扩展域":["3.6"],"chain":["3.6"],"of":["3.6","46.1"],"food":["3.6"],"include":["3.6","5.2","12.5","14.5","17.6","23.17"],"iostream":["3.6","7.11","14.5","17.6"],"const":["3.7","11.2","15.5","23.17","23.19","23.23"],"max":["3.7","15.5","15.12","20.9","23.17","23.19","23.23","23.37"],"1e6":["3.7","15.5","23.23","26.6"],"que":["3.7","15.5","23.23"],"arr":["3.7","15.5","23.23"],"signed":["3.7","7.3","15.5","23.21","23.23"],"m":["3.7","15.5","23.23","26.12"],"queue":["3.8","7.11","15.15","23.14","23.36"],"pair":["3.8","15.15","23.36"],"cir":["3.8","15.15","23.36"],"solve1":["3.8","15.15","23.36"],"节点全赋值为无穷大":["3.8","15.15","23.36"],"如果两个":["3.9","12.4"],"的":["3.9","12.4"],"相同":["3.9","12.4"],"但":["3.9","12.4","23.41"],"cet":["3.10","6.2","23.10","23.41","26.8"],"x":["3.11","12.4","14.7","17.9","23.31","26.8"],"f":["3.11","5.4","9.2"],"begin":["3.12","21.1"],"end":["3.12","23.40"],"数组洗牌排序":["3.12"],"猴子排序":["3.12"],"随机种子":["3.12"],"若函数内选是固定的数":["3.12"],"则随机数会重复":["3.12"],"update":["4.0","8.0"],"don":["4.0","8.0"],"edit":["4.0","8.0"],"this":["4.0","8.0"],"section":["4.0","8.0"],"insert":["4.2","23.2"],"ans1":["4.2","25.0"],"ans2":["4.2","17.4","25.0"],"istree":["4.2"],"line":["5.2","12.5","14.5","15.2","17.6","20.5","23.10","23.17","23.41","26.9"],"bits":["5.2","12.5"],"stdc":["5.2","12.5"],"h":["5.2","12.5","23.11","23.14"],"using":["5.2","12.5","23.17"],"namespace":["5.2","12.5","23.17"],"std":["5.2","12.5","23.17"],"define":["5.2","17.10","23.19","23.21"],"scanf":["5.4"],"d":["5.4","17.5","26.10"],"num":["5.4","17.7","26.10"],"sqrt":["5.4","23.21"],"使得a":["6.1"],"last":["6.2"],"用于记录字符串最后的元素":["6.2"],"用于后边的特判是否为该句子的结尾符号":["6.2"],"b":["7.3","14.13","17.10","17.15","23.18","26.10"],"ansnum":["7.6"],"numnum":["7.6"],"防止":["7.10"],"ctime":["7.11"],"deque":["7.11"],"exception":["7.11"],"fstream":["7.11"],"functional":["7.11"],"limits":["7.11"],"list":["7.11"],"map":["7.11"],"iomanip":["7.11","14.5","17.6"],"ios":["7.11","23.21","26.10"],"iosfwd":["7.11"],"istream":["7.11"],"ostream":["7.11"],"stringstream":["7.13","7.17"],"流输入到空格后停下":["7.13"],"中":["7.15"],"键的个数":["7.15"],"st":["7.17","15.12"],"j":["8.2","9.1","9.3","15.13","26.4"],"push":["8.2","17.11","23.14","34.0"],"back":["8.2","17.11"],"break":["9.1"],"quan":["9.2"],"朋友圈":["9.2"],"set":["9.2","24.1"],"fri":["9.2"],"查询用的去重set":["9.2"],"handsome":["9.3"],"pyq人数大于1":["9.3"],"说明有朋友":["9.3"],"即f":["9.3"],"num1":["9.4","14.10","14.12","17.14","23.21","25.0"],"numa":["9.4"],"num2":["9.4","15.8","22.1","23.21","23.27"],"数据结构":["10.1"],"递归与分治":["10.2"],"指针基础":["10.3"],"另一个考试准备":["10.4"],"是否为空":["11.1"],"b值传递外":["11.2"],"其他变量使用引用传递":["11.2"],"错误的":["11.2"],"后边必须都是":["11.2"],"引用":["11.2"],"会报warning":["11.2"],"编译器对于":["11.2"],"会将其翻译成一个类":["11.2"],"然后捕获的值为类的":["11.2"],"private":["11.2"],"若传入的都是值传递":["11.2"],"operator":["11.2"],"成员函数为":["11.2"],"key":["12.1"],"value":["12.1"],"numbers17":["12.1"],"it":["12.1"],"nums":["12.2","15.12"],"tmp":["12.2","23.6","26.8","26.9"],"的比较函数只按照":["12.4"],"的大小进行比较":["12.4"],"而没有考虑":["12.4"],"y":["12.4","14.7","17.9","23.31"],"的大小":["12.4"],"不同":["12.4"],"它们在":["12.4"],"方法二":["14.1","17.1"],"dxy":["14.1","17.1"],"欧拉筛":["14.6","17.8"],"则必然有":["14.7","17.9"],"所以只要判断到":["14.7","17.9"],"fpow":["14.10"],"kb":["14.11"],"k":["14.11","26.12"],"定义多个整数的最大公约数":["14.11"],"gcd":["14.12","17.14"],"lcm":["14.14","17.16"],"maxheap":["15.1"],"因为优先队列默认为":["15.1"],"less":["15.1"],"将":["15.1","23.21"],"vscode":["15.1","33.0"],"提交":["15.1"],"github":["15.1"],"note":["15.1"],"打印经典的算法模板":["15.1"],"对于求最短路中的个数":["15.1"],"更新边长的时候如果大于号就覆盖":["15.1"],"相等的话":["15.1"],"即有相同最短路径":["15.1"],"就相加":["15.1"],"插入删除的时间复杂度为":["15.2"],"o":["15.2","23.33","23.41","24.0"],"排序的时间复杂度为":["15.2"],"logn":["15.2","23.14","23.41"],"且不能够随机访问":["15.2"],"使用仿函数来自定义比较函数":["15.2"],"线段树一定有":["15.3"],"传递完后将父节点的懒标记删除":["15.4","23.20"],"构造堆存储的二叉树":["15.4","23.20"],"最多节点数接近":["15.4","23.20"],"build":["15.4","23.20"],"时间复杂度":["15.4","23.14","23.20"],"层数":["15.6","23.25"],"其他参数":["15.6","23.25"],"出局判断":["15.6","23.25"],"auto":["15.7","23.26"],"ele":["15.7","23.26"],"setw":["15.7","23.26"],"endl":["15.7","23.15","23.26"],"dfs":["15.8","15.11","23.27","23.30","23.31"],"step":["15.8","15.11","23.27","23.30"],"实际走了四步":["15.8","23.27"],"第三步后进入用于输出结果":["15.8","23.27"],"通过画递归树来理解":["15.9","23.28"],"false":["15.10","17.11","23.21","23.29"],"true":["15.10","23.29","34.0"],"全局答案":["15.11","23.30"],"x1":["15.11","23.30"],"y1":["15.11","23.30"],"forw":["15.11","23.30"],"当找到了或转向大于2直接退出":["15.11","23.30"],"剪枝":["15.11","23.30"],"不在同列或同行上剪掉":["15.11","23.30"],"dx":["15.12"],"枚举每个表示让所有的节点退出圈":["15.14","23.35"],"1e9":["15.17"],"从低位累乘":["17.4"],"solve":["17.4","23.10"],"s":["17.4"],"x进制的string":["17.4"],"说明":["17.7"],"pow":["17.7"],"当前最高位":["17.7"],"mod运算后":["17.7"],"保留0000上对应的数":["17.7"],"len":["17.7"],"new":["17.10"],"one":["17.10"],"上边的容易出错":["17.10"],"ll":["17.10"],"ld":["17.10"],"double":["17.10","23.21","26.9","26.11"],"ull":["17.10"],"unsigned":["17.10"],"qmul":["17.10"],"判断一个数的奇偶性":["17.12"],"boolean":["17.12"],"isoddnumber":["17.12"],"取绝对值":["17.12"],"某些机器上":["17.12"],"效率比":["17.12"],"高":["17.12"],"abs":["17.12"],"取得":["17.12"],"的符号":["17.12"],"为正数":["17.12"],"等于":["17.12"],"链接":["17.13"],"博客":["17.13"],"log":["17.18","23.14","26.5"],"初始阶乘为1":["17.18"],"idx":["17.18"],"定义放外面用以兼容那些操蛋的不支持":["17.18"],"c99":["17.18"],"的编译器":["17.18"],"idx2":["17.18"],"muls":["17.18"],"txt":["20.2"],"stdin":["20.2"],"混用后出问题":["20.3"],"命名为":["20.6"],"所以":["20.6"],"是结构体类型":["20.6"],"nhuma":["20.6"],"string":["20.6","25.0"],"str1":["20.6","26.12"],"body":["20.6"],"str2":["20.6","26.12"],"leg":["20.6"],"从而让":["20.7"],"表现的和整数":["20.7"],"能够兼容":["20.7"],"又不完全一样":["20.7"],"可能会导致程序崩溃":["20.8"],"数据损坏等问题":["20.8"],"建议的做法是":["20.8"],"在":["20.8"],"这些最好不用于变量名的使用":["20.9"],"否则会报错":["20.9"],"对拍详解":["21.0"],"rand":["21.1"],"random":["21.1"],"shuffle":["21.1"],"brute":["21.2"],"correct":["21.2"],"adt":["23.1"],"cursor":["23.2"],"remove":["23.2"],"image":["23.3"],"20221026001414228":["23.3"],"20221026001435043":["23.3"],"20221026001855064":["23.3"],"内存需要和使用":["23.4"],"因为必须是连续的内存块":["23.4"],"所以如果创建的内存后没有用完":["23.4"],"那么就会有内存浪费":["23.4"],"每个内存块有两个分区":["23.4"],"一个为数据":["23.4"],"另一个指针":["23.4"],"一般情况":["23.4"],"see":["23.5"],"pic":["23.5"],"将原先tmp2":["23.5"],"与":["23.5"],"断开":["23.5"],"即成功插入中间":["23.5"],"版本":["23.5"],"任意位置删除":["23.5"],"20221028154056045":["23.5"],"delete":["23.5"],"val":["23.6"],"因为到这一步说明":["23.6"],"phead1指向的值以及之后都是大于并且递增的":["23.6"],"所以直接将next":["23.6"],"phead1即可":["23.6"],"是无法进行随机读取的":["23.7"],"同时在":["23.7"],"函数的调用":["23.8"],"电脑":["23.9"],"cpu":["23.9"],"来让这个函数调用的":["23.10"],"高度为":["23.11","23.41"],"还是":["23.11"],"一般的设为":["23.11"],"满二叉树":["23.11"],"必须只有":["23.11"],"或":["23.11"],"完全二叉树":["23.11"],"除了最深的节点":["23.11"],"其他节点要被填满":["23.11"],"并且最后一层必须向左对齐":["23.11"],"高度计算公式":["23.11"],"math":["23.11"],"ceil":["23.11"],"当树为空时":["23.13"],"用新节点初始化根":["23.13"],"如果树不为空":["23.13"],"则获取前面的元素":["23.13"],"如果前面的元素没有左孩子":["23.13"],"则将左孩子设置为新节点":["23.13"],"如果右孩子不存在":["23.13"],"则将右孩子设置为新节点":["23.13"],"如果该节点有两个孩子":["23.13"],"则将":["23.13"],"弹出":["23.13"],"其从队列中":["23.13"],"将新数据入队":["23.13"],"判断是否为完全二叉树":["23.13"],"complete":["23.13"],"以上都不是完全二叉树":["23.13"],"代码实现思路":["23.13"],"根据完全二叉树的性质":["23.13"],"best":["23.14"],"空间复杂度最坏情况指的是":["23.14"],"搜索树为完美二叉树":["23.14"],"在最后一层中":["23.14"],"队列走":["23.14"],"约等于":["23.14","23.41"],"border":["23.14"],"print":["23.14"],"广度优先打印":["23.14"],"empty":["23.14"],"nodecurrent":["23.14"],"front":["23.14"],"pop":["23.14"],"深度优先遍历树":["23.14"],"每次的函数调用":["23.14"],"系统会在栈中分配内存":["23.14"],"直到函数调用结束":["23.14"],"内存才会被系统回收":["23.14"],"通过使用前序遍历":["23.14"],"后序遍历":["23.14"],"树的高度成正比":["23.14"],"最坏的情况是指当树的高度为":["23.14"],"时":["23.14","23.41"],"栈中将会存有从根节点到叶子节点的函数调用":["23.14"],"当为完美二叉树时":["23.14"],"为最优情况":["23.14"],"判断是否为二叉搜索树":["23.14"],"定义":["23.14"],"inorder":["23.15"],"外部的接口函数":["23.15"],"非递归中序遍历":["23.15"],"即先不考虑多部分重叠的情况下加上所有部分后":["23.16"],"边界问题":["23.17"],"图例":["23.17"],"5e5":["23.19"],"tree":["23.19"],"z":["23.21"],"cmp":["23.21"],"init":["23.21"],"p1":["23.21"],"p2":["23.21"],"ans3":["23.21"],"sync":["23.21","26.10"],"with":["23.21","35.0"],"stdio":["23.21"],"tie":["23.21"],"nullptr":["23.21"],"初始化":["23.21"],"重点":["23.21"],"因为若没有这一步前面循环会被保留下来":["23.21"],"sort":["23.21","24.1"],"start":["23.21"],"表示能够触底":["23.21"],"因为sort了":["23.21"],"所以直接遍历i":["23.21"],"1到n":["23.21"],"表示能连接的不同方向路径":["23.21"],"有点像bfs慢慢扩展开":["23.21"],"do":["23.24"],"dy":["23.31"],"不使用的原因是防止整个岛屿的":["23.31"],"没有被标记遍历完成":["23.31"],"导致后面寻找岛屿找到的是还是这个岛屿的":["23.31"],"有向图的基础图":["23.32"],"将其变为无向图":["23.32"],"能够连通":["23.32"],"完全图":["23.32"],"所有节点之间都对应一条边":["23.32"],"缺点":["23.34"],"查找与修改时间复杂度为":["23.34"],"为该系统下的时钟打点数":["23.40"],"log2":["23.41"],"log2n":["23.41"],"国内的高度大多是":["23.41"],"只有根节点时高度为":["23.41"],"指的是":["23.41"],"向下取整":["23.41"],"code":["23.41"],"binary":["23.41"],"search":["23.41"],"low":["23.41"],"high":["23.41"],"mid":["23.41","26.2","26.9"],"无向图的度数之和为边数的两倍":["23.42"],"的原因是无向图为对称矩阵":["23.43"],"为连通图的最少边数":["23.43"],"邻接表":["23.43"],"无向图":["23.43"],"通过创建一个三元组":["23.44"],"的节点":["23.45"],"而后边跟得是该邻接表的行列从":["23.45"],"到":["23.45"],"一般":["24.0"],"的算法能解决的数据范围在":["24.0"],"块状链表":["24.1"],"分块":["24.1"],"莫队":["24.1"],"100000n":["24.1"],"nlogn":["24.1"],"各种":["24.1"],"线段树":["24.1"],"树状数组":["24.1"],"l":["26.2"],"base":["26.4"],"为步数的话":["26.5"],"条消息":["26.5"],"将原数组直接转化为前缀和":["26.6"],"px":["26.6"],"py":["26.6"],"设i":["26.6"],"为该区间的左端点":["26.6"],"check":["26.8","26.9","26.10","26.11"],"时为最优解的":["26.9"],"注意传入的参数类型":["26.9"],"minn":["26.9"],"1e":["26.11"],"因为计算机中的浮点数比较会有误差":["26.11"],"所以用eps替代0":["26.11"],"num3":["26.11"],"str3":["26.12"],"思路":["26.15"],"apis":["27.0"],"provided":["27.0"],"by":["27.0"],"vitepress":["27.0"],"documentation":["27.9","46.3"],"调整文件夹目录缩进大小":["33.0"],"拼接目录":["34.0"],"join":["34.0"],"isdir":["34.0"],"跳过img文件夹":["34.0"],"continue":["34.0"],"如果是文件夹":["34.0"],"读取之后作为下一次递归参数":["34.0"],"files":["34.0"],"readdirsync":["34.0"],"text":["34.0"],"collapsible":["34.0"],"items":["34.0"],"获取名字":["34.0"],"递归处理子目录下的文件":["35.0"],"elif":["35.0"],"endswith":["35.0"],"modify":["35.0"],"file":["35.0"],"content":["35.0"],"open":["35.0"],"encoding":["35.0"],"utf":["35.0"],"添加了全局搜索功能":["36.0"],"可以搜索文章标题和内容":["36.0"],"创建了pwa能够更好的使用手机来查看":["38.0"],"ppt":["39.0"],"水视频":["39.0"],"做edg每个选手的成长数据":["39.0"],"any":["40.0"],"failed":["40.0"],"to":["40.0"],"some":["40.0","46.0"],"refs":["40.0"],"pull":["40.0"],"rebase":["40.0"],"basic":["41.0"],"unocsstestvue":["44.0"],"index":["45.0","46.1"],"demonstrates":["46.0"],"md":["46.1"],"example":["46.1"],"html":["46.1"],"directory":["46.1"],"danger":["46.2"],"https":["52.0"],"gh":["52.0"],"stupidsheep":["52.0"]},{"0":["0.3","1.1","3.6","3.7","15.5","15.8","23.17","23.19","23.23","23.27","26.10","26.14","34.0"],"1":["3.5","15.16","17.4","20.5","20.7","26.3"],"2":["0.2","17.13","20.3","23.21","23.24","23.32"],"3":["2.5","3.1","3.6","17.13","20.3","23.4","34.0"],"4":["2.3","14.11","15.11","15.12","23.4","23.30","34.0"],"6":["24.0"],"7":["5.5"],"9":["3.11"],"10":["6.1","17.11"],"16":["23.4"],"48":["2.5","20.3"],"100":["3.6","26.10"],"212":["12.3"],"32767":["3.12"],"1000000":["24.1"],"rabbin":["0.2","14.8"],"false":["0.2","4.2","14.8","20.5","23.13","26.10"],"news":["0.3"],"代表相同结构体类型":["0.3"],"创建了一个临时的结构体":["0.3"],"scanf":["0.3"],"lld":["0.3"],"if":["0.3","3.5","3.7","3.8","5.4","6.2","9.4","15.5","15.12","15.13","15.14","15.15","15.16","17.18","21.2","23.10","23.13","23.23","23.35","23.36","23.41","26.3","26.8"],"n":["0.5","2.5","3.6","7.3","17.10","22.1","23.5","23.17","23.19"],"cin":["0.5","2.1","3.11","7.3","22.1","23.17","26.10"],"ans":["1.1","14.10"],"beginn":["1.1"],"for":["1.1","3.6","3.7","7.3","7.11","9.2","14.1","15.5","15.6","15.11","17.1","17.18","22.1","23.17","23.23","23.25","23.30","23.31","26.7","26.9","26.10","27.9","46.3"],"i":["1.1","3.6","3.7","7.3","9.2","14.1","15.5","15.7","15.10","15.11","17.1","23.17","23.23","23.26","23.29","23.30","26.7","26.10"],"b":["2.0","2.4","5.2","6.0","7.6","15.1","17.12","20.7"],"num":["2.1","2.3","23.10","23.19"],"time":["2.1"],"t":["2.1"],"now":["2.1"],"bitset":["2.3"],"str3":["2.3"],"stringstream":["2.3","17.5"],"st":["2.3","11.1","17.5"],"防止出现":["2.5"],"9整数的错误":["2.5"],"return":["2.5","5.2","7.6","14.3","15.4","15.8","15.12","17.3","20.3","21.1","23.10","23.13","23.19","23.20","23.27","23.41"],"signed":["2.5","5.2","7.6"],"main":["2.5","5.2","5.5","7.6","7.11","20.6","22.1","23.17","27.0"],"tmp1":["2.5","23.14"],"bool":["3.1","14.7","15.2","17.9","23.13","26.7"],"mrtest":["3.1"],"rabin":["3.1"],"test":["3.1"],"已经被":["3.2","14.9"],"筛掉了":["3.2","14.9"],"所以就得提前":["3.2","14.9"],"防止重复":["3.2","14.9"],"c":["3.2","12.4","14.7","14.9","14.11","17.9","23.13","26.5","35.0"],"line":["3.2","12.4","14.7","14.9","17.9","23.13","26.5"],"numbers":["3.2","12.4","14.7","14.9","17.9","23.13","26.5"],"vector":["3.2","7.11","14.9","23.10"],"int":["3.2","5.5","7.11","14.9","23.40","26.9"],"d":["3.3"],"则":["3.3"],"即":["3.3"],"else":["3.4","3.5","8.2","14.4","15.16","17.18","23.37","23.41","25.0","26.3","26.8"],"a":["3.4","5.2","6.2","7.6","14.4","15.1","17.12","20.7","46.1"],"while":["3.5","3.8","3.11","9.2","15.15","15.16","23.24","23.36","25.0","26.3","26.6"],"push":["3.5","3.8","6.1","15.7","15.15","15.16","23.26","23.36","26.3"],"back":["3.5","6.1","15.7","15.16","23.26","26.3"],"cstdio":["3.6"],"using":["3.6","14.5","17.6","17.11"],"namespace":["3.6","14.5","17.6","17.11"],"std":["3.6","14.5","17.6","17.11"],"const":["3.6","15.2","17.11"],"5e4":["3.6"],"k":["3.6","9.1","15.4","17.13","23.20"],"init":["3.6"],"min":["3.7","23.23"],"起点的值赋值为0":["3.8","15.15","23.36"],"表示从此处开始":["3.8","15.15","23.36"],"将其加入到圈中":["3.8","15.15","23.36"],"size":["3.8","15.8","15.15","23.27","23.36"],"auto":["3.8","15.15","23.36"],"tmp":["3.8","15.15","17.4","23.36","26.7"],"top":["3.8","15.15","23.36"],"每次取出小根堆的第一个":["3.8","15.15","23.36"],"替代普通版中的使用哨兵节点进行找最小值":["3.8","15.15","23.36"],"pop":["3.8","15.15","23.36"],"出圈":["3.8","15.15","23.36"],"u":["3.8","15.14","15.15","23.35","23.36"],"second":["3.8","15.15","23.36"],"不同":["3.9"],"它们在":["3.9"],"中被视为相等":["3.9","12.4"],"可能会导致找不到某些元素":["3.9","12.4"],"需要":["3.9","12.4","23.6"],"do":["3.10"],"防止":["3.11"],"和":["3.11","15.1","17.12"],"生成随机数":["3.12"],"windows":["3.12"],"系统下":["3.12"],"生成的随机数的范围在":["3.12"],"之间":["3.12"],"故需要手写函数":["3.12"],"mod":["3.12"],"输入最大范围的数":["3.12"],"instead":["4.0","8.0"],"re":["4.0","8.0"],"run":["4.0","8.0"],"root2":["4.2"],"noderoot3":["4.2"],"root3":["4.2"],"true":["4.2","20.5","23.13"],"gcdd":["5.2"],"len":["5.4"],"ios":["5.5"],"sync":["5.5"],"with":["5.5","26.10","34.0"],"洛谷":["6.0"],"列竖式就对了":["6.1"],"用于标记是否cet":["6.2"],"z":["6.2"],"名字前提条件的首元素为大写字母":["6.2"],"若结尾是结束符号":["6.2"],"则名字从第二个元素开始判断到长度":["6.2"],"m":["7.3","15.4","23.17","23.19","23.20"],"cet":["7.3"],"sstream":["7.11"],"stack":["7.11"],"stdexcept":["7.11"],"streambuf":["7.11"],"utility":["7.11"],"cwchar":["7.11"],"cwctype":["7.11"],"那么":["7.13"],"因为":["7.15","23.5"],"cout":["9.1","12.2","15.8","20.6","23.24","23.27","23.41","26.10"],"h":["9.1","17.11"],"要插入这个人碰的朋友数n":["9.2"],"str":["9.3","12.2","15.2"],"insert":["9.3"],"make":["9.3"],"pair":["9.3"],"numb":["9.4"],"f1":["9.4"],"f2":["9.4"],"02":["10.1"],"验证算法":["10.2"],"用于算法的python函数":["10.3"],"类型":["11.2"],"有一个引用传递":["11.2"],"则不是":["11.2"],"x":["11.2","14.8","15.4","15.12","23.20","26.1"],"y":["11.2","15.4","15.12","23.20"],"plus":["11.2"],"begin":["12.1","14.3","17.3","26.11","26.12"],"end":["12.1","14.3","17.3","20.9","21.1","23.15","26.12"],"迭代器":["12.1"],"iterator":["12.1"],"无法自定义结构体类型":["12.1"],"endl":["12.2","15.8","23.24","23.27","23.41"],"不需要写到函数定义中去":["12.2"],"mystruct":["12.2"],"string":["12.2","15.2","17.5"],"cmp":["12.2"],"p1":["12.2"],"p2":["12.2"],"都考虑":["12.4"],"x1":["12.5","23.21"],"x2":["12.5","23.21"],"x3":["12.5"],"x4":["12.5"],"this":["12.5"],"方法二":["14.3","17.3"],"不需要反转":["14.3","17.3"],"cmath":["14.5","17.6"],"define":["14.5","17.6"],"pi":["14.5","17.6"],"素数计数函数":["14.6","17.8"],"推出不大于":["14.6","17.8"],"即可":["14.7","17.9"],"miller":["14.8"],"num2":["14.10","14.12","17.14"],"num3":["14.10"],"若":["14.11"],"num1":["14.14","17.16"],"比较":["15.1"],"的":["15.1"],"次方和":["15.1"],"次方时":["15.1"],"如果出现了":["15.1"],"的可能为很大的数时":["15.1"],"此时":["15.1"],"struct":["15.2"],"node":["15.2"],"operator":["15.2"],"str1":["15.2"],"线段树有的操作":["15.3"],"树状数组不一定有":["15.3"],"到树的底部后返回":["15.4","23.20"],"分治的标志":["15.4","23.20"],"使父节点加上两个子节点的值":["15.4","23.20"],"修改单个或一个范围内的值":["15.4","23.20"],"时间复杂度为":["15.4","23.20"],"logn":["15.4","23.20","24.0"],"update":["15.4","23.20"],"使用懒标记add":["15.4","23.20"],"剪枝":["15.6","23.25"],"汉罗塔":["15.9","23.28"],"到了且转向小于等2":["15.11","23.30"],"搜索四个方向":["15.11","23.30"],"aa":["15.11","23.30"],"bb":["15.11","23.30"],"dy":["15.12"],"void":["15.12","23.6","23.19"],"dfs":["15.12"],"不使用的原因是防止整个岛屿的":["15.12"],"没有被标记遍历完成":["15.12"],"导致后面寻找岛屿找到的是还是这个岛屿的":["15.12"],"即state":["15.14","23.35"],"哨兵节点":["15.14","23.35"],"sbnode":["15.14","23.35"],"j":["15.14","23.35"],"mid":["15.17","26.7"],"s":["17.5"],"eigth":["17.5"],"ten":["17.5"],"sum":["17.5"],"pos":["17.7"],"快速乘":["17.10"],"modb":["17.10"],"res":["17.10"],"ab":["17.10"],"cmod":["17.10"],"qpow":["17.10"],"快速幂":["17.10"],"例题":["17.11"],"include":["17.11"],"bits":["17.11"],"stdc":["17.11"],"max":["17.11","17.12"],"1e8":["17.11"],"5e6":["17.11"],"左右的素数":["17.11"],"为负数":["17.12"],"数不变":["17.12"],"为负数有":["17.12"],"需要计算":["17.12"],"的补码":["17.12"],"然后进行异或运算":["17.12"],"结果":["17.12"],"变号并且为":["17.12"],"的绝对值减":["17.12"],"再减去":["17.12"],"就是绝对值":["17.12"],"取两个数的最大值":["17.12"],"ka":["17.13"],"kb":["17.13"],"carry":["17.18"],"进位":["17.18"],"再乘就要溢出":["17.18"],"了":["17.18"],"直接计算乘法":["17.18"],"输入重定向":["20.2"],"输入数据将从in":["20.2"],"等价于":["20.3"],"offset":["20.5"],"result":["20.5"],"human":["20.6"],"为该结构体的一个变量":["20.6"],"renlei":["20.6"],"等同于":["20.6"],"f":["20.7","26.14"],"p":["20.7","23.5"],"foo":["20.7","46.1"],"之后将指针设置为":["20.8"],"这样既能避免悬垂指针":["20.8"],"dangling":["20.8"],"变量不明确":["20.9"],"其实原因是":["20.9"],"为":["20.9"],"edisonba":["21.0"],"数组洗牌排序":["21.1"],"猴子排序":["21.1"],"fc":["21.2"],"txt":["21.2"],"abstract":["23.1"],"data":["23.1"],"count":["23.2"],"read":["23.2","35.0"],"因为分散的地址":["23.3"],"需要能够链接所有元素":["23.3"],"每个":["23.3"],"块":["23.3"],"中":["23.3"],"如果数组的数据类型很大":["23.4"],"字节之类":["23.4"],"那么链表能够很好节省空间":["23.4"],"插入元素的成本":["23.4"],"出来的需要delete掉":["23.5"],"防止野指针":["23.5"],"则tmp2":["23.5"],"节点":["23.5"],"dell":["23.5"],"what":["23.5"],"反转链表":["23.5"],"reverse":["23.5"],"wtf":["23.5"],"current":["23.5"],"nodetmp3":["23.5"],"存储原节点的下一个的地址":["23.5"],"指向上一个":["23.5"],"记录tmp2":["23.5"],"为下个循环节点能够指向上一个":["23.5"],"原始迭代遍历":["23.5"],"当前的tmp2":["23.5"],"递归版本":["23.5"],"nodereverse":["23.5"],"当递到尾节点的时候":["23.5"],"返回递归代码":["23.5"],"链表清空":["23.6"],"clear":["23.6"],"若直接去删除头指针":["23.6"],"导致在堆内":["23.6"],"的内存无法再被处理":["23.6"],"导致那块":["23.6"],"内存泄漏":["23.6"],"delete":["23.6"],"指向内存的指针":["23.6"],"释放了指向的内存":["23.6"],"指针还能够继续使用":["23.6"],"head":["23.6"],"prev":["23.6"],"length":["23.6","34.0"],"我们在删除一个指针之后":["23.6"],"能够":["23.7"],"vec":["23.7"],"和递归调用":["23.8"],"先进后出":["23.8"],"进程的处理顺序":["23.9"],"arr":["23.10"],"局部静态变量":["23.10"],"log":["23.11"],"数组第一个节点为":["23.11"],"左孩子为":["23.11"],"index":["23.11"],"2i":["23.11"],"右孩子为":["23.11"],"拓展":["23.11"],"堆就是存储在一维数组中的完全二叉树":["23.11"],"完美二叉树":["23.11"],"除了叶子节点外":["23.11"],"所有节点的子节点都填满了":["23.11"],"并且":["23.11"],"深度等于高度":["23.11"],"除了底层的节点":["23.13"],"其他层节点都是满的":["23.13"],"层级遍历去一层层判断是否有节点为空":["23.13"],"或判断最后一层没有靠左对齐":["23.13"],"先有空":["23.13"],"后再有值":["23.13"],"iscompletetree":["23.13"],"noderoot":["23.13"],"root":["23.13","23.21"],"nullptr":["23.13"],"flag":["23.13","23.21"],"queue":["23.13"],"必须保证左子树的所有节点的值都小于等于父节点":["23.14"],"右子树的所有节点的值大于父节点":["23.14"],"错误代码":["23.14"],"没考虑到全局":["23.14"],"而只考虑了父节点和左右子节点的关系":["23.14"],"isbinarytree":["23.14"],"error":["23.14"],"tmp2":["23.14"],"tmp3":["23.14"],"只有当前面的条件无法进入":["23.14"],"才会到这一步":["23.14"],"然后后面的子树就可以不管了":["23.14"],"直接原路返回false":["23.14"],"但时间复杂度很高":["23.14"],"issubtreelesser":["23.14"],"value":["23.14"],"左子树的所有节点值都小于value":["23.14"],"父节点":["23.14"],"实现函数":["23.15"],"nodetmp":["23.15"],"再减去那些重叠的部分":["23.16"],"xy":["23.17"],"区间同时增加一个值":["23.18"],"即在左边界的加上增量":["23.18"],"然后再右边界":["23.18"],"1的位置减去增量":["23.18"],"理解":["23.18"],"因为区间内的值都是同时加上一个相同的数":["23.18"],"所以区间内的差不会变":["23.18"],"而到了区间外第一个":["23.18"],"lowbit":["23.19"],"如果能够触底":["23.21"],"看他的根节点":["23.21"],"即最上边的值能否够到上表面":["23.21"],"yes":["23.21"],"no":["23.21"],"注意":["23.21"],"如果是两个空洞求相切":["23.21"],"是两个的圆的半径相加":["23.21"],"而上表面或下表面和空洞的相切只有空洞的半径了":["23.21"],"不能把表面看成空洞":["23.21"],"奶酪题目重写":["23.21"],"state":["23.21"],"dis":["23.21"],"y1":["23.21"],"z1":["23.21"],"y2":["23.21"],"z2":["23.21"],"求一个数组的某个顺序符合的情况":["23.24"],"遍历到的上标记":["23.31"],"若有四块陆地包围表示该岛不会被完全淹没":["23.31"],"有向图":["23.32"],"所有节点对应的最多的边为":["23.32"],"缺点":["23.33"],"若为稀疏":["23.33"],"linkedlist":["23.34"],"tick":["23.40"],"clk":["23.40"],"tck":["23.40"],"解题为通过转化为二分查找树":["23.41"],"然后再找到对应的值和范围":["23.41"],"从根节点到终点为查找的次数":["23.41"],"哈夫曼树构建":["23.41"],"哈夫曼树是一种特殊的二叉树":["23.41"],"它的构建过程是基于贪心算法的思想":["23.41"],"常用于数据压缩和编码等领域":["23.41"],"哈夫曼树的构建过程如下":["23.41"],"将给定的":["23.41"],"个权值看成":["23.41"],"棵只有一个节点的二叉树":["23.41"],"在这":["23.41"],"棵二叉树中选取权值最小的两棵二叉树合并":["23.41"],"构成一棵新的二叉树":["23.41"],"且新二叉树的根节点权值为两棵二叉树的权值之和":["23.41"],"从剩余的":["23.41"],"棵二叉树中":["23.41"],"再选取权值最小的两棵二叉树合并":["23.41"],"可以把其想象成每条边既有出和入度":["23.42"],"空间":["23.43"],"o":["23.43"],"v":["23.43"],"2xe":["23.43"],"为所有的顶点数":["23.43"],"row":["23.44"],"试证明":["23.45"],"对任何一棵非空二叉树":["23.45"],"若其叶节点数目为":["23.45"],"的算法能解决的数据范围在n":["24.0"],"map":["24.1"],"heap":["24.1"],"拓扑排序":["24.1"],"kruskal":["24.1"],"spfa":["24.1"],"求凸包":["24.1"],"求半平面交":["24.1"],"cdq":["24.1"],"分治":["24.1"],"整体二分":["24.1"],"后缀数组":["24.1"],"树链剖分":["24.1"],"动态树":["24.1"],"1000000n":["24.1"],"char":["25.0"],"ans1":["26.2"],"在mid左边的子段中找到最大子段和":["26.2"],"ans2":["26.2"],"同理":["26.2"],"从右向左找比基准数小的数":["26.4"],"要先从右边开始找":["26.4"],"算法":["26.5"],"四种二分模板":["26.5"],"am":["26.5"],"brother":["26.5"],"的博客":["26.5"],"csdn":["26.5"],"博客":["26.5"],"二分模板":["26.5"],"l":["26.6"],"r":["26.6"],"为寻找区间右端点的左右范围":["26.6"],"跳出条件为":["26.6"],"check":["26.7"],"double类型赋值给int":["26.7"],"小了就不行":["26.8"],"要求最":["26.8"],"大值":["26.8"],"删除了":["26.8"],"所以就不用将tmp赋值":["26.8"],"因为已经不thisnumberexists了":["26.8"],"下次还是和原tmp比较":["26.8"],"1e10":["26.9"],"maxx":["26.9"],"temp":["26.9"],"stdio":["26.10"],"tie":["26.10"],"cnt":["26.10"],"sort":["26.11","26.12"],"greater":["26.11","26.12"],"fib3":["26.14"],"记忆化数组优化递归":["26.14"],"usedata":["27.0"],"can":["27.0"],"be":["27.0"],"文件树大小":["33.0"],"name":["34.0"],"basename":["34.0"],"排除非":["34.0"],"文件":["34.0"],"suffix":["34.0"],"extname":["34.0"],"without":["34.0"],"src":["34.0"],"substring":["34.0"],"change":["34.0"],"to":["34.0"],"link":["34.0"],"errors":["35.0"],"replace":["35.0"],"as":["35.0"],"list":["35.0"],"cpp":["35.0"],"参考链接":["36.0","38.0"],"https":["36.0"],"今天蓝桥杯模拟赛选拔免费参加蓝桥杯省赛的资格":["37.0"],"通过从vlr":["39.0"],"gg拿到数据":["39.0"],"在一个git文件夹下的git文件夹":["40.0"],"会被覆盖config":["40.0"],"username":["40.0"],"usermail":["40.0"],"import":["40.0"],"style":["40.0"],"css":["40.0"],"template":["41.0"],"of":["46.0"],"the":["46.0"],"header":["46.1"],"anchors":["46.1"],"heading":["46.1"],"in":["46.1"],"dangerous":["46.2"],"details":["46.2"],"fun":["52.0"],"api":["52.0"],"wakatime":["52.0"]},{"0":["3.1","7.11","8.2","17.7","22.1","26.5","26.12"],"1":["0.6","6.1","9.4","14.10","15.7","15.8","15.17","23.26","23.27","26.10"],"2":["3.1","14.5","14.7","14.8","17.6","17.9","23.8","23.45","26.6"],"3":["9.1","23.5","23.11"],"4":["17.13","23.5"],"5":["3.3","23.5","26.7"],"6":["23.5"],"7":["23.5"],"8":["2.1","5.5","23.5"],"9":["23.5"],"10":["3.4","14.4","25.0"],"20":["23.24"],"30":["0.2","14.8"],"325":["17.10"],"1000":["2.1","23.40"],"3600":["2.1"],"9375":["17.10"],"true":["0.2","3.2","14.8","14.9","26.7"],"for":["0.2","2.5","5.4","8.2","12.5","14.8","15.12","23.10","26.2"],"i":["0.2","2.5","5.4","5.5","7.11","14.8","15.6","15.12","22.1","23.25","23.31","26.2"],"now":["0.2","14.8"],"rand":["0.2"],"找最大的n阶乘":["0.3"],"赋值":["0.3"],"sort":["0.3","8.2","12.2"],"tmp":["0.3","3.6","22.1","23.5","23.13"],"x":["0.3","14.1","14.6","17.1","17.8","17.11","23.19"],"a":["0.5","20.5"],"sum":["0.5","23.21","26.2"],"length":["1.1","7.11","17.11"],"pos":["1.1"],"蓝桥杯":["2.0"],"localtime":["2.1"],"组":["2.4"],"tmp2":["2.5"],"cin":["2.5","3.6","4.2","5.5","7.6","7.13","12.5","15.7","17.5","23.26","26.8","26.11"],"题目保证输入":["2.5"],"n为误导项":["2.5"],"需要倒过来存储到数组":["2.5"],"原因是要从最低位开始迭代累乘进制数":["2.5"],"特判":["3.1","17.10"],"u":["3.1","17.10"],"t":["3.1","5.2","17.10"],"ud":["3.1","17.10"],"bool":["3.2","6.1","12.4","14.9","23.41","26.5"],"is":["3.2","14.7","14.9","17.9"],"max2":["3.2","14.9"],"void":["3.2","6.1","14.9","20.3","26.5","26.7","26.14"],"get":["3.2","14.9"],"与":["3.3"],"互素":["3.3"],"这个定理很重要":["3.3"],"cb":["3.3"],"f":["3.4","14.4"],"cout":["3.4","3.10","5.5","6.1","9.3","14.1","14.4","17.1","21.2","23.10","26.11"],"cnt":["3.5","15.16","23.21","26.3"],"记录逆序对个数":["3.5","15.16","26.3"],"main":["3.6","4.2","12.5","15.7","23.26","26.8","26.11"],"c1":["3.6"],"c2":["3.6"],"empty":["3.7","15.5","23.13","23.15","23.23","26.12"],"front":["3.7","15.5","23.13","23.23"],"pop":["3.7","15.5","15.7","23.13","23.23","23.26"],"while":["3.7","3.10","4.2","5.2","14.10","15.5","17.7","17.11","23.13","23.15","23.19","23.23","26.12"],"back":["3.7","15.5","15.8","22.1","23.10","23.23","23.27"],"求最小值":["3.7","15.5","23.23"],"找到一个小于新来元素":["3.7","15.5","23.23"],"保证了每次出圈的都是该值最少的情况":["3.8","15.15","23.36"],"后面出现相同的节点直接跳过":["3.8","15.15","23.36"],"continue":["3.8","15.15","23.36"],"出圈同时":["3.8","15.15","23.36"],"节点visited":["3.8","15.15","23.36"],"item":["3.8","15.14","15.15","23.35","23.36","35.0"],"松弛操作":["3.8","15.15","23.36"],"将u节点的邻接节点都去尝试使他们变小":["3.8","15.15","23.36"],"都考虑":["3.9"],"c":["3.9","10.3","23.3"],"line":["3.9","26.1"],"numbers":["3.9","26.1"],"struct":["3.9","12.1","23.6","23.41"],"int":["3.9","14.7","17.9","23.6","26.1","26.5"],"endl":["3.10","9.1","21.2"],"混用后出问题":["3.11"],"if":["3.11","5.5","7.11","12.4","14.7","14.10","14.13","17.9","17.15","26.6"],"n1":["3.12"],"n2":["3.12","23.45"],"n3":["3.12"],"n4":["3.12"],"ans":["3.12","6.1"],"table":["4.0","8.0"],"of":["4.0","8.0","20.5"],"contents":["4.0","8.0"],"with":["4.0","8.0","26.8","26.11"],"root1":["4.2"],"n":["4.2","12.5","23.6","23.7"],"lld":["5.2"],"j":["5.4","23.17"],"stdio":["5.5","26.8","26.11"],"false":["5.5","26.7","26.8","26.11"],"tie":["5.5","26.8","26.11"],"nullptr":["5.5","23.3","26.8"],"最多进1位":["6.1"],"所以不需要用while":["6.1"],"printt":["6.1"],"flag":["6.1","9.3","26.12"],"1就好了":["6.2"],"否则就全遍历":["6.2"],"d":["7.6","14.11"],"modd":["7.6"],"任何数":["7.10"],"ss":["7.11"],"具有唯一性":["7.15"],"所有":["7.15"],"str":["7.17","17.11"],"为清空缓冲区":["7.17"],"size":["8.2"],"q":["8.2"],"insert":["9.2"],"make":["9.2"],"pair":["9.2"],"cet":["9.3","26.14"],"str2s":["9.3"],"rdbuf":["11.1"],"in":["11.1","46.0"],"class":["11.2","23.6"],"lambdaclass":["11.2"],"public":["11.2","23.6"],"xx":["11.2"],"yy":["11.2"],"和":["12.1","12.2","23.21"],"键值对来作为":["12.1"],"的下标":["12.1"],"但可以用":["12.1"],"键值对在":["12.1"],"中":["12.1"],"问题分析":["12.1"],"由于":["12.1"],"numbers中没有":["12.1"],"类型的":["12.1"],"hash":["12.1","24.1"],"类型定义":["12.2"],"另一个作用是返回排完序后的前":["12.2"],"k":["12.2","23.19","26.11"],"个元素":["12.2"],"partial":["12.2"],"start":["12.2"],"count":["12.2"],"end":["12.2","23.4"],"func":["12.2"],"从运行结果来看":["12.2"],"对局部进行排序时":["12.2"],"序列的前":["12.2"],"个最小的元素放在序列的前":["12.2"],"个位置":["12.2"],"其余的放在序列的后面未进行排序":["12.2"],"以上":["12.2"],"nums2":["12.3"],"begin":["12.3","23.7"],"operator":["12.4","23.41"],"const":["12.4","23.24"],"nextt":["12.4"],"return":["12.4","14.12","14.14","15.2","17.11","17.14","17.16","26.8","26.11","34.0"],"queue":["12.5"],"nums":["12.5"],"y":["14.1","17.1"],"solve":["14.3","17.3","26.5","26.7"],"num":["14.3","14.7","17.3","17.9","26.5"],"acos":["14.5","17.6"],"利用反三角函数":["14.5","17.6"],"asin":["14.5","17.6"],"的素数个数约有":["14.6","17.8"],"prime":["14.7","17.9"],"则":["14.11","23.33","23.45"],"b时结束计算":["14.13","17.15"],"num2":["14.14","17.16","26.7","26.10","26.12"],"pow":["15.1"],"函数和快速幂都无法使用":["15.1"],"可以将两者两边都加上":["15.1"],"log":["15.1"],"然后因为能够将角标的值提到外边":["15.1"],"转换为":["15.1"],"str2":["15.2"],"需要注意":["15.2"],"结果与正常数组排序相反":["15.2"],"不需要写到函数定义中去":["15.2"],"但是树状数组的代码要比线段树短":["15.3"],"思维更清晰":["15.3"],"如果这个节点的左右边界完全在x和y之间":["15.4","23.20"],"被包含了":["15.4","23.20"],"说明这个tree节点属于其中的一部分":["15.4","23.20"],"则返回":["15.4","23.20"],"边界长度表示子节点的个数":["15.4","23.20"],"做上懒标记":["15.4","23.20"],"先将懒标记传到左右子树后再向下更新":["15.4","23.20"],"枚举递归树下一层可能的情况":["15.6","23.25"],"state":["15.6","23.25"],"用了就改变状态":["15.8","23.27"],"push":["15.8","22.1","23.10","23.13","23.27"],"迷宫问题":["15.9","23.28"],"x为每个行":["15.11","23.30"],"y为每个列":["15.11","23.30"],"判断边界":["15.11","23.30"],"并且不能够是遍历过的":["15.11","23.30"],"题意":["15.11","23.30"],"这条线不能经过其它棋子":["15.11","23.30"],"包括了和自己相同的棋子":["15.11","23.30"],"若下一步上的位置是终点或为0":["15.11","23.30"],"则表示能走":["15.11","23.30"],"其他都不行":["15.11","23.30"],"状态更新后进入":["15.11","23.30"],"遍历到的上标记":["15.12"],"若有四块陆地包围表示该岛不会被完全淹没":["15.12"],"else":["15.13"],"每次比较是d":["15.14","23.35"],"因为没有更新过":["15.14","23.35"],"找到最小的值":["15.14","23.35"],"同时":["15.14","23.35"],"出圈":["15.14","23.35"],"auto":["15.14","23.10","23.35"],"二分查找一般不需要":["15.17"],"原因是二分查找找的是下标":["15.17"],"数组基本开不到":["15.17"],"转为10进制后再转为y":["17.4"],"ste":["17.5"],"被进制缩写流输入后":["17.5"],"不能再重新使用":["17.5"],"hex":["17.5"],"最后":["17.7"],"1时去拿最后的位数":["17.7"],"之后pos":["17.7"],"while条件设为不等于0":["17.7"],"mrtest":["17.10"],"rabin":["17.10"],"test":["17.10"],"ishui":["17.11"],"string":["17.11"],"char":["17.11","26.14"],"len":["17.11","23.5"],"如果":["17.12"],"为":["17.12"],"否则为":["17.12"],"取两个数的最小值":["17.12"],"min":["17.12","23.14","26.9"],"定义多个整数的最大公约数":["17.13"],"若":["17.13"],"竖式乘法带进位":["17.18"],"相当于":["17.18"],"乘完记得复位":["17.18"],"txt文件中读取":["20.2"],"out":["20.2"],"快写比较少用":["20.3"],"write":["20.3"],"condition":["20.5"],"human为变量可以直接使用点符号":["20.6"],"name":["20.6"],"使用":["20.6"],"compile":["20.7"],"error":["20.7"],"ambiguous":["20.7"],"ok":["20.7"],"but":["20.7"],"call":["20.7"],"pointer":["20.8"],"问题":["20.8"],"又能保证内存的正确释放":["20.8"],"若在":["20.8"],"std":["20.9","26.14"],"内的保留字":["20.9"],"但在":["20.9"],"博客园":["21.0"],"随机种子":["21.1"],"若函数内选是固定的数":["21.1"],"则随机数会重复":["21.1"],"生成随机数":["21.1"],"windows":["21.1"],"系统下":["21.1"],"生成的随机数的范围在0":["21.1"],"32767之间":["21.1"],"故需要手写函数":["21.1"],"yes":["21.2"],"structure":["23.1"],"抽象数据模型":["23.1"],"modify":["23.2"],"element":["23.2","40.0"],"一个区域为存储的值":["23.3"],"另一个为下一个元素的地址":["23.3"],"指向":["23.3"],"时表示链表的末尾":["23.3"],"删除同理":["23.4"],"beginning":["23.4"],"需要将所有数向后移动":["23.4"],"腾出第一个位置":["23.4"],"直接将新节点指向原来的头节点":["23.4"],"nodetmp":["23.5"],"用于记录reverse":["23.5"],"红名大佬版本":["23.5"],"链表内反转":["23.5"],"m":["23.5","23.6","26.9"],"之间的节点":["23.5"],"创建新的":["23.5"],"头节点":["23.5"],"核心代码解释":["23.5"],"先找到要反转区间的前一个":["23.5"],"pre":["23.5"],"需要":["23.5"],"次交换来实现":["23.5"],"顺序为":["23.5"],"dummy":["23.5"],"我们在对链表进行反转时":["23.5"],"不对":["23.5"],"进行操作":["23.5"],"而是对":["23.5"],"的":["23.5"],"指针进行操作":["23.5"],"这样":["23.5"],"在反转操作完成后":["23.5"],"仍然指向原始的哨兵节点":["23.5"],"而":["23.5"],"则指向反转后的头节点":["23.5"],"listnodereversebetween":["23.5","23.6"],"listnode":["23.5"],"s":["23.5","34.0"],"编译器只会释放该指针所指向的内存空间":["23.6"],"而不会删除这个指针本身":["23.6"],"listnodenext":["23.6"],"solution":["23.6"],"param":["23.6"],"listnode类":["23.6"],"int整型":["23.6"],"curr":["23.6"],"只有一个":["23.6"],"来遍历到后边第":["23.7"],"编辑":["23.8"],"先进先出":["23.9"],"数组实现队列":["23.9"],"ele":["23.10"],"so":["23.11"],"初始为":["23.11"],"平衡二叉树":["23.11"],"avl":["23.11"],"node":["23.13","23.41"],"que":["23.13"],"left":["23.13","23.41"],"先左再右的顺序符合完全二叉树的定义":["23.13"],"即如果左子树已经空了":["23.13"],"那后边的同层右子树也得空":["23.13"],"issubtreegreater":["23.14"],"右子树的所有节点值都大于value":["23.14"],"每个节点只遍历一次":["23.14"],"时间复杂度为o":["23.14"],"isbstutil":["23.14"],"若节点的值在该范围内":["23.14"],"则true":["23.14"],"节点的左孩子的范围规定为":["23.14"],"最小值":["23.14"],"父节点的值":["23.14"],"节点的右孩子的范围规定为":["23.14"],"最大值":["23.14"],"其中如果root":["23.14"],"stack":["23.15"],"stk":["23.15"],"留下一个没有重叠的平面":["23.16"],"r":["23.18","26.5","26.10"],"时":["23.18"],"它与r之间的差":["23.18"],"br":["23.18"],"arr":["23.18"],"add":["23.19"],"复杂版本":["23.21"],"带权并查集模板":["23.21"],"公式推导":["23.21"],"变量":["23.21"],"数组记录边权":["23.21"],"核心代码":["23.21"],"修改后的查找与合并":["23.21"],"在查找中要将顺带的递归记录到根节点权值":["23.21"],"加上原父节点":["23.21"],"此时已经是递归完后的父节点":["23.21"],"已经记录了到根节点":["23.21"],"若两个根节点相同后":["23.21"],"表示sum":["23.21"],"z表示x":["23.21"],"y则等于sum":["23.21"],"例题":["23.21"],"how":["23.21"],"many":["23.21"],"max":["23.24","26.9"],"ord":["23.24"],"排序数组初始化":["23.24"],"aa":["23.31"],"bb":["23.31"],"下层进入的条件":["23.31"],"例子":["23.32"],"网络的连接":["23.32"],"无向图":["23.32"],"v":["23.33"],"的复杂度":["23.34"],"通过优化可以变成":["23.34"],"swap":["23.37"],"构建一个大根堆":["23.37"],"buildbigheap":["23.37"],"将完全二叉树的个数进行折半并且向下取整":["23.37"],"来确定开始下滤的节点":["23.37"],"常数":["23.40"],"为每秒时钟打点次数":["23.40"],"win":["23.40"],"重复以上过程":["23.41"],"直到只剩下一棵二叉树为止":["23.41"],"这棵二叉树即为哈夫曼树":["23.41"],"在构建过程中":["23.41"],"可以使用最小堆":["23.41"],"也称为小根堆":["23.41"],"来维护剩余的二叉树":["23.41"],"每次从最小堆中选取两个权值最小的节点":["23.41"],"即二叉树":["23.41"],"进行合并":["23.41"],"下面是一个":["23.41"],"numbers代码示例":["23.41"],"其中":["23.41"],"是二叉树节点的定义":["23.41"],"buildhuffmantree":["23.41"],"函数用于构建哈夫曼树":["23.41"],"weight":["23.41"],"right":["23.41"],"w":["23.41"],"null":["23.41"],"cmp":["23.41"],"nodeb":["23.41"],"weights":["23.41"],"priority":["23.41"],"路径长度和回路":["23.42"],"顶点的各个出度":["23.43"],"有向图":["23.43"],"e":["23.43"],"十字链接表":["23.43"],"collumn":["23.44"],"n0":["23.45"],"度为":["23.45"],"的非叶结点数目为":["23.45"],"nsqrt":["24.0"],"以及常数较小的":["24.1"],"算法":["24.1"],"单调队列":["24.1"],"双指针扫描":["24.1"],"并查集":["24.1"],"kmp":["24.1"],"ac":["24.1"],"自动机":["24.1"],"常数比较小的":["24.1"],"的做法":["24.1"],"define":["26.1"],"long":["26.1"],"fpow":["26.1"],"num1":["26.1","26.7","26.10","26.12"],"ans3":["26.2"],"suml":["26.2"],"sumr":["26.2"],"从左向右找比基准数大的数":["26.4"],"主要是找到目标数的下标":["26.4"],"然后再交换位置":["26.4"],"check":["26.5"],"l":["26.5","26.10"],"1e9":["26.5"],"且答案为r":["26.6"],"mid":["26.6"],"因为前缀和非递减":["26.6"],"并且要找到区间最大值":["26.6"],"自动向下取整":["26.7"],"拓展":["26.7"],"四舍五入为":["26.7"],"ios":["26.8","26.11"],"sync":["26.8","26.11"],"规定一个为1的区间内最多只有一个实根":["26.10"],"在每个":["26.10"],"的区间中去找":["26.10"],"经典问题汉诺塔":["26.14"],"递归实现":["26.14"],"实现代码":["26.14"],"include":["26.14"],"bits":["26.14"],"stdc":["26.14"],"h":["26.14"],"using":["26.14"],"namespace":["26.14"],"movee":["26.14"],"used":["27.0"],"to":["27.0"],"access":["27.0"],"site":["27.0"],"theme":["27.0"],"and":["27.0"],"full":["27.9","46.3"],"list":["27.9","46.3"],"csdn博客":["33.0"],"在markdown中如果写入一个":["33.0"],"export":["34.0"],"获取pathname的路径":["34.0"],"dirpath":["34.0"],"读取pathname下的所有文件或者文件夹":["34.0"],"过滤掉":["34.0"],"modified":["35.0"],"保险":["35.0"],"使用正则表达式替换多个连续的":["35.0"],"chodocs":["36.0"],"cn":["36.0"],"再一次地感受到了什么叫做差距":["37.0"],"有人20分钟写完润了":["37.0"],"https":["38.0"],"然后python爬取制作图片之类等等":["39.0"],"学习一下流程":["39.0"],"wps":["39.0"],"tailwind":["40.0"],"plus":["40.0"],"dist":["40.0"],"index":["40.0"],"element样式与tailwindcss样式互相覆盖":["40.0"],"loginformvue":["44.0"],"built":["46.0"],"file":["46.1"],"algo":["46.1"],"you":["46.1"],"can":["46.1"],"omit":["46.1"],"extension":["46.1"],"block":["46.2"],"output":["46.2"],"username":["52.0"],"layout":["52.0"]},{"0":["4.2","5.2","7.15","12.5","14.7","14.8","14.12","15.7","17.9","17.14","23.5","23.14","23.26"],"1":["3.12","9.2","15.6","22.1","23.10","23.25","26.8","26.12"],"2":["3.2","6.1","8.2","14.9","23.1","23.6","24.0","26.10"],"3":["14.8","15.11","23.6","23.30","24.0"],"4":["5.2"],"5":["23.10"],"9":["15.1"],"10":["14.1","15.1","17.1","26.5"],"32":["2.1"],"109":["24.1"],"325":["3.1"],"5000":["24.0"],"9375":["3.1"],"28178":["3.1","17.10"],"450775":["3.1","17.10"],"9780504":["3.1","17.10"],"10000000":["24.1"],"1795265022":["3.1","17.10"],"cout":["0.2","3.7","7.11","15.5","17.7","23.23","26.14"],"endl":["0.2","3.4","3.7","5.5","9.3","14.4","15.5","23.10","23.23","26.14"],"tmp":["0.2","2.1","4.2","17.7"],"modc":["0.3"],"amodc":["0.3"],"bmodc":["0.3"],"find":["1.1","9.2"],"if":["1.1","9.2","15.17","26.1","26.9","26.10","26.12"],"char":["2.1","3.4","14.4"],"strftime":["2.1"],"sizeof":["2.1"],"newstr2":["2.3"],"str4":["2.3"],"stt":["2.3"],"br":["2.4","6.0"],"radex用于记录迭代到的位数是通过多少个逢几进1过来的":["2.5"],"maxx用来记录最大需要迭代到的位数":["2.5"],"maxx":["2.5"],"radex":["2.5","14.3","17.3"],"for":["3.1","3.2","3.5","4.2","14.7","14.9","15.16","17.9","23.6","23.37","23.41","26.3","27.0"],"v":["3.1","17.10"],"false":["3.2","14.7","14.9","17.9","17.12","26.9"],"原因":["3.3"],"更相减损法的":["3.3"],"直到了":["3.3"],"为最大公约数":["3.3"],"while":["3.4","3.12","7.11","14.4","15.11","23.30","26.1","26.5","26.10","26.11"],"ch":["3.4","14.4"],"size":["3.5","15.10","15.16","23.29","23.37","26.3"],"从left开始":["3.5","15.16","26.3"],"传进来的是l":["3.5","15.16","26.3"],"然后所有的值都排好序放到w数组中":["3.5","15.16","26.3"],"重排了l到r之间元素":["3.5","15.16","26.3"],"sort":["3.5","15.16","22.1","26.3"],"scanf":["3.6","23.21"],"d":["3.6","17.13","23.18"],"continue":["3.6","9.4","17.10","26.10"],"从图中可以看出":["3.6"],"当c1":["3.6"],"c2为同类时":["3.6"],"只可能等于":["3.6"],"所以需要排除两种情况":["3.6"],"push":["3.7","15.5","17.7","23.15","23.23","23.41"],"clear":["3.7","7.17","15.5","23.23"],"每每能够变小的则放入其中":["3.8","15.15","23.36"],"然后因为在小根堆中会进行比较":["3.8","15.15","23.36"],"则最后即使有多个相同节点在堆中也没关系":["3.8","15.15","23.36"],"反正vis后的都会continue":["3.8","15.15","23.36"],"main":["3.8","6.1","15.11","15.12","15.14","15.15","23.30","23.31","23.35","23.36"],"cin":["3.8","6.1","15.11","15.12","15.15","23.30","23.31","23.36"],"bool":["3.9"],"operator":["3.9"],"const":["3.9"],"nextt":["3.9"],"struct":["3.10","23.3"],"node":["3.10","23.3"],"id":["3.10"],"priority":["3.10"],"默认是优先级最高的先输出":["3.10"],"所以在重载小于号后":["3.10"],"如果是id":["3.10"],"other":["3.10"],"对拍主函数":["3.12"],"system":["3.12"],"杭电的题目":["4.0"],"二叉搜索树":["4.0"],"end":["4.0","8.0","9.2","12.3","22.1"],"理解错误":["4.2"],"break":["4.2","6.2","21.2"],"string":["4.2"],"str":["4.2","17.5"],"i":["4.2","12.5","23.6","23.37"],"length":["4.2"],"n":["5.2"],"l":["5.2","26.7"],"ceil":["5.2"],"r":["5.2","26.7"],"printf":["5.4"],"else":["5.4","5.5","6.2","9.4","15.11","23.13","23.30","26.6","26.12"],"cet":["5.4","7.11","14.3","17.3"],"时":["5.5"],"为最小的":["5.5"],"模板":["5.5"],"了":["5.5"],"signed":["6.1"],"x":["6.1","7.6","7.13","17.12"],"y":["6.1","7.6","17.12"],"sum2":["6.1"],"sum":["6.1"],"j":["7.3","17.10","23.31","26.2"],"ab":["7.6"],"cd":["7.6"],"h":["7.11"],"s":["7.11"],"insert":["7.11"],"也是咯":["7.13"],"只有":["7.15"],"牛客训练营补题":["8.0"],"day1":["8.0"],"return":["8.2","14.7","17.9","26.9"],"or":["9.2","46.1"],"and":["9.2"],"小发现":["9.3"],"当不在map里时":["9.3"],"会返回0":["9.3"],"利用这个特性":["9.3"],"动态规划":["10.1"],"排序":["10.1"],"中的新特性":["10.3"],"avail":["11.1"],"函数":["12.1"],"而":["12.1","23.14"],"unordened":["12.1"],"中又正好用":["12.1"],"std":["12.1"],"来计算":["12.1"],"所以当":["12.1"],"作为":["12.1"],"的":["12.1","17.12"],"时会出现编译错误":["12.1"],"问题解决":["12.1"],"我们可以将":["12.1"],"void":["12.2","26.9"],"solve":["12.2","26.9"],"arr":["12.2"],"que":["12.2"],"t":["12.2","26.11"],"去重加排序":["12.3"],"或者说如果没有硬性要求顺序的问题的话":["12.4"],"则可以直接使用set":["12.4"],"两层set":["12.4"],"内部的set用来存x":["12.4"],"nums":["12.4","17.7"],"解释":["12.4"],"tmp3":["12.5","23.5"],"tmp4":["12.5"],"方法三":["14.1","17.1"],"正方形网格有8个方位":["14.1","17.1"],"同上":["14.5","17.6"],"e":["14.5","15.1","17.6","23.45"],"exp":["14.5","17.6"],"rand":["14.8"],"范围为":["14.8"],"now最大值为maxx":["14.8"],"即":["14.11","17.13"],"与":["14.11"],"互素":["14.11"],"因为这样的话即使":["15.1"],"也是能够使用":["15.1"],"然后再相乘的":["15.1"],"性质":["15.1"],"进制是效率最高的进制":["15.1"],"越靠近":["15.1"],"进制效率越高":["15.1"],"所以除":["15.1"],"mystruct":["15.2"],"速度也更快":["15.3"],"update2":["15.4","23.20"],"旧版":["15.4","23.20"],"没有懒标记需要n的时间复杂度":["15.4","23.20"],"下层进入的条件":["15.6","15.12","23.25"],"放入到数组中":["15.8","23.27"],"向后边寻找":["15.8","23.27"],"pop":["15.8","23.27","23.41"],"回溯后恢复":["15.10","23.29"],"exist":["15.10","23.29"],"word":["15.10","23.29"],"正好表示4个方向":["15.11","23.30"],"若为起始或为相同转向则不用step":["15.11","23.30"],"回溯状态恢复":["15.11","23.30"],"aa":["15.12"],"bb":["15.12"],"后边无回溯恢复是":["15.12","23.31"],"只需要所有位置遍历一次":["15.12","23.31"],"而非需要多种不同状态路线":["15.12","23.31"],"核心递推公式":["15.13"],"防止负数":["15.13"],"核心代码":["15.14","23.35"],"表示通过找出度来":["15.14","23.35"],"松弛操作":["15.14","23.35"],"即让临点变小":["15.14","23.35"],"details":["17.4"],"考试速记模板":["17.4"],"index":["17.4"],"tentoindex":["17.4"],"num":["17.4"],"oct":["17.5"],"判断符号是否相同":["17.12"],"issamesign":["17.12"],"有":["17.12"],"的情况例外":["17.12"],"true":["17.12","26.9"],"表示":["17.12"],"有相同的符号":["17.12"],"有相反的符号":["17.12"],"次方":["17.12"],"getfactorialoftwo":["17.12"],"则":["17.13"],"说明还有数没乘":["17.18"],"补上":["17.18"],"w":["20.2","35.0"],"stdout":["20.2"],"putchar":["20.3"],"case":["20.5"],"要把中括号内的东西看成数组的索引":["20.5"],"因为只有两种可能":["20.5"],"索引为":["20.5"],"后将ren":["20.6"],"定义为":["20.6"],"类型":["20.6"],"赋值为":["20.6"],"ren1":["20.6"],"num3":["20.6"],"num4":["20.6"],"若没有":["20.6"],"不能隐式地转化为任意类型的指针":["20.7"],"可以强制转化":["20.7"],"但空指针常数可以隐式地转换为任意类型的指针类型":["20.7"],"总结":["20.7"],"语言中是":["20.7"],"前先设置为":["20.8"],"可能会导致无法释放原来的内存":["20.8"],"出现内存泄漏":["20.8"],"numbers中这并不影响其被定义为一个变量":["20.9"],"不过在调用它的时候便会出现报错":["20.9"],"cnblogs":["21.0"],"mod":["21.1"],"输入最大范围的数":["21.1"],"n1":["21.1"],"n2":["21.1"],"n3":["21.1"],"n4":["21.1"],"使用系统函数来调用编译后的exe文件":["21.2"],"将输出放到":["21.2"],"txt中":["21.2"],"通过":["21.2"],"begin":["22.1"],"at":["23.2"],"one":["23.2"],"position":["23.2"],"line":["23.3"],"numbers":["23.3"],"int":["23.3"],"data":["23.3","27.0"],"若数组未满":["23.4"],"则直接添加":["23.4"],"若满了":["23.4"],"则将复制到新大的内存块":["23.4"],"auto":["23.5"],"之前的值":["23.5"],"将pre移动到m位置":["23.5"],"然后将cur设为pre":["23.5"],"后边操作就和之前一样了":["23.5"],"listnodecur":["23.5"],"交换次数为":["23.5"],"nex":["23.5"],"cur":["23.5"],"用于迭代":["23.5"],"new了一个新head在原head前":["23.5"],"这样即使反转中包含到head节点":["23.5"],"也无所谓":["23.5"],"蒟蒻版本":["23.5"],"无":["23.5"],"listnodetmp1":["23.5"],"将情况分成两种":["23.5"],"一是m起始为1时":["23.5"],"即没有第m":["23.5"],"1节点了":["23.5"],"二是m起始点不为1时":["23.5"],"这样记录下第m":["23.5"],"1节点":["23.5"],"在反转后将其的next指向反转前的第n节点":["23.5"],"listnodetmp4":["23.6"],"curr2":["23.6"],"tmp5":["23.6"],"listnodetmp2":["23.6"],"个元素下标":["23.7"],"但链表只有":["23.7"],"ctrl":["23.8"],"使用循环数组的概念来实现":["23.9"],"text":["23.10"],"输入值":["23.10"],"输出结果为":["23.10"],"保证密度最大":["23.11"],"对于":["23.11"],"每个":["23.11"],"节点的左右子树的高度的差值不大于":["23.11"],"k":["23.11"],"一般为":["23.11"],"diff":["23.11"],"sqrt":["23.11"],"righth":["23.11"],"lefth":["23.11"],"线索二叉树":["23.11"],"threaded":["23.11"],"binary":["23.11"],"tree":["23.11"],"对于那些节点的左指针为空":["23.11"],"使其指回到前驱的节点":["23.11"],"right":["23.13","26.8"],"表示该二叉搜索树没有重复的值":["23.14"],"表示能有重复的值":["23.14"],"工具函数":["23.14"],"传入左右能够取值的范围":["23.14"],"思路二":["23.14"],"通过中序遍历的方法":["23.14"],"如果遍历出来的数列是递增的":["23.14"],"说明是二叉搜索树":["23.14"],"或直接通过状态维护":["23.14"],"保证每个遍历到的数都要比前一个数不小":["23.14"],"not":["23.14"],"less":["23.14"],"than":["23.14"],"before":["23.14"],"global":["23.14"],"flag":["23.14"],"treeutil":["23.14"],"isbinarytree4":["23.14"],"通过中序遍历判断二叉搜索树":["23.14"],"nullptr":["23.15"],"推出b":["23.18"],"count":["23.19"],"ans":["23.19","23.24","26.1","26.5"],"wrong":["23.21"],"cstdio":["23.21"],"2e5":["23.21"],"eof":["23.21"],"在多组数据时初始化":["23.21"],"a":["23.21"],"b":["23.21"],"b时就没有边了":["23.21"],"bug":["23.21"],"is":["23.21"],"homo":["23.21"],"2e3":["23.21"],"timee":["23.24"],"输出全排列":["23.24"],"之后将ord":["23.24"],"的值代入到arr中用于全排列":["23.24"],"关系网":["23.32"],"的空间复杂度过于浪费":["23.33"],"o":["23.34"],"之后一直遍历到二叉树的根节点":["23.37"],"fuction":["23.40"],"queue":["23.41"],"pq":["23.41"],"new":["23.41"],"top":["23.41"],"noderight":["23.41"],"parent":["23.41"],"在上述代码中":["23.41"],"优先队列":["23.41"],"中的比较函数使用了自定义的":["23.41"],"用于实现小根堆的功能":["23.41"],"邻接多重表法":["23.43"],"快排空间复杂度为特殊":["23.43"],"log2n":["23.43"],"使用了递归":["23.43"],"aov":["23.43"],"概念":["23.43"],"element":["23.44"],"分支总数":["23.45"],"10000000n":["24.1"],"线性筛素数":["24.1"],"109n":["24.1"],"num2":["25.0","26.1"],"modd":["26.1"],"遇到1乘入":["26.1"],"子段":["26.2"],"一直":["26.2"],"swap":["26.4"],"最终将基准数归位":["26.4"],"mid":["26.5"],"则左半边必然无法得到更大的":["26.6"],"取值过大":["26.6"],"需要将右半边删除":["26.6"],"left":["26.8"],"read":["26.9"],"fixed":["26.10"],"setprecision":["26.10"],"若内部有值":["26.10"],"则肯定能够通过二分找到":["26.10"],"back":["26.12","34.0"],"source":["26.14"],"target":["26.14"],"hanoi":["26.14"],"temp":["26.14"],"递归函数定义":["26.14"],"current":["27.0"],"of":["27.9","46.3"],"set":["33.0"],"但没有使用反引号":["33.0"],"函数后面会讲到":["34.0"],"然后再到":["34.0"],"config":["34.0"],"mts":["34.0"],"中设置侧边栏内容":["34.0"],"ts":["34.0"],"home":["34.0"],"go":["34.0"],"page":["34.0"],"daily":["34.0"],"notes":["34.0"],"算法笔记":["34.0"],"algorithm":["34.0"],"填入算法笔记的路径":["34.0"],"sub":["35.0"],"program":["36.0"],"vitepress":["36.0"],"有人还在被题卡一个多小时":["37.0"],"juejin":["38.0"],"cn":["38.0"],"ai":["39.0"],"chatgpt":["39.0"],"danger":["40.0"],"坑点":["40.0"],"但在执行npm":["40.0"],"run":["40.0"],"docs":["40.0"],"build的时候会出现了一个报错":["40.0"],"typeerror":["40.0"],"unknown":["40.0"],"file":["40.0"],"logindialogvue":["44.0"],"extensions":["46.0"],"append":["46.1"],"my":["46.1"],"compact":["52.0"],"theme":["52.0"],"tokyonight":["52.0"]},{"0":["7.6","7.10","11.1","15.1"],"1":["7.15"],"2":["2.3","2.5","3.5","3.11","5.2","15.13","15.16","23.10","26.3"],"3":["3.11","6.1","15.1","23.10","23.32"],"4":["23.6","23.10","23.32","26.10","46.1"],"5":["14.11","17.13"],"9":["17.4"],"10":["12.2","52.0"],"20":["17.10"],"25":["24.0"],"35":["14.3","17.3"],"48":["3.11"],"100":["17.12"],"120":["20.6"],"200":["26.7"],"300":["24.0"],"1018":["24.1"],"1111":["17.12"],"101000":["24.1"],"优点":["0.2"],"时间复杂度极低":["0.2"],"while":["0.3","5.5","12.5","26.8","26.9"],"sort后":["0.3"],"n从小到大":["0.3"],"for也从小到大":["0.3"],"前缀和":["0.6"],"else":["1.1","2.5","9.1","9.3","14.13","15.4","15.17","17.15","23.5","23.20","26.7","26.10"],"br":["2.0"],"m":["2.1"],"s":["2.1"],"string":["2.1","6.1"],"date":["2.1"],"pos":["2.3"],"找同数位上的a":["2.5"],"b中最大":["2.5"],"然后贪心求出尽可能小的进制":["2.5"],"在2到n进制中":["2.5"],"最小进制":["2.5"],"最大数":["2.5"],"continue":["3.1"],"j":["3.1","4.2","15.11","15.12","23.30"],"push":["3.2","14.9","26.12"],"back":["3.2","3.8","14.9","15.15","23.36"],"size":["3.2","14.9"],"模板":["3.3"],"line":["3.3","23.11"],"numbers":["3.3","23.11"],"直接手写一个gcd":["3.3"],"ll":["3.3"],"return":["3.3","3.5","3.9","15.16","17.18","26.1","26.3","46.1"],"bug":["3.5","15.16","26.3"],"原因是因为当size":["3.5","15.16","26.3"],"5时":["3.5","15.16","26.3"],"因为为c1":["3.6"],"c1吃c2":["3.6"],"和c1为同类的是c1":["3.6"],"所以要排除":["3.6"],"if":["3.9","3.12","14.3","17.3","23.15","23.24","26.5"],"会以从小到大输出":["3.10"],"一般的其他自定义比较函数都是当":["3.10"],"时":["3.10","12.1"],"按大到小输出排序":["3.10"],"优先队列较为特殊":["3.10"],"bool":["3.10","20.6"],"operator":["3.10"],"const":["3.10"],"等价于":["3.11"],"data":["3.12","23.2","23.11","46.1"],"exe":["3.12"],"brute":["3.12"],"correct":["3.12"],"fc":["3.12"],"yes":["3.12"],"endl":["3.12","4.2","7.11","9.4","22.1"],"cout":["4.2","6.2","7.6","9.2","9.4","12.5","14.5","17.6","22.1","23.40"],"no":["4.2"],"floor":["5.2","23.41"],"f":["5.2"],"for":["5.2","40.0"],"i":["5.2","14.7","17.9","23.4"],"modd":["5.4"],"所以设为边界":["5.5"],"printf":["5.5","20.3"],"d":["5.5","17.18","40.0"],"toc":["6.0"],"assign":["6.1"],"begin":["6.1","12.2"],"end":["6.1"],"相当于":["6.1"],"里的":["6.1"],"乘法取":["7.6"],"mod":["7.6"],"modc":["7.6"],"amodc":["7.6"],"bmodc":["7.6","26.1"],"都等于":["7.10"],"n":["7.11","8.2"],"cin":["7.11","8.2","14.5","15.8","15.14","17.6","17.11","23.18","23.27","23.35"],"tmp":["7.11","14.8","15.11","23.17","23.30"],"而后会自动忽略掉两个字符串中间的所有空格":["7.13"],"和":["7.15"],"只改变了当前状态":["7.17"],"不清空":["7.17"],"main":["8.2","9.1","14.5","15.8","17.6","17.11","17.18","23.27"],"pair":["9.1"],"如果在朋友圈找不到":["9.2"],"或只有一个人":["9.2"],"并且没有查询过":["9.2"],"pta的输出格式啦":["9.2"],"输出且标记已找到":["9.2"],"erase":["9.3"],"当前面用了ren":["9.3"],"会将这个键值对自动插入":["9.3"],"需删除":["9.3"],"break":["9.4","17.10","23.24"],"时间复杂度":["10.1"],"高精度算法":["10.3"],"捕获变量都是值传递":["11.2"],"为":["11.2","20.5"],"不能对值修改":["11.2"],"否则会报错":["11.2"],"error":["11.2"],"increment":["11.2"],"of":["11.2"],"read":["11.2"],"only":["11.2"],"variable":["11.2"],"则可以加上":["11.2"],"mutable":["11.2"],"换成":["12.1"],"因为":["12.1","20.9"],"是通过操作符":["12.1"],"来比较":["12.1"],"的大小":["12.1"],"是可以比较大小的":["12.1"],"所以":["12.1"],"当我们需要使用":["12.1"],"类型作为":["12.1"],"可以使用":["12.1"],"nums3":["12.3"],"容器内部使用红黑树实现":["12.4"],"红黑树是一种自平衡的二叉搜索树":["12.4"],"它要求节点之间必须满足一定的顺序关系":["12.4"],"否则会影响查找":["12.4"],"插入":["12.4"],"删除等操作的正确性和效率":["12.4"],"对于":["12.4"],"值相同":["12.4"],"empty":["12.5"],"num2":["14.5","17.6"],"fixed":["14.5","17.6"],"setprecision":["14.5","17.6"],"lnx":["14.6","17.8"],"实际还需要更大点所以设多一位就好":["14.6","17.8"],"这个定理很重要":["14.11","17.13"],"cb":["14.11","17.13"],"gcd":["14.14","17.16"],"外":["15.1"],"都是小的进制更优":["15.1"],"应该是有曲线的":["15.1"],"使用前缀和和差分来求区间和":["15.1"],"解决超时问题":["15.1"],"upper":["15.1"],"bound":["15.1"],"start":["15.1"],"last":["15.1"],"key":["15.1"],"from":["15.1"],"cmp":["15.2"],"p1":["15.2"],"p2":["15.2"],"在解决一些单点修改的问题时":["15.3"],"树状数组是不二之选":["15.3"],"查询一个区间内的和":["15.4","23.20"],"query":["15.4","23.20"],"2logn":["15.4","23.20"],"回溯就要将值恢复到原来的状态":["15.8","23.27"],"状态指的是全局而非各个元素":["15.8","23.27"],"num":["15.8","23.27"],"清空":["15.11","23.30"],"maxx":["15.13"],"0xc0c0c0c0":["15.13"],"int类较小值":["15.13"],"a":["15.14","23.24","23.35"],"b":["15.14","17.11","23.35"],"indextoten":["17.4"],"dec":["17.5"],"从低位到高位拿每一个位的数":["17.7"],"出现一个n":["17.10"],"后面都是1":["17.10"],"直接跳出":["17.10"],"这里代表前面没有出现n":["17.10"],"1这个解":["17.10"],"二次检验失败":["17.10"],"fermat检验":["17.10"],"img":["17.10"],"class":["17.10"],"math":["17.10","23.41"],"block":["17.10"],"src":["17.10"],"https":["17.10"],"jianshu":["17.10"],"com":["17.10","21.0"],"formula":["17.10"],"5cpi":["17.10"],"5capprox":["17.10"],"5cfrac":["17.10"],"判断一个数是不是":["17.12"],"的幂":["17.12"],"isfactorialoftwo":["17.12"],"如果是":["17.12"],"一定是":["17.12"],"就是":["17.12"],"所以做与运算结果为":["17.12"],"对":["17.12"],"次方取余":["17.12"],"quyu":["17.12"],"的次方":["17.12"],"与":["17.13"],"互素":["17.13"],"scanf":["17.18"],"getchar":["17.18"],"dword":["17.18"],"starttime":["17.18"],"gettickcount":["17.18"],"endtime":["17.18"],"zu":["17.18"],"输出重定向":["20.2"],"输出数据将保存out":["20.2"],"txt文件中":["20.2"],"一般情况下":["20.3"],"使用":["20.3"],"ios":["20.3"],"sync":["20.3"],"with":["20.3"],"stdio":["20.3"],"false":["20.3","34.0"],"tie":["20.3"],"nullptr":["20.3"],"也是可以的":["20.3"],"但不能够使用":["20.3"],"h":["20.3"],"库中的":["20.3"],"时则为他自己本身":["20.5"],"赋值时则需要":["20.6"],"sex":["20.6"],"char":["20.6","23.11"],"numbers中却是":["20.7"],"这是因为在":["20.7"],"numbers中":["20.7"],"类型是不允许隐式转换成其他指针类型的":["20.7"],"所以之前":["20.7"],"numbers中用":["20.7"],"即使是在外部函数中动态分配的内存也需要":["20.8"],"当函数执行完毕后":["20.8"],"函数栈上的局部变量和对象都会被自动销毁":["20.8"],"但是在堆上分配的动态内存不会被自动销毁":["20.8"],"存在多个指向":["20.9"],"但不将其放在":["20.9"],"ans":["21.1","26.9","26.11"],"test1":["21.2"],"test2":["21.2"],"大数排序问题转化为字符串":["22.1"],"通过具体实现来研究":["23.1"],"代码":["23.1"],"specify":["23.2"],"next":["23.3"],"遍历方法":["23.3"],"从第一个开始找":["23.3"],"插入方法":["23.3"],"创建新的节点":["23.3"],"从头遍历到尾部后添加":["23.4"],"at":["23.4"],"the":["23.4"],"sup":["23.4"],"th":["23.4"],"position":["23.4"],"记录第m":["23.5"],"tmp1为第m节点":["23.5"],"cur为m位置上的值":["23.5"],"pre为m":["23.5"],"1位置":["23.5"],"反转中m":["23.5"],"n的值":["23.5"],"next用于记录cur下一个要遍历节点":["23.5"],"当前节点则指向上一个":["23.5"],"记录pre节点为当前cur":["23.5"],"用于下一个循环中":["23.5"],"cur到下一个节点":["23.5"],"反转后":["23.5"],"第m节点指向到cur":["23.5"],"此时为n":["23.5"],"tmp2为第m":["23.5"],"pre由上边的while循环遍历到了第n节点":["23.5"],"而后将tmp2指向pre":["23.5"],"使其链接会链表":["23.5"],"由于m":["23.5"],"说明头节点也会被移动":["23.5"],"此时的头在第n节点":["23.5"],"原头节点tmp1指向cur":["23.5"],"每":["23.5"],"k":["23.5","23.6","23.17"],"个节点反转链表":["23.5"],"reversekgroup":["23.5"],"listnodehead":["23.5"],"listnodeneww":["23.5"],"设定一个头节点":["23.5"],"方便":["23.5"],"tmp4":["23.6"],"求倒数的第":["23.6"],"个节点":["23.6"],"若":["23.6"],"链表长":["23.6"],"或":["23.6"],"链表为空":["23.6"],"则返回空指针":["23.6"],"findkthtotail":["23.6"],"ite":["23.7"],"没有对于":["23.7"],"z":["23.8"],"的实现":["23.8"],"并且使用两个光标来标识队头与队尾":["23.9"],"图例":["23.9"],"对于那些节点的右指针为空":["23.11"],"使其指向后继的节点":["23.11"],"树状数组":["23.11"],"fenwick":["23.11"],"线段树":["23.11"],"segment":["23.11"],"二叉树的存储":["23.11"],"使用指针":["23.11"],"类似链表":["23.11"],"struct":["23.11"],"node":["23.11","40.0"],"1个字节":["23.11"],"判断满二叉树":["23.13"],"isfulltree":["23.13"],"二叉搜索树删除节点":["23.14"],"利用二叉搜索树的特性":["23.14"],"左子树的所有值都比父节点小或等于":["23.14"],"右子树的所有值都比父节点大":["23.14"],"同时每个节点会有三种情况":["23.14"],"delete":["23.14"],"为叶子节点":["23.14"],"无左子树":["23.14"],"nodetmp":["23.14"],"无右子树":["23.14"],"left":["23.15"],"top":["23.15"],"l":["23.18","26.9","26.11"],"get":["23.19"],"rootx":["23.21"],"rooty":["23.21"],"scenario":["23.21"],"suspicious":["23.21"],"bugs":["23.21"],"found":["23.21"],"使用扩展域的并查集":["23.21"],"反集":["23.21"],"即扩展域":["23.21"],"在实现并查集时":["23.21"],"通常需要使用一个数组来存储每个元素所属的集合":["23.21"],"数组的下标表示元素的编号":["23.21"],"数组的值表示元素所属集合的编号":["23.21"],"在将并查集转换为反集时":["23.21"],"需要将每个元素拆分成一个单独的集合":["23.21"],"从而得到一个更大的集合系统":["23.21"],"为了实现这个操作":["23.21"],"可以将原先的数组大小扩大":["23.21"],"倍":["23.21"],"即为每个元素分配一个新的位置":["23.21"],"从而实现将每个元素拆分成一个单独的集合的目的":["23.21"],"扩大数组大小后":["23.21"],"原先的集合编号也需要进行相应的调整":["23.21"],"即将每个元素所属的集合编号也扩大":["23.21"],"以保证反集的正确性":["23.21"],"例题链接":["23.21"],"团伙":["23.21"],"set":["23.21"],"nums":["23.21"],"arr":["23.24"],"x":["23.24"],"t":["23.24"],"and":["23.31"],"加权图":["23.32"],"加权为条边的权重不一样":["23.32"],"交通线路":["23.32"],"稀疏因子":["23.33"],"非零":["23.33"],"logn":["23.34","24.1"],"通过二叉搜索树来优化":["23.34"],"边界":["23.37"],"1表示能够取到的最大下标":["23.37"],"heapsort":["23.37"],"优点在于最后能够输出递增序列":["23.37"],"double":["23.40"],"权值小的节点排在队列前面":["23.41"],"即优先级更高":["23.41"],"这样每次从队列中选取的两个节点的权值就是最小的":["23.41"],"每次从优先队列中取出两个权值最小的节点进行合并":["23.41"],"生成新的父节点":["23.41"],"并将其插入到优先队列中":["23.41"],"直到只剩下一棵树为止":["23.41"],"循环队列":["23.41"],"maxsize":["23.41"],"在循环队列的实现中":["23.41"],"为了避免队列满和队列空状态的判断出现歧义":["23.41"],"通常会牺牲一个数组元素的空间作为约定":["23.41"],"也就是说数组的大小为":["23.41"],"是用户希望队列可以容纳的元素数量":["23.41"],"这个约定是基于队列操作的实现原理":["23.41"],"比如入队和出队的下标变化规律":["23.41"],"初":["23.41"],"始化时已经将":["23.41"],"设置为了":["23.41"],"也就是":["23.41"],"由于约定牺牲了一个元素的空间":["23.41"],"因此队列中最多可以容纳":["23.41"],"个元素":["23.41"],"rear":["23.41"],"指针指向队尾元素的下一个位置":["23.41"],"堆排序":["23.41"],"创建堆":["23.41"],"将序列转化为一个完全二叉树":["23.41"],"然后将第":["23.41"],"个元素开始进行判断其的子节点是否符合大根或小根堆":["23.41"],"然后一直到子节点的子节点都要符合并调整":["23.41"],"有向图只有一个边":["23.43"],"不能出现有向环":["23.43"],"表示":["23.43"],"vi":["23.43"],"vj":["23.43"],"来按照列和行号来进行升序的排列":["23.44"],"n1":["23.45"],"2n2":["23.45"],"判断质数":["24.1"],"1018n":["24.1"],"最大公约数":["24.1"],"快速幂":["24.1"],"数位":["24.1"],"101000n":["24.1"],"遇到0就跳过":["26.1"],"题目中出现":["26.1"],"例题":["26.1"],"raising":["26.1"],"modulo":["26.1"],"第一趟把基准数放到中间后":["26.4"],"分左右两边依此快排":["26.4"],"二分查找一般不需要":["26.5"],"原因是二分查找找的是下标":["26.5"],"数组基本开不到1e9":["26.5"],"判断":["26.6"],"r是否找到":["26.6"],"并且求出所有有效区间中最大":["26.6"],"条件为输出i小的":["26.6"],"只要i从小遍历":["26.6"],"必然先找到i小":["26.6"],"mid":["26.8","26.10","26.11"],"之所以能够log级别":["26.8"],"是因为每次都排除了一半的可能的数":["26.8"],"即如果在mid的条件下删除都不可能成功":["26.8"],"那那些大于mid就更不用考虑了":["26.8"],"但又是要求最短中的最大":["26.8"],"1e6":["26.9"],"r":["26.9","26.11"],"eps":["26.9"],"abs":["26.10"],"1e10":["26.11"],"pop":["26.12"],"基本情况处理":["26.14"],"递归调用":["26.14"],"超级操作":["26.14"],"微操作":["26.14"],"it":["27.0"],"works":["27.0"],"in":["27.0"],"both":["27.0"],"md":["27.0"],"runtime":["27.9"],"apis":["27.9"],"则会报错":["33.0"],"说是没有结束标签":["33.0"],"按照降序的顺序":["34.0"],"依次输出":["34.0"],"使用场景":["34.0"],"日志记录从最近开始":["34.0"],"sidebar优化":["34.0"],"isgreater":["34.0"],"console":["34.0"],"write":["35.0"],"获取当前文件的绝对路径":["35.0"],"current":["35.0"],"abspath":["35.0"],"获取当前文件的父目录路径":["35.0"],"parent":["35.0"],"dirname":["35.0"],"指定相对路径srcdir":["35.0"],"local":["36.0"],"search":["36.0"],"剩下的就是等待蓝桥杯排名":["37.0"],"post":["38.0"],"mindshow":["39.0"],"做ppt等":["39.0"],"copilot开梯子能使用":["39.0"],"extension":["40.0"],"vitepress":["40.0"],"modules":["40.0"],"theme":["40.0"],"provided":["46.0"],"by":["46.0"],"github":["46.1"],"account":["46.1"],"input":["46.1"],"js":["46.1"],"export":["46.1"],"default":["46.1"],"msg":["46.1"],"highlighted":["46.1"],"markdown":["46.3"],"extensions":["46.3"],"langs":["52.0"],"count":["52.0"]},{"0":["2.1"],"1":["26.4","34.0"],"2":["7.6","17.7","23.19","24.1","26.7"],"3":["3.5","15.16","17.7","23.21","26.3","26.10"],"4":["3.5","15.16","26.3"],"5":["15.14","17.10","17.11","23.35","23.41"],"6":["12.2","17.10"],"8":["12.2","23.11"],"11":["24.0"],"13":["12.2"],"17":["17.10"],"64":["26.1"],"1000":["26.9"],"9999999":["17.11"],"10100000":["24.1"],"最差也就o":["0.2"],"缺点":["0.2"],"sup":["0.2"],"的概率失败":["0.2"],"码量大":["0.2"],"得自己写一个快速幂fpow":["0.2"],"为询问时的顺序":["0.3"],"cout":["0.3","1.1","2.1","2.5","3.6","3.8","7.3","8.2","15.11","15.12","15.13","15.14","15.15","17.5","17.11","23.17","23.30","23.31","23.35","23.36","26.6","26.7","26.8","26.9","26.12"],"优点":["0.3","0.6"],"空间换时间":["0.3","0.6"],"return":["1.1","2.1","2.3","3.4","3.7","3.8","3.10","3.11","5.4","5.5","6.2","7.3","7.11","9.1","9.3","9.4","12.5","14.4","14.10","14.13","15.5","15.13","15.14","15.15","17.15","23.17","23.23","23.35","23.36","25.0"],"find":["2.3","23.14"],"first":["2.3","9.1"],"not":["2.3"],"of":["2.3","23.21"],"substr":["2.3"],"每个数位上的":["2.5"],"是不变的":["2.5"],"radex变":["2.5"],"主要是radex小就好了":["2.5"],"endl":["2.5","3.6","3.8","6.2","12.5","14.5","15.11","15.12","15.13","15.14","15.15","17.5","17.6","17.11","23.17","23.30","23.31","23.35","23.36","26.6","26.7","26.9","26.11","26.12"],"break":["3.1","3.12","5.2","23.5","26.10"],"出现一个n":["3.1"],"后面都是1":["3.1"],"直接跳出":["3.1"],"这里代表前面没有出现n":["3.1"],"1这个解":["3.1"],"二次检验失败":["3.1"],"fermat检验":["3.1"],"使用stl库内的方法":["3.3"],"所以如果是":["3.5","15.16","26.3"],"则":["3.5","15.16","26.3"],"导致下标为2的元素不被考虑到":["3.5","15.16","26.3"],"求最大值":["3.7","15.5","23.23"],"找到一个大于新来元素":["3.7","15.5","23.23"],"无向图":["3.8","15.15","23.36"],"边":["3.8","15.15","23.36","23.41"],"想想也是":["3.8","15.15","23.36"],"毕竟如果存在一条回路":["3.8","15.15","23.36"],"即使这样也会被当作是从源到终点":["3.8","15.15","23.36"],"queue":["3.10"],"nums":["3.10"],"使用系统函数来调用编译后的":["3.12"],"文件":["3.12"],"将输出放到":["3.12"],"中":["3.12"],"通过":["3.12"],"test1":["3.12"],"test2":["3.12"],"进行对比":["3.12","21.2"],"有差异则会输出":["3.12","21.2"],"yes":["4.2","15.11","23.30"],"清空根指针":["4.2"],"if":["5.2","7.3","23.17","26.11"],"gcd":["5.2"],"else":["6.1","7.3","26.5","26.9","26.11"],"标数法":["6.1"],"分有无障碍物的两种":["6.1"],"句子结尾则输出该句子中的所有名字":["6.2"],"跳出循环":["6.2"],"否则":["6.2"],"继续输入单词":["6.2"],"但指数不能够先取模":["7.6"],"所以":["7.6","26.2"],"错误的":["7.6"],"count":["7.11"],"qian":["7.11"],"kun":["7.11"],"即存在和不存在":["7.15"],"算是归并排序的模板题":["8.2"],"比赛时候被卡运行时间":["8.2"],"结果是发现归并排序的最优和最坏都是":["8.2"],"nlogn":["8.2"],"sand":["9.1"],"cin":["9.1","26.14"],"second":["9.1"],"把找过的放进set中去重":["9.2"],"都有朋友了":["9.2"],"no":["9.2","9.3","15.11","23.30"],"one":["9.2","9.3"],"is":["9.2","9.3"],"handsome":["9.2"],"去重操作":["9.3"],"即改成有朋友的":["9.3"],"当需要使用三元组来作为下标时":["12.1"],"无法使用":["12.1"],"且":["12.1"],"在":["12.1","17.12"],"中无法使用":["12.1"],"num":["12.1"],"k后的元素就没有排了":["12.2"],"回来等同于unique":["12.3"],"值不同":["12.4"],"它们放在同一个节点上":["12.4"],"会破坏红黑树的平衡性":["12.4"],"导致查找操作出现问题":["12.4"],"而对于":["12.4"],"每个":["12.4"],"被视为一个独立的元素":["12.4"],"它们之间不存在任何顺序关系":["12.4"],"因此不会出现上述问题":["12.4"],"pop":["12.5","23.15"],"printf":["14.5","17.6","26.10"],"f":["14.5","17.6"],"两种设置精度的方法":["14.5","17.6"],"true":["14.7","17.9"],"原因":["14.11","17.13"],"更相减损法的":["14.11","17.13"],"直到了":["14.11","17.13"],"为最大公约数":["14.11","17.13"],"to":["15.1"],"表示一个最后的位置能够将":["15.1"],"插前面而不改变数组顺序":["15.1"],"c":["15.1"],"line":["15.1"],"numbers库写的注释":["15.1"],"lower":["15.1"],"类型定义":["15.2"],"类似update操作":["15.4","23.20"],"递归到的tree是完全被查询x":["15.4","23.20"],"y覆盖":["15.4","23.20"],"直接返回":["15.4","23.20"],"先将懒标记用于左右子节点":["15.4","23.20"],"然后再query查询":["15.4","23.20"],"和左子树有重叠":["15.4","23.20"],"则进入":["15.4","23.20"],"和右子树有重叠":["15.4","23.20"],"j":["15.10","23.29"],"br":["15.10","20.2","23.29"],"起点和终点相同但不为0":["15.11","23.30"],"清空数组":["15.11","23.30"],"and":["15.12"],"查找到每个岛屿中第一个连接块":["15.12","23.31"],"若没有被淹没则":["15.12","23.31"],"push":["15.14","23.35"],"back":["15.14","23.35"],"通过题意来判断":["15.17","26.5"],"和":["15.17","26.5"],"的条件":["15.17","26.5"],"每拿掉最后一位":["17.7"],"就删除掉它":["17.7"],"7bx":["17.10"],"7d":["17.10"],"7b":["17.10"],"5cln":["17.10"],"20x":["17.10"],"alt":["17.10"],"pi":["17.10"],"approx":["17.10"],"frac":["17.10"],"ln":["17.10"],"mathimg":["17.10"],"表示":["17.10"],"范围内素数的个数总和":["17.10"],"1e8":["17.10"],"的数种":["17.10"],"有":["17.10"],"42868e":["17.10"],"06":["17.10"],"左右的素数":["17.10"],"但实际上有":["17.10"],"的比值的误差":["17.10"],"所以数组尽量开大":["17.10"],"而":["17.10"],"256mb":["17.10"],"限制下的":["17.10"],"数组最大可以开到":["17.10"],"4e7":["17.10"],"所以能够使用":["17.10"],"再加上判断回文数的时间已经很紧了":["17.11"],"得进行数学判断来优化":["17.11"],"所以做与运算结果保留":["17.12"],"范围的非":["17.12"],"的位":["17.12"],"求两个整数的平均值":["17.12"],"getaverage":["17.12"],"遍历一个集合的子集":["17.12"],"do":["17.12"],"process":["17.12"],"subset":["17.12"],"打印输出结果":["17.18"],"08zu":["17.18"],"cost":["17.18"],"ms":["17.18"],"free":["17.18"],"案例":["20.3"],"使用上边手写快读后":["20.3"],"若加上":["20.3"],"会导致":["20.3"],"出错":["20.3"],"所以将":["20.3"],"函数中的":["20.3"],"改为":["20.3"],"get":["20.3"],"解释链接":["20.3"],"则为类似于数组越界":["20.5"],"stupidsheep":["20.6"],"可集体赋值":["20.6"],"stu1":["20.6"],"stu2":["20.6"],"此时stu1":["20.6"],"为该类型的变量":["20.6"],"而后就无法再定义该类型的新变量":["20.6"],"来代表空指针":["20.7"],"但是":["20.7"],"在重载整型和指针的情况下":["20.7"],"会出现匹配错误的情况":["20.7"],"numbers11":["20.7"],"加入了":["20.7"],"nullptr":["20.7"],"可以保证在任何情况下都代表空指针":["20.7"],"需要手动调用":["20.8"],"运算符来释放":["20.8"],"global":["20.9"],"区当做全局变量就不会出该错误":["20.9"],"reason":["20.9"],"然后":["22.1"],"中添加":["22.1"],"函数":["22.1"],"先比较长短":["22.1"],"防止字典序排序问题":["22.1"],"使用":["22.1"],"输出输入时的顺序":["22.1"],"type":["23.2"],"让前一个节点指向新节点":["23.3"],"让新节点指向后一个节点":["23.3"],"004":["23.3"],"平均复杂度为":["23.4"],"实现的难易程度":["23.4"],"优于":["23.4"],"pree":["23.5"],"用于判断能够反转多少次":["23.5"],"记录前一个节点":["23.5"],"下一个节点":["23.5"],"当前节点":["23.5"],"用于反转后的链接":["23.5"],"cet":["23.5"],"设为1":["23.5"],"原因是在size":["23.5"],"k时":["23.5"],"null能够进入循环":["23.5"],"tmp1到nullptr说明已经是最后一组k倍数了":["23.5"],"tmp1到nullptr时可能是最后一组所以得特判":["23.5"],"listnodephead":["23.6"],"p":["23.6","23.24"],"phead":["23.6"],"q":["23.6"],"快慢指针":["23.6"],"时":["23.6"],"p与q指向相同位置":["23.6"],"最后q和p都为null":["23.6"],"的重载运算符":["23.7"],"指令":["23.10"],"code":["23.10"],"底层的机械语言":["23.10"],"不是很懂":["23.10"],"left":["23.11"],"8字节":["23.11"],"noderight":["23.11"],"node结构体为24字节":["23.11"],"原因是内存空间都定为":["23.11"],"字节":["23.11"],"能够方便指针迭代":["23.11"],"使用数组实现完全二叉树":["23.11"],"模拟链表存储":["23.11"],"数组":["23.11"],"right":["23.11","23.15"],"模拟链表":["23.11"],"节点的度为2":["23.14"],"找右边的最小":["23.14"],"也一定大于左子树的所有节点":["23.14"],"或者是找左子树的最大":["23.14"],"不改变右子树的节点情况":["23.14"],"查找中序遍历中的后继节点":["23.14"],"getsuccessor":["23.14"],"current":["23.14"],"nodesuccessor":["23.14"],"ancestor":["23.14"],"successor":["23.14"],"data":["23.15"],"y":["23.19","23.24"],"区间修改和区间查询":["23.19"],"e":["23.21"],"食物链":["23.21"],"chain":["23.21"],"food":["23.21"],"扩展域":["23.21"],"5e4":["23.21"],"k":["23.21","24.1"],"c1":["23.21"],"c2":["23.21"],"continue":["23.21"],"从图中可以看出":["23.21"],"当c1":["23.21"],"c2为同类时":["23.21"],"只可能等于":["23.21"],"所以需要排除两种情况":["23.21"],"因为为c1":["23.21"],"c1吃c2":["23.21"],"和c1为同类的是c1":["23.21"],"所以要排除":["23.21"],"b":["23.24","26.14","34.0"],"maxx":["23.24"],"bfs":["23.31"],"广搜":["23.31"],"通过层级树来理解":["23.31"],"迷宫问题":["23.31"],"无加权图":["23.32"],"可视为每条边的权重都是":["23.32"],"总数":["23.33"],"1表示原数组中最后一个节点被用来存储排好序的元素":["23.37"],"为函数运行时间":["23.40"],"输出增减排序":["23.41"],"将堆的根节点输出后":["23.41"],"将堆的最后的子节点即数组的末尾移动到根节点":["23.41"],"然后从上往下进行调整":["23.41"],"直到所有节点都输出":["23.41"],"插入节点":["23.41"],"在数组的末尾插入节点后":["23.41"],"同":["23.41"],"一样":["23.41"],"检查其的父节点是否符合":["23.41"],"从下到上进行调整":["23.41"],"图论":["23.41"],"最少需要多少边能连通":["23.41"],"简单完全图":["23.41"],"任意两个顶点之间都存在边":["23.41"],"对于无向图":["23.41"],"nx":["23.41"],"对于有向图":["23.41"],"子图":["23.41"],"个顶点":["23.41"],"边也是子集":["23.41"],"连通图":["23.41"],"任意两个顶点连通":["23.41"],"能够":["23.41"],"走到":["23.41"],"极小连通子图":["23.41"],"边数最小且联通图":["23.41"],"生成树":["23.41"],"包含图中所有顶点的一个极小连通子图":["23.41"],"数为":["23.41"],"为顶点数":["23.41"],"的先后关系":["23.43"],"引用和指针传参数":["23.43"],"都会修改掉传入的实参的值":["23.43"],"表尾是由除了表头以外的其余元素组成的一个广义表":["23.43"],"以上范围仅供参考":["24.0"],"实际中还要考虑每种算法的常数":["24.0"],"高精度加减乘除":["24.1"],"10100000n":["24.1"],"logk":["24.1"],"loglogk":["24.1"],"表示位数":["24.1"],"高精度加减":["24.1"],"fft":["24.1"],"ntt":["24.1"],"0x01":["26.1"],"基本算法":["26.1"],"位运算":["26.1"],"nowcoder":["26.1"],"com":["26.1"],"位整数乘法":["26.1"],"分治思想":["26.1"],"分解":["26.1"],"解决":["26.1"],"合并":["26.1"],"都是从mid开始的前后缀和":["26.2"],"求出三段的最大值":["26.2"],"继续处理左边的":["26.4"],"继续处理右边的":["26.4"],"fixed":["26.7"],"setprecision":["26.7"],"signed":["26.7"],"main":["26.7","26.14"],"这里最短是相对于整个全局的最短":["26.8"],"0001":["26.10"],"多余的判断":["26.10"],"可直接用":["26.10"],"2f":["26.10"],"n":["26.10"],"继续向右找可行的数":["26.11"],"删除一半不符合的数":["26.11"],"惑":["26.11"],"为什么答案一定是r":["26.11"],"a":["26.14","34.0"],"times":["26.14"],"输出move函数调用次数":["26.14"],"vue":["27.0"],"files":["27.0"],"image":["33.0"],"20231114203900103":["33.0"],"log":["34.0"],"sort":["34.0"],"sortgreater":["34.0"],"texta":["34.0"],"touppercase":["34.0"],"不区分大小写进行比较":["34.0"],"textb":["34.0"],"text相等时":["34.0"],"按照原顺序排序":["34.0"],"relative":["35.0"],"src":["35.0"],"将相对路径连接到当前工作目录上并规范化路径":["35.0"],"workspace":["35.0"],"normpath":["35.0"],"7257029848971673661":["38.0"],"不然就直接跳了":["39.0"],"chalk":["40.0"],"base":["40.0"],"重启下vscode又好了":["40.0"],"创建vue组件":["40.0"],"然后进行注册后在markdown使用":["40.0"],"同时创建一个右侧抽屉表单":["40.0"],"能够进行注册和登录操作":["40.0"],"vitepress":["46.0"],"output":["46.1"],"需要空格":["52.0"]}]'},n={"0.0":{t:"# 时间复杂度\r",p:"",l:"algorithm/contests/acm-day2.html",a:"时间复杂度"},"0.1":{t:"时间复杂度表\r",p:"",l:"algorithm/contests/acm-day2.html#时间复杂度表",a:"时间复杂度表"},"0.2":{t:"Miller-Robin IsPrime Test\r",p:`    int fpow(int a, int x, int mod)
{
    int ans = 1;
    while (x)
    {
        if (x &amp; 1)
   ...`,l:"algorithm/contests/acm-day2.html#miller-robin-isprime-test",a:"miller-robin-isprime-test"},"0.3":{t:"离线算法\r",p:`#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;algorithm&gt;
using namespace std;
ty ...`,l:"algorithm/contests/acm-day2.html#离线算法",a:"离线算法"},"0.4":{t:"前缀和\r",p:"\r",l:"algorithm/contests/acm-day2.html#前缀和",a:"前缀和"},"0.5":{t:"一维数组前缀和\r",p:`!
    for (i = 1; i &lt;= n; i++){
        cin &gt;&gt; a[i];
        sum[i] = sum[i - 1] + a[i];
   ...`,l:"algorithm/contests/acm-day2.html#一维数组前缀和",a:"一维数组前缀和"},"0.6":{t:"二维数组前缀和\r",p:`!
    cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;   //求表
    cout &lt;&lt; sum[x2][y2] - su ...`,l:"algorithm/contests/acm-day2.html#二维数组前缀和",a:"二维数组前缀和"},"1.0":{t:"# ACwing 题\r",p:"\r",l:"algorithm/contests/acwing.html",a:"acwing-题"},"1.1":{t:"1.放养题\r",p:`#include&lt;c++&gt;
using namespace std;

int main()
{
    string cow, john;
    cin &gt;&gt; cow &g ...`,l:"algorithm/contests/acwing.html#_1-放养题",a:"_1-放养题"},"2.0":{t:'<p style="font-size: 40px;"><b>蓝桥杯</b></p><br>\r',p:`&lt;br&gt;
`,l:"algorithm/contests/Bluebridge.html",a:"p-style-font-size-40px-b-蓝桥杯-b-p-br"},"2.1":{t:"时间戳题\r",p:`&lt;br&gt;


AC 码
#include &lt;bits/stdc++.h&gt;
using namespace std;
int main()
{
	struct tm stime; ...`,l:"algorithm/contests/Bluebridge.html#时间戳题",a:"时间戳题"},"2.2":{t:" ",p:"",l:"algorithm/contests/Bluebridge.html#",a:""},"2.3":{t:"手撸十六转八进制\r",p:`&lt;br&gt;



AC 码

#include&lt;c++&gt;
using namespace std;
#define endl &quot;\\n&quot;
#pragma GCC ...`,l:"algorithm/contests/Bluebridge.html#手撸十六转八进制",a:"手撸十六转八进制"},"2.4":{t:"第十三届 c++:line-numbers B 组\r",p:`&lt;br&gt;
`,l:"algorithm/contests/Bluebridge.html#第十三届-c-line-numbers-b-组",a:"第十三届-c-line-numbers-b-组"},"2.5":{t:"求 X 进制减法\r",p:`

题目链接
&lt;br&gt;


AC 码

//表示 X 进制数 A ? B 的结果的最小可能值转换为十进制后再模 1000000007 的结果。推出 ans %= modd; ans = ( ...`,l:"algorithm/contests/Bluebridge.html#求-x-进制减法",a:"求-x-进制减法"},"3.0":{t:"# 一些模板\r",p:`
用于线下赛比赛的模板使用。

`,l:"algorithm/contests/for_gdcpc.html",a:"一些模板"},"3.1":{t:"Miller_Robin 素数检测\r",p:`#define ll long long
#define ld long double
#define int long long
#define ull unsigned long long
int ...`,l:"algorithm/contests/for_gdcpc.html#miller-robin-素数检测",a:"miller-robin-素数检测"},"3.2":{t:"欧拉筛法\r",p:`
if(i % prime[j] == 0) break;区别于埃氏筛的原因，导致了其的复杂度为 O(n)(每个数只被筛过一次) 保证都是被最小质因数整除
解释：若 i % prime[j] 得出 i ...`,l:"algorithm/contests/for_gdcpc.html#欧拉筛法",a:"欧拉筛法"},"3.3":{t:"最大公约数\r",p:`
gcd(a,b) = gcd(a, a+b) = gcd(a, ka+b)
gcd(ka, kb) = k·gcd(a, b)
定义多个整数的最大公约数：gcd(a, b, c) = gcd(gcd ...`,l:"algorithm/contests/for_gdcpc.html#最大公约数",a:"最大公约数"},"3.4":{t:"x 进制转 y 进制\r",p:`// 从高位开始累乘
string trans(int num1, int num2, string str)
{
    string ans = &quot;&quot;;
    int ten ...`,l:"algorithm/contests/for_gdcpc.html#x-进制转-y-进制",a:"x-进制转-y-进制"},"3.5":{t:"归并排序(求逆序对)\r",p:`逆序对:
在升序的数组中发现 0 &lt; i &lt; j &lt; n and a[i] &gt; a[j] 说明 a[i] a[j] 为一个逆序对。又因为左边(l,mid)数组已经是有序的，所以 ...`,l:"algorithm/contests/for_gdcpc.html#归并排序-求逆序对",a:"归并排序-求逆序对"},"3.6":{t:"并查集\r",p:`
复杂版本(带权并查集模板)：
公式推导：
&lt;!-- ! --&gt;


变量： sum[MAX]数组记录边权
核心代码(修改后的查找与合并)

int find(int x) //在查找中要 ...`,l:"algorithm/contests/for_gdcpc.html#并查集",a:"并查集"},"3.7":{t:"单调队列\r",p:`&lt;!-- ! --&gt;
经典例题：滑动窗口
“单调队列”即单调:单调递增或递减; 队列:说明有出队入队时间复杂度为 O(1);
可以使用 STL 的 deque 维护最大值或最小值。
步骤
 ...`,l:"algorithm/contests/for_gdcpc.html#单调队列",a:"单调队列"},"3.8":{t:"使用小根堆(大根堆取负)优化 Dijkstra\r",p:`
#include &lt;bits/stdc++.h&gt;
using namespace std;
#define inf INT_MAX
const int MAX = 1e3 + 10;
s ...`,l:"algorithm/contests/for_gdcpc.html#使用小根堆-大根堆取负-优化-dijkstra",a:"使用小根堆-大根堆取负-优化-dijkstra"},"3.9":{t:"DataStructure\r",p:`
注意：用 set 或 map 时，结构体 node 的比较函数只按照 x 的大小进行比较，而没有考虑 y 的大小。如果两个 node 的 x 相同，但 y 不同，它们在 set 中被视为相等，可能会 ...`,l:"algorithm/contests/for_gdcpc.html#datastructure",a:"datastructure"},"3.10":{t:"使用 stl 中的 next_permutation 来求全排列数\r",p:`
用于求一个集合中的某些个数的值

可知，使用了 next_permutation 是不对数组自身进行操作的，所以我们可以将数组最后一位的值改为 1，然后逐渐地递减到 0，以达到所有的 0 都变成了  ...`,l:"algorithm/contests/for_gdcpc.html#使用-stl-中的-next-permutation-来求全排列数",a:"使用-stl-中的-next-permutation-来求全排列数"},"3.11":{t:"快读快写\r",p:`
一般地，在我们比赛/刷题过程中，当输入数字数量(次数)超过 $ 5 \\times 10^{4} $时使用它

inline int read()
{
    int x = 0, f = 1;
   ...`,l:"algorithm/contests/for_gdcpc.html#快读快写",a:"快读快写"},"3.12":{t:"对拍代码\r",p:`
生成数据函数

void solve()
{
    vector&lt;int&gt;num;
    freopen(&quot;in.txt&quot;, &quot;w&quot;, std ...`,l:"algorithm/contests/for_gdcpc.html#对拍代码",a:"对拍代码"},"4.0":{t:"<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r",p:`&lt;!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;
Table of Contents  generated ...`,l:"algorithm/contests/hduoj.html",a:"start-doctoc-generated-toc-please-keep-comment-here-to-allow-auto-update"},"4.1":{t:"杭电的题目\r",p:"\r",l:"algorithm/contests/hduoj.html#杭电的题目",a:"杭电的题目"},"4.2":{t:"二叉搜索树\r",p:`hdu3791
我的AC代码
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
using na ...`,l:"algorithm/contests/hduoj.html#二叉搜索树",a:"二叉搜索树"},"5.0":{t:"# 记录一下 ACM 中遇到的题目和技巧\r",p:"\r",l:"algorithm/contests/ICPCORCCPC.html",a:"记录一下-acm-中遇到的题目和技巧"},"5.1":{t:"技巧类\r",p:"\r",l:"algorithm/contests/ICPCORCCPC.html#技巧类",a:"技巧类"},"5.2":{t:"关于卡常和输入问题\r",p:"建议使用`scanf`and`printf`，而不是使用`cin cout`\n然后再去使用`ios::sync_with_stdio(false), cin.tie(nullptr)`来解绑。\n\n卡常 ...",l:"algorithm/contests/ICPCORCCPC.html#关于卡常和输入问题",a:"关于卡常和输入问题"},"5.3":{t:"题目\r",p:"\r",l:"algorithm/contests/ICPCORCCPC.html#题目",a:"题目"},"5.4":{t:"Link with Monotonic Subsequence\r",p:`

题目链接
&lt;!-- - &lt;img src=&quot;img/max(lis_lds)_02.png&quot;&gt; --&gt;
&lt;!-- - &lt;img src=&q ...`,l:"algorithm/contests/ICPCORCCPC.html#link-with-monotonic-subsequence",a:"link-with-monotonic-subsequence"},"5.5":{t:"Seventeen\r",p:`
题目链接
&lt;!-- - &lt;img src=&quot;img/&quot;&gt; --&gt;
&lt;br&gt;

AC 码
#include &lt;bits/stdc++.h& ...`,l:"algorithm/contests/ICPCORCCPC.html#seventeen",a:"seventeen"},"6.0":{t:'<p style="font-size: 40px;"><b>洛谷</b></p><br>\r',p:`[TOC]
&lt;br&gt;
`,l:"algorithm/contests/LuoGuuu.html",a:"p-style-font-size-40px-b-洛谷-b-p-br"},"6.1":{t:"蜜蜂路线\r",p:`

题目链接


&lt;img src=&quot;./img/beeroad.png&quot; width=&quot;70%&quot;&gt;
&lt;br&gt;


AC 码
#incl ...`,l:"algorithm/contests/LuoGuuu.html#蜜蜂路线",a:"蜜蜂路线"},"6.2":{t:"字符串中找名字\r",p:`// 有毒瘤数据吗...还是我的代码不够完美...


题目链接
&lt;br&gt;


AC 码


#include &lt;bits/stdc++.h&gt;
using namespace  ...`,l:"algorithm/contests/LuoGuuu.html#字符串中找名字",a:"字符串中找名字"},"7.0":{t:"# 牛客题\r",p:"\r",l:"algorithm/contests/NewCode.html",a:"牛客题"},"7.1":{t:"目录\r",p:"\r",l:"algorithm/contests/NewCode.html#目录",a:"目录"},"7.2":{t:"[TOC]\r",p:"\r",l:"algorithm/contests/NewCode.html#toc",a:"toc"},"7.3":{t:"求多项式的每个项的质数\r",p:`#include&lt;c++&gt;
using namespace std;// 质数的数据范围为-10^4--+10^4
#define int  long long//不要轻易地写unsign ...`,l:"algorithm/contests/NewCode.html#求多项式的每个项的质数",a:"求多项式的每个项的质数"},"7.4":{t:"分元宵题\r",p:`


`,l:"algorithm/contests/NewCode.html#分元宵题",a:"分元宵题"},"7.5":{t:" ",p:"",l:"algorithm/contests/NewCode.html#",a:""},"7.6":{t:"菜鸡版\r",p:`#include&lt;c++&gt;
using namespace std;
#define int unsigned long long
int fpow(int num, int num2,  ...`,l:"algorithm/contests/NewCode.html#菜鸡版",a:"菜鸡版"},"7.7":{t:" ",p:"",l:"algorithm/contests/NewCode.html#",a:""},"7.8":{t:"dalao\r",p:`
`,l:"algorithm/contests/NewCode.html#dalao",a:"dalao"},"7.9":{t:" ",p:"",l:"algorithm/contests/NewCode.html#",a:""},"7.10":{t:"LL res=1%MOD;//防止 mod = 1, 任何数 mod 1 都等于 0\r",p:"\r",l:"algorithm/contests/NewCode.html#ll-res-1-mod-防止-mod-1-任何数-mod-1-都等于-0",a:"ll-res-1-mod-防止-mod-1-任何数-mod-1-都等于-0"},"7.11":{t:"简单查找题(set 的去重,查找. stringstream 特性)\r",p:`#include&lt;c++&gt;
using namespace std;
#define LL long long
string cc = &quot;algorithm, bitset, c ...`,l:"algorithm/contests/NewCode.html#简单查找题-set-的去重-查找-stringstream-特性",a:"简单查找题-set-的去重-查找-stringstream-特性"},"7.12":{t:" ",p:"",l:"algorithm/contests/NewCode.html#",a:""},"7.13":{t:"while (ss >> s)// stringstream 流输入到空格后停下(那么 cin >> x 也是咯),而后会自动忽略掉两个字符串中间的所有空格\r",p:`
`,l:"algorithm/contests/NewCode.html#while-ss-s-stringstream-流输入到空格后停下-那么-cin-x-也是咯-而后会自动忽略掉两个字符串中间的所有空格",a:"while-ss-s-stringstream-流输入到空格后停下-那么-cin-x-也是咯-而后会自动忽略掉两个字符串中间的所有空格"},"7.14":{t:" ",p:"",l:"algorithm/contests/NewCode.html#",a:""},"7.15":{t:"set.count(tmp) 表示 set 中 tmp-键的个数，因为 set 具有唯一性，所有 count 只有 0 和 1,即存在和不存在\r",p:`
`,l:"algorithm/contests/NewCode.html#set-count-tmp-表示-set-中-tmp-键的个数-因为-set-具有唯一性-所有-count-只有-0-和-1-即存在和不存在",a:"set-count-tmp-表示-set-中-tmp-键的个数-因为-set-具有唯一性-所有-count-只有-0-和-1-即存在和不存在"},"7.16":{t:" ",p:"",l:"algorithm/contests/NewCode.html#",a:""},"7.17":{t:"exp:\r",p:`
stringstream st;
st.str(&quot;&quot;) -&gt; 为清空缓冲区
st.clear() -&gt; 只改变了当前状态，不清空


`,l:"algorithm/contests/NewCode.html#exp",a:"exp"},"8.0":{t:"<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r",p:`&lt;!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;
Table of Contents  generated ...`,l:"algorithm/contests/NIO补题.html",a:"start-doctoc-generated-toc-please-keep-comment-here-to-allow-auto-update"},"8.1":{t:"牛客训练营补题\r",p:"\r",l:"algorithm/contests/NIO补题.html#牛客训练营补题",a:"牛客训练营补题"},"8.2":{t:"Day1 \r",p:`题目链接](https://ac.nowcoder.com/acm/contest/33188/C))
#include&lt;c++&gt;
using namespace std;
const i ...`,l:"algorithm/contests/NIO补题.html#day1",a:"day1"},"9.0":{t:"团队天梯 PTA\r",p:"\r",l:"algorithm/contests/SkyLadder.html",a:"团队天梯-pta"},"9.1":{t:"沙漏题\r",p:`#include&lt;c++&gt;
using namespace std;
void sandd(int key1, char key2)
{

    int tmp = key1 + 1;
 ...`,l:"algorithm/contests/SkyLadder.html#沙漏题",a:"沙漏题"},"9.2":{t:"帅到没朋友(fish edition)\r",p:`#include &lt;bits/stdc++.h&gt;
#define endl &quot;\\n&quot;
#define ll long long
#define QAQ std
usin ...`,l:"algorithm/contests/SkyLadder.html#帅到没朋友-fish-edition",a:"帅到没朋友-fish-edition"},"9.3":{t:"帅到没朋友(sheep edition)\r",p:`#include&lt;c++&gt;
using namespace std;

int main()
{
	int n, m;
	cin &gt;&gt; n;
	map&lt;string,in ...`,l:"algorithm/contests/SkyLadder.html#帅到没朋友-sheep-edition",a:"帅到没朋友-sheep-edition"},"9.4":{t:"罚酒题\r",p:`#include&lt;c++&gt;
using namespace std;

int main()
{
    int a, b, n;
    cin &gt;&gt; a &gt;&gt;  ...`,l:"algorithm/contests/SkyLadder.html#罚酒题",a:"罚酒题"},"10.0":{t:"# 算法知识索引\r",p:"\r",l:"algorithm/index.html",a:"算法知识索引"},"10.1":{t:"基础知识\r",p:`:::info

C++11
数据结构-02
数据结构
动态规划
排序
时间复杂度
:::

`,l:"algorithm/index.html#基础知识",a:"基础知识"},"10.2":{t:"算法\r",p:`:::info

贪心算法
递归与分治
验证算法
:::

`,l:"algorithm/index.html#算法",a:"算法"},"10.3":{t:"高级知识\r",p:`:::info

算法中的数学
指针基础
用于算法的Python函数
C++中的新特性
高精度算法
:::

`,l:"algorithm/index.html#高级知识",a:"高级知识"},"10.4":{t:"实践\r",p:`:::info

考试准备
另一个考试准备
:::

`,l:"algorithm/index.html#实践",a:"实践"},"11.0":{t:"C++11 特性\r",p:"\r",l:"algorithm/knowledges/C++11.html",a:"c-11-特性"},"11.1":{t:"stringstream\r",p:`判断 stringstream 是否为空：st.rdbuf() -&gt; in_avail() == 0
`,l:"algorithm/knowledges/C++11.html#stringstream",a:"stringstream"},"11.2":{t:"lambda 匿名函数\r",p:`文章链接

代码格式

// 四种写法
// 1.
    auto func1 = -&gt;int{return ...;};
// 2.能够通过return的类型或void类型，可以省去-&gt ...`,l:"algorithm/knowledges/C++11.html#lambda-匿名函数",a:"lambda-匿名函数"},"11.3":{t:"thread 线程\r",p:`文章链接
`,l:"algorithm/knowledges/C++11.html#thread-线程",a:"thread-线程"},"11.4":{t:"函数传入函数参数",p:"",l:"algorithm/knowledges/C++11.html#函数传入函数参数",a:"函数传入函数参数"},"12.0":{t:"# STL 数据结构\r",p:"\r",l:"algorithm/knowledges/dataStructor.html",a:"stl-数据结构"},"12.1":{t:"unordered_map\r",p:`
遍历的方法
unordered_map&lt;string,int&gt;human



for(pair&lt;const string,int&gt; &amp;wir : human) // ...`,l:"algorithm/knowledges/dataStructor.html#unordered-map",a:"unordered-map"},"12.2":{t:"priority_queue 优先队列\r",p:`
功能：

num.top()
num.empty()
num.push(x)
num.pop()
num.size()


通过大根堆来实现的队列，所以默认为队列头部为最大值
从小到大则需要：pri ...`,l:"algorithm/knowledges/dataStructor.html#priority-queue-优先队列",a:"priority-queue-优先队列"},"12.3":{t:"set 与 vector 使用\r",p:`    vector&lt;int&gt; nums = {12, 3, 457, 75, 112, 212, 12, 12, 12};
    set&lt;int&gt; nums2(nums.b ...`,l:"algorithm/knowledges/dataStructor.html#set-与-vector-使用",a:"set-与-vector-使用"},"12.4":{t:"使用 struct 来当作键的话\r",p:`可以使用 map 和 set，而不能使用unordered_map&lt;node, int&gt;
原因是 map，set 是使用树结构来排序和创建的，而 unordered_map 使用的是 ha ...`,l:"algorithm/knowledges/dataStructor.html#使用-struct-来当作键的话",a:"使用-struct-来当作键的话"},"12.5":{t:"emplace but not push\r",p:`emplace()、emplace_back() 和 emplace_front() 都是用于以更高效的方式在容器中构造元素的函数，可以避免不必要的元素复制或移动，提高程序的性能。
example:
 ...`,l:"algorithm/knowledges/dataStructor.html#emplace-but-not-push",a:"emplace-but-not-push"},"13.0":{t:"asfsd",p:"",l:"algorithm/knowledges/DP.html",a:"asfsd"},"14.0":{t:"# Math\r",p:"\r",l:"algorithm/knowledges/for_exam.html",a:"math"},"14.1":{t:"偏移量数组(xy 上下左右移动)\r",p:`//方法一：
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, -1, 0, 1};
//方法二：
int dxy[5] = {1,0,-1,0,1}
for(in ...`,l:"algorithm/knowledges/for_exam.html#偏移量数组-xy-上下左右移动",a:"偏移量数组-xy-上下左右移动"},"14.2":{t:"进制\r",p:"\r",l:"algorithm/knowledges/for_exam.html#进制",a:"进制"},"14.3":{t:"十进制转 X 进制\r",p:`方法一：reverse 反转(reverse)
string hexx(int num1, int index)
{
	string ans = &quot;&quot;;
	while (num1) ...`,l:"algorithm/knowledges/for_exam.html#十进制转-x-进制",a:"十进制转-x-进制"},"14.4":{t:"x 进制转 y 进制\r",p:`// 从高位开始累乘
string trans(int num1, int num2, string str)
{
    string ans = &quot;&quot;;
    int ten ...`,l:"algorithm/knowledges/for_exam.html#x-进制转-y-进制",a:"x-进制转-y-进制"},"14.5":{t:"自然常数\r",p:`
log10()表示 lg x and log() 表示 ln x;
计算整数的位数 --&gt; (int)(log10((double)(i * a))) + 1;

#include&lt;io ...`,l:"algorithm/knowledges/for_exam.html#自然常数",a:"自然常数"},"14.6":{t:"素数算法\r",p:`
大数且单次--&gt;米勒
小数或较大且多次--&gt;欧拉筛
素数计数函数，推出不大于 x 的素数个数约有 x / lnx，实际还需要更大点所以设多一位就好

`,l:"algorithm/knowledges/for_exam.html#素数算法",a:"素数算法"},"14.7":{t:"常规试除法\r",p:`
若 n 为合数，则 n = $\\sqrt{n} \\times \\sqrt{n}$,假设 n = xy, 若 x &gt;= $\\sqrt{n}$, 则必然有 y &lt;= $\\sqrt{n}$,  ...`,l:"algorithm/knowledges/for_exam.html#常规试除法",a:"常规试除法"},"14.8":{t:"米勒-拉宾素性检验质数\r",p:`int fpow(int num1, int num2, int mod)
{
  int ans = 1 % mod;
  while(num2){
    if(num2 &amp; 1)
    ...`,l:"algorithm/knowledges/for_exam.html#米勒-拉宾素性检验质数",a:"米勒-拉宾素性检验质数"},"14.9":{t:"欧拉筛法\r",p:`
if(i % prime[j] == 0) break;区别于埃氏筛的原因，导致了其的复杂度为 O(n)(每个数只被筛过一次) 保证都是被最小质因数整除
解释：若 i % prime[j] 得出 i ...`,l:"algorithm/knowledges/for_exam.html#欧拉筛法",a:"欧拉筛法"},"14.10":{t:"位运算算法\r",p:`
快速幂(经典)

#define int long long
int fpow(int num1, int num2, int num3){
  int ans = 1 % num3;
  whil ...`,l:"algorithm/knowledges/for_exam.html#位运算算法",a:"位运算算法"},"14.11":{t:"最大公约数\r",p:`链接：gcd 博客

gcd(a,b) = gcd(a, a+b) = gcd(a, ka+b)
gcd(ka, kb) = k·gcd(a, b)
定义多个整数的最大公约数：gcd(a, b, c) ...`,l:"algorithm/knowledges/for_exam.html#最大公约数",a:"最大公约数"},"14.12":{t:"辗转相除法\r",p:`int gcd(int num1, int num2)
{
    return (num2 != 0)? gcd(num2, num1%num2):num1;
}

`,l:"algorithm/knowledges/for_exam.html#辗转相除法",a:"辗转相除法"},"14.13":{t:"更相减损术\r",p:`int gcd(int a, int b){
   while(a != b){   //a==b时结束计算
	   if(a &gt; b)  a = a - b;
	   else       b ...`,l:"algorithm/knowledges/for_exam.html#更相减损术",a:"更相减损术"},"14.14":{t:"最小公倍数\r",p:`int lcm(int num1, int num2)
{
    return num1 num2 / __gcd(num1, num2);
}

`,l:"algorithm/knowledges/for_exam.html#最小公倍数",a:"最小公倍数"},"15.0":{t:"# 算法笔记\r",p:"\r",l:"algorithm/knowledges/for_exam_02.html",a:"算法笔记"},"15.1":{t:"技巧：\r",p:`当推出了一个公式（如 sum = n \\n / 2 + 1)，此时不知道是否需要取多大的 n 来符合 sum 这个题目给的样例，可以使用二分搜索进行 logN 级别的查找。

迪杰斯特拉算法中的优化版 ...`,l:"algorithm/knowledges/for_exam_02.html#技巧",a:"技巧"},"15.2":{t:"priority_queue\r",p:`
功能：

num.top()
num.empty()
num.push(x)
num.pop()
num.size()


通过大根堆来实现的队列，所以默认为队列头部为最大值
从小到大则需要：pri ...`,l:"algorithm/knowledges/for_exam_02.html#priority-queue",a:"priority-queue"},"15.3":{t:"树状数组\r",p:`
树状数组和线段树具有相似的功能，但他俩毕竟还有一些区别：树状数组能有的操作，线段树一定有；线段树有的操作，树状数组不一定有。但是树状数组的代码要比线段树短，思维更清晰，速度也更快，在解决一些单点修改 ...`,l:"algorithm/knowledges/for_exam_02.html#树状数组",a:"树状数组"},"15.4":{t:"线段树\r",p:`
使用分治的方法来构建，同时使用结构体数组模拟链表来实现二叉树。
!

#define lc p &lt;&lt; 1 //2 p
#define rc p &lt;&lt; 1 | 1 // 2 p ...`,l:"algorithm/knowledges/for_exam_02.html#线段树",a:"线段树"},"15.5":{t:"单调队列\r",p:`!
经典例题：滑动窗口
“单调队列”即单调:单调递增或递减; 队列:说明有出队入队时间复杂度为 O(1);
可以使用 STL 的 deque 维护最大值或最小值。
步骤

判断是否需要将队头出队，原因 ...`,l:"algorithm/knowledges/for_exam_02.html#单调队列",a:"单调队列"},"15.6":{t:"深搜与广搜\r",p:`
代码框架

bool flag = 0;
void dfs(层数, 其他参数)
{
    if (出局判断)
    {
        return;
    }
    if (剪枝)
    ...`,l:"algorithm/knowledges/for_exam_02.html#深搜与广搜",a:"深搜与广搜"},"15.7":{t:"搜索求组合情况\r",p:`vector&lt;int&gt; num(MAX);
int n, r;
vector&lt;int&gt; ans;
void dfs(int cur, int sum)
{
    if (su ...`,l:"algorithm/knowledges/for_exam_02.html#搜索求组合情况",a:"搜索求组合情况"},"15.8":{t:"搜索求全排列\r",p:`#include &lt;bits/stdc++.h&gt;
using namespace std;
const int MAX = 10;
int n, m;
vector&lt;bool&gt; ...`,l:"algorithm/knowledges/for_exam_02.html#搜索求全排列",a:"搜索求全排列"},"15.9":{t:"回溯题目\r",p:`
DFS 深搜：通过画递归树来理解，汉罗塔，迷宫问题

`,l:"algorithm/knowledges/for_exam_02.html#回溯题目",a:"回溯题目"},"15.10":{t:"查找单词\r",p:`
题目链接

class Solution {
public:
    int n, m;
    int dx[4] = {1, 0, -1, 0};
    int dy[4] = {0, 1,  ...`,l:"algorithm/knowledges/for_exam_02.html#查找单词",a:"查找单词"},"15.11":{t:"连连看\r",p:`

题目链接
&lt;br&gt;


AC 码


#include &lt;bits/stdc++.h&gt;
using namespace std;
int n, m;
const int M ...`,l:"algorithm/knowledges/for_exam_02.html#连连看",a:"连连看"},"15.12":{t:"全球变暖\r",p:`

题目链接
&lt;br&gt;


AC 码
&lt;!-- @import &quot;[TOC]&quot; {cmd=&quot;toc&quot; depthFrom=1 depthTo= ...`,l:"algorithm/knowledges/for_exam_02.html#全球变暖",a:"全球变暖"},"15.13":{t:"数字三角形\r",p:`

题目链接
&lt;!-- - &lt;img src=&quot;image/&quot; width=&quot;70%&quot;&gt; --&gt;
&lt;br&gt;


AC 码
# ...`,l:"algorithm/knowledges/for_exam_02.html#数字三角形",a:"数字三角形"},"15.14":{t:"普通 Dijkstra 算法模板\r",p:`#include &lt;bits/stdc++.h&gt;
using namespace std;
#define inf INT_MAX
const int MAX = 1e3 + 10;
st ...`,l:"algorithm/knowledges/for_exam_02.html#普通-dijkstra-算法模板",a:"普通-dijkstra-算法模板"},"15.15":{t:"使用小根堆(大根堆取负)优化 Dijkstra\r",p:`
#include &lt;bits/stdc++.h&gt;
using namespace std;
#define inf INT_MAX
const int MAX = 1e3 + 10;
s ...`,l:"algorithm/knowledges/for_exam_02.html#使用小根堆-大根堆取负-优化-dijkstra",a:"使用小根堆-大根堆取负-优化-dijkstra"},"15.16":{t:"归并排序(求逆序对)\r",p:`逆序对:
在升序的数组中发现 0 &lt; i &lt; j &lt; n and a[i] &gt; a[j] 说明 a[i] a[j] 为一个逆序对。又因为左边(l,mid)数组已经是有序的，所以 ...`,l:"algorithm/knowledges/for_exam_02.html#归并排序-求逆序对",a:"归并排序-求逆序对"},"15.17":{t:"二分答案模板\r",p:`bool check(int num)
{...}
void solve()
{
int l = 0, r = 1e9 + 10, ans = 0;
while(l &lt; r)
{
int mid ...`,l:"algorithm/knowledges/for_exam_02.html#二分答案模板",a:"二分答案模板"},"17.0":{t:"# Math\r",p:"\r",l:"algorithm/knowledges/Math.html",a:"math"},"17.1":{t:"偏移量数组(xy 上下左右移动)\r",p:`//方法一：
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, -1, 0, 1};
//方法二：
int dxy[5] = {1,0,-1,0,1}
for(in ...`,l:"algorithm/knowledges/Math.html#偏移量数组-xy-上下左右移动",a:"偏移量数组-xy-上下左右移动"},"17.2":{t:"进制\r",p:"\r",l:"algorithm/knowledges/Math.html#进制",a:"进制"},"17.3":{t:"十进制转 X 进制\r",p:`方法一：reverse 反转(reverse)
string hexx(int num1, int index)
{
	string ans = &quot;&quot;;
	while (num1) ...`,l:"algorithm/knowledges/Math.html#十进制转-x-进制",a:"十进制转-x-进制"},"17.4":{t:"x 进制转 y 进制\r",p:`// 从高位开始累乘
string trans(int num1, int num2, string str)
{
    string ans = &quot;&quot;;
    int ten ...`,l:"algorithm/knowledges/Math.html#x-进制转-y-进制",a:"x-进制转-y-进制"},"17.5":{t:"使用C++流输入 进制转换\r",p:`chara;
scanf(&quot;%x&quot;,&amp;a);//十六转八进制
printf(&quot;%o\\n&quot;,a);
printf(&quot;%d&quot;,a);

 ...`,l:"algorithm/knowledges/Math.html#使用c-流输入-进制转换",a:"使用c-流输入-进制转换"},"17.6":{t:"自然常数\r",p:`
log10()表示 lg x and log() 表示 ln x;
计算整数的位数 --&gt; (int)(log10((double)(i * a))) + 1;

#include&lt;io ...`,l:"algorithm/knowledges/Math.html#自然常数",a:"自然常数"},"17.7":{t:"自然常数的扩展，用于计算十进制数的位数\r",p:`

计算位数：
int(double(log(ans))/ log(10)) + 1 通过对数的公式来求


从高位向低位拿每一个位的数


// 例如:  12345  位数：5
//        ...`,l:"algorithm/knowledges/Math.html#自然常数的扩展-用于计算十进制数的位数",a:"自然常数的扩展-用于计算十进制数的位数"},"17.8":{t:"素数算法\r",p:`
大数且单次--&gt;米勒
小数或较大且多次--&gt;欧拉筛
素数计数函数，推出不大于 x 的素数个数约有 x / lnx，实际还需要更大点所以设多一位就好

`,l:"algorithm/knowledges/Math.html#素数算法",a:"素数算法"},"17.9":{t:"常规试除法\r",p:`
若 n 为合数，则 n = $\\sqrt{n} \\times \\sqrt{n}$,假设 n = xy, 若 x &gt;= $\\sqrt{n}$, 则必然有 y &lt;= $\\sqrt{n}$,  ...`,l:"algorithm/knowledges/Math.html#常规试除法",a:"常规试除法"},"17.10":{t:"米勒-拉宾素性检验质数\r",p:`int fpow(int num1, int num2, int mod)
{
  int ans = 1 % mod;
  while(num2){
    if(num2 &amp; 1)
    ...`,l:"algorithm/knowledges/Math.html#米勒-拉宾素性检验质数",a:"米勒-拉宾素性检验质数"},"17.11":{t:"欧拉筛法\r",p:`
if(i % prime[j] == 0) break;区别于埃氏筛的原因，导致了其的复杂度为 O(n)(每个数只被筛过一次) 保证都是被最小质因数整除
解释：若 i % prime[j] 得出 i ...`,l:"algorithm/knowledges/Math.html#欧拉筛法",a:"欧拉筛法"},"17.12":{t:"位运算算法\r",p:`
快速幂(经典)

#define int long long
int fpow(int num1, int num2, int num3){
  int ans = 1 % num3;
  whil ...`,l:"algorithm/knowledges/Math.html#位运算算法",a:"位运算算法"},"17.13":{t:"最大公约数\r",p:`模板：
// 直接手写一个gcd
ll gcd(ll a,ll b){
    return b?gcd(b,a%b):a;
}
// 使用stl库内的方法
 __gcd(a, b);

两种之间的差 ...`,l:"algorithm/knowledges/Math.html#最大公约数",a:"最大公约数"},"17.14":{t:"辗转相除法\r",p:`int gcd(int num1, int num2)
{
    return (num2 != 0)? gcd(num2, num1%num2):num1;
}

`,l:"algorithm/knowledges/Math.html#辗转相除法",a:"辗转相除法"},"17.15":{t:"更相减损术\r",p:`int gcd(int a, int b){
   while(a != b){   //a==b时结束计算
	   if(a &gt; b)  a = a - b;
	   else       b ...`,l:"algorithm/knowledges/Math.html#更相减损术",a:"更相减损术"},"17.16":{t:"最小公倍数\r",p:`int lcm(int num1, int num2)
{
    return num1 num2 / __gcd(num1, num2);
}

`,l:"algorithm/knowledges/Math.html#最小公倍数",a:"最小公倍数"},"17.17":{t:"高级数学\r",p:"\r",l:"algorithm/knowledges/Math.html#高级数学",a:"高级数学"},"17.18":{t:"斯特林公式求阶乘\r",p:`#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;ctype.h&gt;
#include &lt;math.h&gt;
 ...`,l:"algorithm/knowledges/Math.html#斯特林公式求阶乘",a:"斯特林公式求阶乘"},"20.0":{t:"# 杂类\r",p:"\r",l:"algorithm/knowledges/Tip+C++newthing.html",a:"杂类"},"20.1":{t:"一些小技巧\r",p:"\r",l:"algorithm/knowledges/Tip+C++newthing.html#一些小技巧",a:"一些小技巧"},"20.2":{t:"输入输出重定向\r",p:`freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); //输入重定向，输入数据将从in.txt文件中读取
freopen(&quot;out.txt&quo ...`,l:"algorithm/knowledges/Tip+C++newthing.html#输入输出重定向",a:"输入输出重定向"},"20.3":{t:"快读快写\r",p:`
一般地，在我们比赛/刷题过程中，当输入数字数量(次数)超过 $ 5 \\times 10^{4} $时使用它

inline int read()
{
    int x = 0, f = 1;
   ...`,l:"algorithm/knowledges/Tip+C++newthing.html#快读快写",a:"快读快写"},"20.4":{t:"c++:line-numbers新特性\r",p:"\r",l:"algorithm/knowledges/Tip+C++newthing.html#c-line-numbers新特性",a:"c-line-numbers新特性"},"20.5":{t:"jiangly 的习惯\r",p:`cout &lt;&lt; ... &lt;&lt; &quot;\\n&quot;[i != n]; 等同于 cout &lt;&lt; ... &lt;&lt; (i!=n)?'\\0':'\\n';
 ...`,l:"algorithm/knowledges/Tip+C++newthing.html#jiangly-的习惯",a:"jiangly-的习惯"},"20.6":{t:"关于 c++:line-numbers中结构体\r",p:`// c++:line-numbers
typedef struct Ren
{
    int num1 = 0;
    int num2 = 0;
} ren; // c++:line-numb ...`,l:"algorithm/knowledges/Tip+C++newthing.html#关于-c-line-numbers中结构体",a:"关于-c-line-numbers中结构体"},"20.7":{t:"关于空指针\r",p:`
首要原因：在 C 语言中，NULL(#define NULL ((void *)0))能够隐性指针转换(即int t = NULL),然而 c++:line-numbers语言要求更为严格，不允许进 ...`,l:"algorithm/knowledges/Tip+C++newthing.html#关于空指针",a:"关于空指针"},"20.8":{t:"野指针与 delete 操作\r",p:"delete 后没有指定为 nullptr: 当你再次访问这个指针时，就会出现未定义行为（undefined behavior），可能会导致程序崩溃、数据损坏等问题。建议的做法是，在 delete 之 ...",l:"algorithm/knowledges/Tip+C++newthing.html#野指针与-delete-操作",a:"野指针与-delete-操作"},"20.9":{t:"关于 ambiguous\r",p:`在 c++:line-numbers中 left, right, max, 这些最好不用于变量名的使用，否则会报错，变量不明确。
其实原因是 end 为 std 内的保留字，但在 c++:line-n ...`,l:"algorithm/knowledges/Tip+C++newthing.html#关于-ambiguous",a:"关于-ambiguous"},"21.0":{t:"c++:line-numbers 对拍详解 - EdisonBa - 博客园 (cnblogs.com)\r",p:"\r",l:"algorithm/knowledges/对拍算法.html",a:"c-line-numbers-对拍详解-edisonba-博客园-cnblogs-com"},"21.1":{t:"生成数据函数\r",p:`void solve()
{
    vector&lt;int&gt;num;
    freopen(&quot;in.txt&quot;, &quot;w&quot;, stdout); //  ...`,l:"algorithm/knowledges/对拍算法.html#生成数据函数",a:"生成数据函数"},"21.2":{t:" 对拍主函数\r",p:` while (1)
    {
        system(&quot;data.exe&quot;);
        system(&quot;brute.exe&quot;);
       ...`,l:"algorithm/knowledges/对拍算法.html#对拍主函数",a:"对拍主函数"},"22.0":{t:"# 排序\r",p:"\r",l:"algorithm/knowledges/排序.html",a:"排序"},"22.1":{t:"宇宙总统\r",p:`题目链接
#include &lt;bits/stdc++.h&gt;
using namespace std;
vector&lt;string&gt; num;
unordered_map&lt; ...`,l:"algorithm/knowledges/排序.html#宇宙总统",a:"宇宙总统"},"23.0":{t:"# Data Structure\r",p:"\r",l:"algorithm/knowledges/数据结构.html",a:"data-structure"},"23.1":{t:"简介：\r",p:`两种方式讨论数据结构：

通过数学和逻辑模型，ADT(abstract data structure)：抽象数据模型
通过具体实现来研究，代码？

`,l:"algorithm/knowledges/数据结构.html#简介",a:"简介"},"23.2":{t:"顺序表\r",p:`具体实现功能：

empty list has cursor
insert
remove
count
read/modify element at one position
specify data- ...`,l:"algorithm/knowledges/数据结构.html#顺序表",a:"顺序表"},"23.3":{t:"链表(linked list)\r",p:"优点是：不像数组一样需要在内存中被分配一个固定连续的地址，能够分散分配的地址，而且基本不会浪费内存。(顺序表需要连续空间的原因，导致如果需要扩展的地址已经被分配了，那需要寻找一个“新块”来复制原来的数 ...",l:"algorithm/knowledges/数据结构.html#链表-linked-list",a:"链表-linked-list"},"23.4":{t:"Array vs List\r",p:`比较的参数：


访问元素的成本。

数组：知道了数组头地址后，能够推出该数组的其他元素 O(1)
链表：只能从表头 head 开始遍历寻找，最坏情况为 n，O(n)



内存需要和使用。

数组： ...`,l:"algorithm/knowledges/数据结构.html#array-vs-list",a:"array-vs-list"},"23.5":{t:"List (单链表)\r",p:`

头插入 and 尾插入
nodehead = nullptr;
void insert_front(int x)
{
    node neww = new node; //create one  ...`,l:"algorithm/knowledges/数据结构.html#list-单链表",a:"list-单链表"},"23.6":{t:"循环双向链表\r",p:`
归并两个有序链表成为一个非递减的排序，(同于归并排序中)

auto tmp3 = new Node(-1);
while(tmp1 != NULL&amp;&amp;tmp2 != NULL)
{ ...`,l:"algorithm/knowledges/数据结构.html#循环双向链表",a:"循环双向链表"},"23.7":{t:"链表的一些 tips\r",p:"在 STL 中，链表相对于数组，是无法进行随机读取的，同时在 vector 中，能够 vec.begin() + n,来遍历到后边第 n 个元素下标，但链表只有++ite，没有对于+ n的重载运算符。 ...",l:"algorithm/knowledges/数据结构.html#链表的一些-tips",a:"链表的一些-tips"},"23.8":{t:"栈\r",p:`LIFO

实际用途：

函数的调用，和递归调用(先进后出)
编辑 ctrl+z 的实现



`,l:"algorithm/knowledges/数据结构.html#栈",a:"栈"},"23.9":{t:"队列\r",p:`FIFO


实际用途：电脑 cpu 进程的处理顺序，先进先出。


数组实现队列 - 使用循环数组的概念来实现，并且使用两个光标来标识队头与队尾
!图例


`,l:"algorithm/knowledges/数据结构.html#队列",a:"队列"},"23.10":{t:"运行程序的四大层次\r",p:`
堆(heap)：是动态的内存，能够在运行时增加或减少。
栈(stack)：用于函数的调用和局部变量的创建，(将递归的思路转为栈的思路，LIFO)
全局变量(global/static)：在 main ...`,l:"algorithm/knowledges/数据结构.html#运行程序的四大层次",a:"运行程序的四大层次"},"23.11":{t:"树\r",p:`

实际用法：
!


深度：root 根到 x 节点的最大路径


高度：叶节点到 x 节点的最大路径：空树的高度为-1，只有根节点时高度为 0


二叉树定义：有根，每个节点只有 0~2 的子节点 ...`,l:"algorithm/knowledges/数据结构.html#树",a:"树"},"23.12":{t:"二叉树实现\r",p:`普通二叉树实现
`,l:"algorithm/knowledges/数据结构.html#二叉树实现",a:"二叉树实现"},"23.13":{t:"完全二叉树\r",p:`//完美 or 满？？

完全二叉树的高度为 h = Math.floor(log(N)) (当只有一个根节点时，log(1) == 0 高度为 0)
完美二叉树的高度推导节点数：N = 2^(h + ...`,l:"algorithm/knowledges/数据结构.html#完全二叉树",a:"完全二叉树"},"23.14":{t:"二叉搜索树(Binary Search Tree)\r",p:`
重要定义：what is Binary Search Tree: 父节点的左子树中的所有节点都父节点小于或等于，右子树的所有节点比父节点大，(不只是左右节点，而是左右子树中的所有节点都必须遵循，后边 ...`,l:"algorithm/knowledges/数据结构.html#二叉搜索树-binary-search-tree",a:"二叉搜索树-binary-search-tree"},"23.15":{t:"一个之前没有考虑过的点(TIP)\r",p:"如前中后序遍历都需要一个 node 类型的指针作为参数，而二叉树中的 root 是类中的私有成员函数，这就导致我们没有办法使用在外部直接调用需要带 root 参数的函数，所以我们需要写一个公共的接口函 ...",l:"algorithm/knowledges/数据结构.html#一个之前没有考虑过的点-tip",a:"一个之前没有考虑过的点-tip"},"23.16":{t:"前缀和与差分\r",p:`
基础：容斥原理，即先不考虑多部分重叠的情况下加上所有部分后，再减去那些重叠的部分，留下一个没有重叠的平面。

`,l:"algorithm/knowledges/数据结构.html#前缀和与差分",a:"前缀和与差分"},"23.17":{t:"二维前缀和\r",p:`
g(x,y)表示的是从起点(1,1)到(x,y)这个部分矩阵的总和，也叫部分和

构建前缀和的公式:g[x][y] = g[x - 1][y] + g[x][y - 1] - g[x - 1][y  ...`,l:"algorithm/knowledges/数据结构.html#二维前缀和",a:"二维前缀和"},"23.18":{t:"基础差分\r",p:`// 差分数组的前缀和为arr数组的值
int sum(int x)
{
    int ans = 0;
    for (int i = 1; i &lt;= x; ++i)
    {
     ...`,l:"algorithm/knowledges/数据结构.html#基础差分",a:"基础差分"},"23.19":{t:"树状数组\r",p:`
树状数组和线段树具有相似的功能，但他俩毕竟还有一些区别：树状数组能有的操作，线段树一定有；线段树有的操作，树状数组不一定有。但是树状数组的代码要比线段树短，思维更清晰，速度也更快，在解决一些单点修改 ...`,l:"algorithm/knowledges/数据结构.html#树状数组",a:"树状数组"},"23.20":{t:"线段树\r",p:`
使用分治的方法来构建，同时使用结构体数组模拟链表来实现二叉树。
!

#define lc p &lt;&lt; 1 //2 p
#define rc p &lt;&lt; 1 | 1 // 2 p ...`,l:"algorithm/knowledges/数据结构.html#线段树",a:"线段树"},"23.21":{t:"并查集\r",p:`推荐博客

简单版本：
!

#include &lt;bits/stdc++.h&gt;
using namespace std;
const int MAX = 1e4 + 10;
vector& ...`,l:"algorithm/knowledges/数据结构.html#并查集",a:"并查集"},"23.22":{t:"单调栈\r",p:"\r",l:"algorithm/knowledges/数据结构.html#单调栈",a:"单调栈"},"23.23":{t:"单调队列\r",p:`!
经典例题：滑动窗口
“单调队列”即单调:单调递增或递减; 队列:说明有出队入队时间复杂度为 O(1);
可以使用 STL 的 deque 维护最大值或最小值。
**步骤1. 判断是否需要将队头出队 ...`,l:"algorithm/knowledges/数据结构.html#单调队列",a:"单调队列"},"23.24":{t:"使用 stl 中的 next_permutation 来求全排列数\r",p:`
用于求一个集合中的某些个数的值

可知，使用了 next_permutation 是不对数组自身进行操作的，所以我们可以将数组最后一位的值改为 1，然后逐渐地递减到 0，以达到所有的 0 都变成了  ...`,l:"algorithm/knowledges/数据结构.html#使用-stl-中的-next-permutation-来求全排列数",a:"使用-stl-中的-next-permutation-来求全排列数"},"23.25":{t:"深搜与广搜\r",p:`
代码框架

bool flag = 0;
void dfs(层数, 其他参数)
{
    if (出局判断)
    {
        return;
    }
    if (剪枝)
    ...`,l:"algorithm/knowledges/数据结构.html#深搜与广搜",a:"深搜与广搜"},"23.26":{t:"搜索求组合情况\r",p:`vector&lt;int&gt; num(MAX);
int n, r;
vector&lt;int&gt; ans;
void dfs(int cur, int sum)
{
    if (su ...`,l:"algorithm/knowledges/数据结构.html#搜索求组合情况",a:"搜索求组合情况"},"23.27":{t:"搜索求全排列\r",p:`#include &lt;bits/stdc++.h&gt;
using namespace std;
const int MAX = 10;
int n, m;
vector&lt;bool&gt; ...`,l:"algorithm/knowledges/数据结构.html#搜索求全排列",a:"搜索求全排列"},"23.28":{t:"回溯题目\r",p:`
DFS 深搜：通过画递归树来理解，汉罗塔，迷宫问题

`,l:"algorithm/knowledges/数据结构.html#回溯题目",a:"回溯题目"},"23.29":{t:"查找单词\r",p:`
题目链接

class Solution {
public:
    int n, m;
    int dx[4] = {1, 0, -1, 0};
    int dy[4] = {0, 1,  ...`,l:"algorithm/knowledges/数据结构.html#查找单词",a:"查找单词"},"23.30":{t:"连连看\r",p:`

题目链接
&lt;br&gt;


AC 码


#include &lt;bits/stdc++.h&gt;
using namespace std;
int n, m;
const int M ...`,l:"algorithm/knowledges/数据结构.html#连连看",a:"连连看"},"23.31":{t:"全球变暖\r",p:`

题目链接
&lt;br&gt;


AC 码


#include &lt;bits/stdc++.h&gt;
using namespace std;
const int MAX = 1010; ...`,l:"algorithm/knowledges/数据结构.html#全球变暖",a:"全球变暖"},"23.32":{t:"图\r",p:`

性质：


圈：为长度至少为 1 且起点和 1 终点相同(有向无圈图为 DAG


强连通：有向图中每个节点到其他节点都有路径。


弱连通：有向图的基础图(将其变为无向图)能够连通。


完全图 ...`,l:"algorithm/knowledges/数据结构.html#图",a:"图"},"23.33":{t:"邻边矩阵\r",p:`
优点：查找，修改等操作的时间复杂度为 O(1)
缺点：若为稀疏，则 V \\V 的空间复杂度过于浪费。稀疏因子---&gt; 非零/总数

`,l:"algorithm/knowledges/数据结构.html#邻边矩阵",a:"邻边矩阵"},"23.34":{t:"邻接表\r",p:`
优点：空间复杂度的优化
缺点：查找与修改时间复杂度为 Linkedlist 的复杂度(通过优化可以变成 O(logN))
(通过二叉搜索树来优化？)


`,l:"algorithm/knowledges/数据结构.html#邻接表",a:"邻接表"},"23.35":{t:"普通 Dijkstra 算法模板\r",p:`#include &lt;bits/stdc++.h&gt;
using namespace std;
#define inf INT_MAX
const int MAX = 1e3 + 10;
st ...`,l:"algorithm/knowledges/数据结构.html#普通-dijkstra-算法模板",a:"普通-dijkstra-算法模板"},"23.36":{t:"使用小根堆(大根堆取负)优化 Dijkstra\r",p:`
#include &lt;bits/stdc++.h&gt;
using namespace std;
#define inf INT_MAX
const int MAX = 1e3 + 10;
s ...`,l:"algorithm/knowledges/数据结构.html#使用小根堆-大根堆取负-优化-dijkstra",a:"使用小根堆-大根堆取负-优化-dijkstra"},"23.37":{t:"堆排序\r",p:`
创建一个最大最小堆
通过输出头部元素然后将尾部元素放到头部，通过上滤方法维护完全二叉树(将尾部元素提到前面也是为了维护维护完全二叉树)
自下而上
自上而下
拓展：堆排序就是优先队列的头部元素依次弹出 ...`,l:"algorithm/knowledges/数据结构.html#堆排序",a:"堆排序"},"23.38":{t:"快速排序\r",p:"\r",l:"algorithm/knowledges/数据结构.html#快速排序",a:"快速排序"},"23.39":{t:"拓扑排序\r",p:"\r",l:"algorithm/knowledges/数据结构.html#拓扑排序",a:"拓扑排序"},"23.40":{t:"排序算法时间的比较\r",p:`#include&lt;ctime&gt;
clock_t start = clock(), end = clock(); // 为该系统下的时钟打点数
int tick = CLK_TCK;//(常 ...`,l:"algorithm/knowledges/数据结构.html#排序算法时间的比较",a:"排序算法时间的比较"},"23.41":{t:"复习\r",p:`

数据项/数据元素

&quot;数据项&quot;通常指数据中不可再分的最小单位，可以是一个字母、数字、符号等。它是数据的基本组成单位之一，但不是数据的基本单位。数据的基本单位通常指整个数据元素， ...`,l:"algorithm/knowledges/数据结构.html#复习",a:"复习"},"23.42":{t:"入度和出度：\r",p:`
有向图的全部顶点入度和等于出度和，且等于边数
无向图的度数之和为边数的两倍，可以把其想象成每条边既有出和入度

路径长度和回路：
`,l:"algorithm/knowledges/数据结构.html#入度和出度",a:"入度和出度"},"23.43":{t:"图的存储结构：\r",p:`
邻接矩阵：空间肯定为：N * N, n 个顶点的无向连通图，至少有 2X(n - 1)个非零元素。(2 的原因是无向图为对称矩阵。n - 1 为连通图的最少边数)
邻接表

无向图：空间 O(V + ...`,l:"algorithm/knowledges/数据结构.html#图的存储结构",a:"图的存储结构"},"23.44":{t:"稀疏矩阵\r",p:`使用链表压缩存储相对于直接在开辟一个二维数组，空间利用率上更高，通过创建一个三元组(row, collumn, element)来按照列和行号来进行升序的排列。
`,l:"algorithm/knowledges/数据结构.html#稀疏矩阵",a:"稀疏矩阵"},"23.45":{t:"逆邻接表\r",p:`邻接表在有向图中使用的是出度，而逆邻接表示入度的节点数
&lt;img src=&quot;.img/../img/bitch_02.jpg&quot;/&gt;
且考试时，前边的 head 节点使用 ...`,l:"algorithm/knowledges/数据结构.html#逆邻接表",a:"逆邻接表"},"24.0":{t:"时间复杂度\r",p:`&lt;!-- ! --&gt;
在竞赛中，一般算机一秒能运行 5 x 10^8 次汁算，如果题目給出的时间限制カ 1s,那么你选择的算法执行的汁算次数最多应该在 10^8 量级オ有可能解决这个题目。 ...`,l:"algorithm/knowledges/时间复杂度.html",a:"时间复杂度"},"24.1":{t:"算法复杂度中 n 的范围对应的算法\r",p:`
n≤30n≤30, 指数级别, dfs+剪枝，状态压缩 dp
&lt;br&gt;
n≤100n≤100 =&gt; O(n3)O(n3)，floyd，dp，高斯消元
&lt;br&gt;
n≤10 ...`,l:"algorithm/knowledges/时间复杂度.html#算法复杂度中-n-的范围对应的算法",a:"算法复杂度中-n-的范围对应的算法"},"25.0":{t:"Greedy Algorithm\r",p:`
感觉核心就是通过自定义 sort 函数来实现当前最小，毕竟 sort 中两两数交换的时候和贪心的只考虑当前情况最优解的做法很相像。


将多个数拼出一个最大的数

    sort(arr, arr ...`,l:"algorithm/knowledges/贪心.html",a:"greedy-algorithm"},"26.0":{t:"分治思想\r",p:"\r",l:"algorithm/knowledges/递归与分治.html",a:"分治思想"},"26.1":{t:"快速幂(A ^ B mod C)\r",p:`
原理是利用了所有整数都是能够转换为二进制的形式。
将 B 转换为二进制，方法：P = 2 * (P/2) + P%2


则 B = 19 = 10011(自底向上) = 2^4 + 2^1 + 2 ...`,l:"algorithm/knowledges/递归与分治.html#快速幂-a-b-mod-c",a:"快速幂-a-b-mod-c"},"26.2":{t:"最大子段和\r",p:`#define int long long
const int MAX = 2e5 + 10;
int a[MAX] = {0};
const int inf = 1e17 + 10; // long ...`,l:"algorithm/knowledges/递归与分治.html#最大子段和",a:"最大子段和"},"26.3":{t:"归并排序(求逆序对)\r",p:`逆序对:
在升序的数组中发现 0 &lt; i &lt; j &lt; n and a[i] &gt; a[j] 说明 a[i] a[j] 为一个逆序对。又因为左边(l,mid)数组已经是有序的，所以 ...`,l:"algorithm/knowledges/递归与分治.html#归并排序-求逆序对",a:"归并排序-求逆序对"},"26.4":{t:"快速排序\r",p:`void quick(vi&amp; arr, int begin, int end) {
    // 递归，直到 start = end 为止
    if (begin &gt; end) re ...`,l:"algorithm/knowledges/递归与分治.html#快速排序",a:"快速排序"},"26.5":{t:"二分答案模板\r",p:`
时间复杂度问题：n --&gt; n / 2 --&gt; n / 4 --&gt; n / 8 --&gt; n / 2&lt;sup&gt;k&lt;/sup&gt; 为二分查找平分的步数
按照 ...`,l:"algorithm/knowledges/递归与分治.html#二分答案模板",a:"二分答案模板"},"26.6":{t:"区间二分\r",p:`求区间中小于 m 的最大和
void solve()// 看到序列不保证有序，但都大于0，想到了前缀和 + 二分
{
    n = read(), m = read();
    for (int  ...`,l:"algorithm/knowledges/递归与分治.html#区间二分",a:"区间二分"},"26.7":{t:"实数域二分(double 类)\r",p:`#include &lt;bits/stdc++.h&gt;
using namespace std;
#define int long long
const int MAX = 1e5 + 100; ...`,l:"algorithm/knowledges/递归与分治.html#实数域二分-double-类",a:"实数域二分-double-类"},"26.8":{t:"跳石头\r",p:`
难点为条件特判！

题解 P2678 【跳石头】 - ShawnZhou 的博客 - 洛谷博客 (luogu.com.cn)
#include &lt;bits/stdc++.h&gt;
using ...`,l:"algorithm/knowledges/递归与分治.html#跳石头",a:"跳石头"},"26.9":{t:"经典实数二分题\r",p:`A-Best Cow Fences_0x04 基本算法-二分 (nowcoder.com)
再次让我怀疑人生(bushi)

考点为: 通过数学问题转换, 即将 $\\sum_{i=1}^n$ num[ ...`,l:"algorithm/knowledges/递归与分治.html#经典实数二分题",a:"经典实数二分题"},"26.10":{t:"又是一道二分\r",p:`P1024 [NOIP2001 提高组] 一元三次方程求解 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)

考点在于实数二分，对于浮点数比较时需要通过使用定义 eps 来防止精度损 ...`,l:"algorithm/knowledges/递归与分治.html#又是一道二分",a:"又是一道二分"},"26.11":{t:"01 分数规划\r",p:`小咪买东西 (nowcoder.com)

考点为将题目中的公式转换成 sum &gt;= 0
即 $\\sum_{i=1}^n$num2[i] / $\\sum_{i=1}^n$num1[i] &gt; ...`,l:"algorithm/knowledges/递归与分治.html#_01-分数规划",a:"_01-分数规划"},"26.12":{t:"string vector 妙用\r",p:`
个人理解：string就是vector&lt;char&gt;的超集，因为相对于vector&lt;char&gt;，string库重载输入输出，而vector&lt;char&gt;是不能够类似于 ...`,l:"algorithm/knowledges/递归与分治.html#string-vector-妙用",a:"string-vector-妙用"},"26.13":{t:"递归/递推\r",p:"\r",l:"algorithm/knowledges/递归与分治.html#递归-递推",a:"递归-递推"},"26.14":{t:"递归思路\r",p:`!

经典的斐波那契问题

注意：若没有使用记忆化，递归调用会过多



int fib(int n)// 递归写法
{
    return (n &lt; 2) ? 1 : fib(n - 1)  ...`,l:"algorithm/knowledges/递归与分治.html#递归思路",a:"递归思路"},"26.15":{t:"递推算法\r",p:`覆盖墙壁(链接)
思路：
!
`,l:"algorithm/knowledges/递归与分治.html#递推算法",a:"递推算法"},"27.0":{t:"# Runtime API Examples\r",p:`This page demonstrates usage of some of the runtime APIs provided by VitePress.
The main useData() A ...`,l:"api-examples.html",a:"runtime-api-examples"},"27.1":{t:"Results\r",p:"\r",l:"api-examples.html#results",a:"results"},"27.2":{t:"Theme Data\r",p:`&lt;pre&gt;{{ theme }}&lt;/pre&gt;
`,l:"api-examples.html#theme-data",a:"theme-data"},"27.3":{t:"Page Data\r",p:`&lt;pre&gt;{{ page }}&lt;/pre&gt;
`,l:"api-examples.html#page-data",a:"page-data"},"27.4":{t:"Page Frontmatter\r",p:`&lt;pre&gt;{{ frontmatter }}&lt;/pre&gt;




`,l:"api-examples.html#page-frontmatter",a:"page-frontmatter"},"27.5":{t:"Results\r",p:"\r",l:"api-examples.html#results",a:"results"},"27.6":{t:"Theme Data\r",p:`&lt;pre&gt;{{ theme }}&lt;/pre&gt;
`,l:"api-examples.html#theme-data",a:"theme-data"},"27.7":{t:"Page Data\r",p:`&lt;pre&gt;{{ page }}&lt;/pre&gt;
`,l:"api-examples.html#page-data",a:"page-data"},"27.8":{t:"Page Frontmatter\r",p:`&lt;pre&gt;{{ frontmatter }}&lt;/pre&gt;
`,l:"api-examples.html#page-frontmatter",a:"page-frontmatter"},"27.9":{t:"More\r",p:`Check out the documentation for the full list of runtime APIs.
`,l:"api-examples.html#more",a:"more"},"29.0":{t:"index.md",p:"",l:"back-end/java/index.html",a:"index-md"},"30.0":{t:"index.md",p:"",l:"back-end/node/index.html",a:"index-md"},"31.0":{t:"index.md\r",p:`nihao
`,l:"back-end/springboot/index.html",a:"index-md"},"33.0":{t:"2023-11-14：\r",p:`解决vscode目录中文件图标间隔
vscode 调整文件夹目录缩进大小_vscode 文件树大小-CSDN博客
在markdown中如果写入一个&lt;set&gt;但没有使用反引号，则会报错，说是 ...`,l:"daily/2023-11-14.html",a:"_2023-11-14"},"34.0":{t:"2023-11-16:",p:`自动生成侧边栏内容：
参考链接：https://www.bilibili.com/video/BV1ZC4y1m7sj/
:::details gen_sidebar.js
import path f ...`,l:"daily/2023-11-16.html",a:"_2023-11-16"},"35.0":{t:"2023-11-18:\r",p:`
使用python批量处理文件中C++{.line-number}改为c++:line-number

:::details 点击查看代码
import os
import re


def proc ...`,l:"daily/2023-11-18.html",a:"_2023-11-18"},"36.0":{t:"2023-11-19",p:`添加了全局搜索功能，可以搜索文章标题和内容。
参考链接：https://chodocs.cn/program/vitepress-local-search/
`,l:"daily/2023-11-19.html",a:"_2023-11-19"},"37.0":{t:"2023-11-20:",p:`
今天蓝桥杯模拟赛选拔免费参加蓝桥杯省赛的资格，再一次地感受到了什么叫做差距，有人20分钟写完润了，有人还在被题卡一个多小时。
剩下的就是等待蓝桥杯排名，

`,l:"daily/2023-11-20.html",a:"_2023-11-20"},"38.0":{t:"2023-11-21：",p:`创建了pwa能够更好的使用手机来查看
参考链接: https://juejin.cn/post/7257029848971673661
`,l:"daily/2023-11-21.html",a:"_2023-11-21"},"39.0":{t:"2023-11-22:",p:`markdown =&gt; ppt
水视频：做edg每个选手的成长数据，通过从vlr.gg拿到数据，然后python爬取制作图片之类等等。
学习一下流程: WPS AI + Chatgpt + mi ...`,l:"daily/2023-11-22.html",a:"_2023-11-22"},"40.0":{t:"2023-11-23:",p:`git checkout -b master
git push origin master
error: src refspec main does not match any
error: fail ...`,l:"daily/2023-11-23.html",a:"_2023-11-23"},"41.0":{t:"TODO: create what basic template",p:"",l:"daily/basic.html",a:"todo-create-what-basic-template"},"42.0":{t:"记录每天遇到的坑点\r",p:`
感觉好多学了都忘记了，还是得记录;....

`,l:"daily/index.html",a:"记录每天遇到的坑点"},"43.0":{t:"Here is Database",p:"",l:"database/mysql/index.html",a:"here-is-database"},"44.0":{t:"<BookmarkVue></BookmarkVue>",p:`&lt;ElementTestVue&gt;&lt;/ElementTestVue&gt;
&lt;!-- &lt;UnocssTestVue&gt;&lt;/UnocssTestVue&gt; -- ...`,l:"demos/index.html",a:"bookmarkvue-bookmarkvue"},"45.0":{t:"# here is example index",p:"",l:"example/index.html",a:"here-is-example-index"},"46.0":{t:"# Markdown Extension Examples\r",p:`This page demonstrates some of the built-in markdown extensions provided by VitePress.
`,l:"example/markdown-examples.html",a:"markdown-extension-examples"},"46.1":{t:"Syntax Highlighting \r",p:"VitePress provides Syntax Highlighting powered by Shiki, with additional features like line-highligh ...",l:"example/markdown-examples.html#syntax-highlighting",a:"syntax-highlighting"},"46.2":{t:"Custom Containers\r",p:`Input
::: info
This is an info box.
:::

::: tip
This is a tip.
:::

::: warning
This is a warning.
 ...`,l:"example/markdown-examples.html#custom-containers",a:"custom-containers"},"46.3":{t:"More\r",p:`Check out the documentation for the full list of markdown extensions.
`,l:"example/markdown-examples.html#more",a:"more"},"47.0":{t:"Here is HTML",p:"",l:"front-end/html-css-js/index.html",a:"here-is-html"},"49.0":{t:"# hello world",p:"",l:"front-end/vue/hello.html",a:"hello-world"},"50.0":{t:"Here is Vue",p:`Here is Vue
`,l:"front-end/vue/index.html",a:"here-is-vue"},"52.0":{t:"<!-- !heroimage -->\r",p:`&lt;div class=&quot;wrap-img&quot;&gt;
&lt;img src=&quot;https://gh.stupidsheep.fun/api/wakatime?use ...`,l:"index.html",a:"heroimage"}},e={previewLength:100,buttonLabel:"搜索",placeholder:"请输入关键词",allow:[],ignore:[]},l={INDEX_DATA:t,PREVIEW_LOOKUP:n,Options:e};export{l as default};
