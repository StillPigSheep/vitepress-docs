import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.24d42a1d.js";const A=JSON.parse('{"title":"STL 数据结构","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/knowledges/dataStructor.md","filePath":"algorithm/knowledges/dataStructor.md"}'),p={name:"algorithm/knowledges/dataStructor.md"},o=l(`<h1 id="stl-数据结构" tabindex="-1">STL 数据结构 <a class="header-anchor" href="#stl-数据结构" aria-label="Permalink to &quot;STL 数据结构&quot;">​</a></h1><h2 id="unordered-map" tabindex="-1">unordered_map <a class="header-anchor" href="#unordered-map" aria-label="Permalink to &quot;unordered_map&quot;">​</a></h2><ul><li>遍历的方法</li><li><code>unordered_map&lt;string,int&gt;human</code></li></ul><ol><li><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">pair</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> string</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;">wir </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> human</span><span style="color:#89DDFF;">)</span><span style="color:#464B5D;font-style:italic;"> // 引用传递</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> pair</span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">string</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;">wir </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> human</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">auto</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;"> wir </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> human</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> wir</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">first </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> wir</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">second </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> endl</span><span style="color:#89DDFF;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(pair</span><span style="color:#D73A49;">&lt;const</span><span style="color:#24292E;"> string,</span><span style="color:#D73A49;">int&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">wir : human)</span><span style="color:#6A737D;"> // 引用传递</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> pair</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">string, </span><span style="color:#D73A49;">int&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">wir : human)</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> wir : human)</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> wir.first </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> wir.second </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span></code></pre></div></li><li><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">auto</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&amp;[</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">]</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> human</span><span style="color:#89DDFF;">)</span><span style="color:#464B5D;font-style:italic;"> // C++17</span></span>
<span class="line"><span style="color:#BABED8;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> key </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> value </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> endl</span><span style="color:#89DDFF;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">[key,value] : human)</span><span style="color:#6A737D;"> // C++17</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span></code></pre></div></li><li><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">auto</span><span style="color:#BABED8;"> it </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> human</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">begin</span><span style="color:#89DDFF;">();</span><span style="color:#BABED8;"> it </span><span style="color:#89DDFF;">!=</span><span style="color:#BABED8;"> human</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#89DDFF;">();</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">it</span><span style="color:#89DDFF;">)</span><span style="color:#464B5D;font-style:italic;"> // 迭代器</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unordered_map</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;::</span><span style="color:#BABED8;">iterator it </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> ...</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> it</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;">first </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> it</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;">second </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> endl</span><span style="color:#89DDFF;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> it </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> human.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(); it </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> human.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(); </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">it)</span><span style="color:#6A737D;"> // 迭代器</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">unordered_map</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;::iterator it </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ...)</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> it-&gt;first </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> it-&gt;second </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span></code></pre></div></li></ol><ul><li><p>无法自定义结构体类型 struct 和 pair 键值对来作为 unordered_map 的下标，但可以用 pair 键值对在 map 中。</p><blockquote><p>问题分析:由于 C++中没有 pair 类型的 Hash 函数，而 unordened_map 中又正好用 std::hash 来计算 key，所以当 pair 作为 unordered_map 的 key 时会出现编译错误。 问题解决:我们可以将 unordered_map 换成 map，因为 map 是通过操作符〈来比较 key 的大小，而 pair 是可以比较大小的。所以，当我们需要使用 pair 类型作为 key 时，可以使用 map 。</p></blockquote></li></ul><p>当需要使用三元组来作为下标时(因为 struct 无法使用，且 pair 在 unordered_map 中无法使用)，可以使用<code>map&lt;pair&lt;int, pair&lt;int, int&gt;&gt;, int&gt; num;</code></p><h2 id="priority-queue-优先队列" tabindex="-1">priority_queue 优先队列 <a class="header-anchor" href="#priority-queue-优先队列" aria-label="Permalink to &quot;priority_queue 优先队列&quot;">​</a></h2><ul><li>功能： <ol><li>num.top()</li><li>num.empty()</li><li>num.push(x)</li><li>num.pop()</li><li>num.size()</li></ol></li><li>通过大根堆来实现的队列，所以默认为队列头部为最大值</li><li>从小到大则需要：<code>priority_queue&lt;int,vector&lt;int&gt;,::greater&lt;int&gt;&gt;num;</code>，或使用负数插入</li><li>插入删除的时间复杂度为 O(1), 排序的时间复杂度为 O(logN)，且不能够随机访问</li><li>使用仿函数来自定义比较函数</li></ul><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">bits/stdc++.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">node</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> priority</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">    //默认是优先级最高的先输出，所以在重载小于号后，如果是id &gt; other.id 会以从小到大输出（一般的其他自定义比较函数都是当 id &gt; other.id 时，按大到小输出排序，优先队列较为特殊）</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">operator</span><span style="color:#FFCB6B;">&lt;</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">node</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">&amp;</span><span style="color:#BABED8;font-style:italic;">other</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> priority </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">other</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">priority</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">        // return id &gt; other.id;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#BABED8;">priority_queue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">node</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        node tmp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">tmp</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">tmp</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">priority</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">tmp</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">top</span><span style="color:#89DDFF;">().</span><span style="color:#BABED8;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">top</span><span style="color:#89DDFF;">().</span><span style="color:#BABED8;">priority</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> priority;</span></span>
<span class="line"><span style="color:#6A737D;">    //默认是优先级最高的先输出，所以在重载小于号后，如果是id &gt; other.id 会以从小到大输出（一般的其他自定义比较函数都是当 id &gt; other.id 时，按大到小输出排序，优先队列较为特殊）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">&lt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">other</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> priority </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> other.priority;</span></span>
<span class="line"><span style="color:#6A737D;">        // return id &gt; other.id;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">priority_queue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">node</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> nums;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">    cin </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        node tmp;</span></span>
<span class="line"><span style="color:#24292E;">        cin </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> tmp.id </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> tmp.priority;</span></span>
<span class="line"><span style="color:#24292E;">        nums.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(tmp);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (nums.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> nums.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">().id </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> nums.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">().priority </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span>
<span class="line"><span style="color:#24292E;">        nums.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>不需要写到函数定义中去，<code>priority_queue&lt;node&gt;</code></li></ul><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">myStruct</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    string str</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">queue_cmp</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">operator</span><span style="color:#FFCB6B;">()</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">myStruct</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">&amp;</span><span style="color:#BABED8;font-style:italic;">p1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">myStruct</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">&amp;</span><span style="color:#BABED8;font-style:italic;">p2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">p1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">str</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">p2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">str</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">p2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">str</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">p1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">str</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myStruct</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    string str;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">queue_cmp</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">()</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myStruct</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myStruct</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> p1.str </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p2.str </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> p2.str </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p1.str;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><ul><li>类型定义：<code>priority_queue&lt;myStruct,vector&lt;myStruct&gt;,queue_cmp&gt;</code></li></ul><hr><p>另一个作用是返回排完序后的前 k 个元素: 和<code>partial_sort(start, start + count, end [, func]);</code></p><blockquote><p>从运行结果来看， 对局部进行排序时，序列的前 n 个最小的元素放在序列的前 n 个位置，其余的放在序列的后面未进行排序。</p></blockquote><p>以上。</p><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">solve</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> tmp</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> tmp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> tmp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">que</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(-</span><span style="color:#BABED8;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> t </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">t</span><span style="color:#89DDFF;">--)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">que</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">top</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">que</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#82AAFF;">partial_sort</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">begin</span><span style="color:#89DDFF;">(),</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">begin</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">begin</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">10</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">3 8 2 13 5 3 1 4 6 8</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">5</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">3 8 2 13 5 3 1 4 6 8</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">1 2 3 3 4</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">1 2 3 3 4 13 8 5 6 8 : k后的元素就没有排了。</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">solve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">    cin </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, tmp; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        cin </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> tmp;</span></span>
<span class="line"><span style="color:#24292E;">        arr[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp;</span></span>
<span class="line"><span style="color:#24292E;">        que.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">arr[i]);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> k;</span></span>
<span class="line"><span style="color:#24292E;">    cin </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> k;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> k;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> arr[i] </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (t</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">que.</span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        que.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">partial_sort</span><span style="color:#24292E;">(arr.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), arr.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> k, arr.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> n);</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> arr[i] </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">10</span></span>
<span class="line"><span style="color:#6A737D;">3 8 2 13 5 3 1 4 6 8</span></span>
<span class="line"><span style="color:#6A737D;">5</span></span>
<span class="line"><span style="color:#6A737D;">3 8 2 13 5 3 1 4 6 8</span></span>
<span class="line"><span style="color:#6A737D;">1 2 3 3 4</span></span>
<span class="line"><span style="color:#6A737D;">1 2 3 3 4 13 8 5 6 8 : k后的元素就没有排了。</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><h2 id="set-与-vector-使用" tabindex="-1">set 与 vector 使用 <a class="header-anchor" href="#set-与-vector-使用" aria-label="Permalink to &quot;set 与 vector 使用&quot;">​</a></h2><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#BABED8;">    vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> nums </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">457</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">75</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">112</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">212</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#FFCB6B;">set</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">nums2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">nums</span><span style="color:#BABED8;">.</span><span style="color:#82AAFF;">begin</span><span style="color:#89DDFF;">(),</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">nums</span><span style="color:#BABED8;">.</span><span style="color:#82AAFF;">end</span><span style="color:#89DDFF;">());</span><span style="color:#464B5D;font-style:italic;"> //去重加排序</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#FFCB6B;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">nums3</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">nums2</span><span style="color:#BABED8;">.</span><span style="color:#82AAFF;">begin</span><span style="color:#89DDFF;">(),</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">nums2</span><span style="color:#BABED8;">.</span><span style="color:#82AAFF;">end</span><span style="color:#89DDFF;">());</span><span style="color:#464B5D;font-style:italic;"> //回来等同于unique(begin,end);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> nums </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">457</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">75</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">112</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">212</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">nums2</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nums</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">nums</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">());</span><span style="color:#6A737D;"> //去重加排序</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">nums3</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nums2</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">nums2</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">());</span><span style="color:#6A737D;"> //回来等同于unique(begin,end);</span></span></code></pre></div><h2 id="使用-struct-来当作键的话" tabindex="-1">使用 struct 来当作键的话 <a class="header-anchor" href="#使用-struct-来当作键的话" aria-label="Permalink to &quot;使用 struct 来当作键的话&quot;">​</a></h2><p>可以使用 map 和 set，而不能使用<code>unordered_map&lt;node, int&gt;</code> 原因是 map，set 是使用树结构来排序和创建的，而 unordered_map 使用的是 hash 映射的。</p><blockquote><p>注意：用 set 或 map 时，结构体 node 的比较函数只按照 x 的大小进行比较，而没有考虑 y 的大小。如果两个 node 的 x 相同，但 y 不同，它们在 set 中被视为相等，可能会导致找不到某些元素。</p></blockquote><p><strong>需要 x,y 都考虑。</strong></p><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">node</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">operator</span><span style="color:#FFCB6B;">&lt;</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">&amp;</span><span style="color:#FFCB6B;">node</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">nextt</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">x </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">nextt</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> x </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">nextt</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> y </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">nextt</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">// 或者说如果没有硬性要求顺序的问题的话，则可以直接使用set&lt;set&lt;int&gt;&gt;两层set，内部的set用来存x,y</span></span>
<span class="line"><span style="color:#F07178;">set</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;">nums</span><span style="color:#89DDFF;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x, y;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">&lt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nextt</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nextt.x)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> nextt.x;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> nextt.y;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 或者说如果没有硬性要求顺序的问题的话，则可以直接使用set&lt;set&lt;int&gt;&gt;两层set，内部的set用来存x,y</span></span>
<span class="line"><span style="color:#24292E;">set</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">set</span><span style="color:#D73A49;">&lt;int&gt;&gt;</span><span style="color:#24292E;">nums;</span></span></code></pre></div><blockquote><p>解释： 原因是 set 容器内部使用红黑树实现，红黑树是一种自平衡的二叉搜索树，它要求节点之间必须满足一定的顺序关系，否则会影响查找、插入、删除等操作的正确性和效率。对于 set，如果两个 node 的 x 值相同，但 y 值不同，它们放在同一个节点上，会破坏红黑树的平衡性，导致查找操作出现问题。而对于<code>set&lt;set&gt;</code>，每个 set 被视为一个独立的元素，它们之间不存在任何顺序关系，因此不会出现上述问题。</p></blockquote><h2 id="emplace-but-not-push" tabindex="-1">emplace but not push <a class="header-anchor" href="#emplace-but-not-push" aria-label="Permalink to &quot;emplace but not push&quot;">​</a></h2><p><code>emplace()、emplace_back() 和 emplace_front()</code> 都是用于以更高效的方式在容器中构造元素的函数，可以避免不必要的元素复制或移动，提高程序的性能。</p><p>example:</p><blockquote><p>在当其结构体中有自定义函数的情况下，如果使用 push 来传入对象，则需要先创建一个临时对象，<code>node(tmp1, tmp2)</code> or <code>node node1(tmp1, tmp2)</code>，然后再 <code>q.push(node1)</code>。而使用<code>emplace</code>时，不需要有这个过程，可直接当作类对象的创建<code>q.emplace(tmp1, tmp2)</code></p></blockquote><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">bits/stdc++.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">node</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> x1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> x2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> x3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> x4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">node</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">x1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">x2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">x3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">x4</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this-&gt;</span><span style="color:#BABED8;">x1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> x1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this-&gt;</span><span style="color:#BABED8;">x2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> x2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this-&gt;</span><span style="color:#BABED8;">x3</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> x3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this-&gt;</span><span style="color:#BABED8;">x4</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> x4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    queue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">node</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> tmp1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> tmp2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> tmp3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> tmp4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        cin </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> tmp1 </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> tmp2 </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> tmp3 </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> tmp4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">        // node node1(tmp1, tmp2, tmp3, tmp4);</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">        // nums.push(node1);</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">        // nums.emplace(tmp1, tmp2, tmp3, tmp4);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">empty</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">front</span><span style="color:#89DDFF;">().</span><span style="color:#BABED8;">x1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">front</span><span style="color:#89DDFF;">().</span><span style="color:#BABED8;">x2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">front</span><span style="color:#89DDFF;">().</span><span style="color:#BABED8;">x3</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">front</span><span style="color:#89DDFF;">().</span><span style="color:#BABED8;">x4</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x1, x2, x3, x4;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x2</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x3</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;x1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x1,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;x2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x2,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;x3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x3,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;x4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x4;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    queue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">node</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> nums;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">    cin </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> tmp1, tmp2, tmp3, tmp4;</span></span>
<span class="line"><span style="color:#24292E;">        cin </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> tmp1 </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> tmp2 </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> tmp3 </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> tmp4;</span></span>
<span class="line"><span style="color:#6A737D;">        // node node1(tmp1, tmp2, tmp3, tmp4);</span></span>
<span class="line"><span style="color:#6A737D;">        // nums.push(node1);</span></span>
<span class="line"><span style="color:#6A737D;">        // nums.emplace(tmp1, tmp2, tmp3, tmp4);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">nums.</span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> nums.</span><span style="color:#6F42C1;">front</span><span style="color:#24292E;">().x1 </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> nums.</span><span style="color:#6F42C1;">front</span><span style="color:#24292E;">().x2 </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> nums.</span><span style="color:#6F42C1;">front</span><span style="color:#24292E;">().x3 </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> nums.</span><span style="color:#6F42C1;">front</span><span style="color:#24292E;">().x4 </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span>
<span class="line"><span style="color:#24292E;">        nums.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,30),t=[o];function e(c,r,y,D,F,i){return n(),a("div",null,t)}const B=s(p,[["render",e]]);export{A as __pageData,B as default};
