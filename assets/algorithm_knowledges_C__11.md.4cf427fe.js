import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.42a4ab43.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/knowledges/C++11.md","filePath":"algorithm/knowledges/C++11.md"}'),p={name:"algorithm/knowledges/C++11.md"},o=l(`<h2 id="c-11-特性" tabindex="-1">C++11 特性 <a class="header-anchor" href="#c-11-特性" aria-label="Permalink to &quot;C++11 特性&quot;">​</a></h2><h5 id="stringstream" tabindex="-1">stringstream <a class="header-anchor" href="#stringstream" aria-label="Permalink to &quot;stringstream&quot;">​</a></h5><p>判断 stringstream 是否为空：<code>st.rdbuf() -&gt; in_avail() == 0</code></p><h5 id="lambda-匿名函数" tabindex="-1">lambda 匿名函数 <a class="header-anchor" href="#lambda-匿名函数" aria-label="Permalink to &quot;lambda 匿名函数&quot;">​</a></h5><p><a href="https://zhuanlan.zhihu.com/p/384314474" target="_blank" rel="noreferrer">文章链接</a></p><ul><li>代码格式</li></ul><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#464B5D;font-style:italic;">// 四种写法</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">// 1.</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">auto</span><span style="color:#BABED8;"> func1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[]()-&gt;</span><span style="color:#C792EA;">int{return</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">...;};</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">// 2.能够通过return的类型或void类型，可以省去-&gt;int</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">auto</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">func2</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">[](){return</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">...;};</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">// 3.不需要传入参数</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">auto</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">func3</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">[]{return</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">...;};</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">// 4.</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">auto</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">func4</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">[]&lt;tparams&gt;()-&gt;int{return</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">...;};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 四种写法</span></span>
<span class="line"><span style="color:#6A737D;">// 1.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> func1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []()-&gt;</span><span style="color:#D73A49;">int{return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...;};</span></span>
<span class="line"><span style="color:#6A737D;">// 2.能够通过return的类型或void类型，可以省去-&gt;int</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">[](){return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...;};</span></span>
<span class="line"><span style="color:#6A737D;">// 3.不需要传入参数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">[]{return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...;};</span></span>
<span class="line"><span style="color:#6A737D;">// 4.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">[]&lt;tparams&gt;()-&gt;int{return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...;};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>lambda 函数 captures 捕获列表</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#babed8;">[] 什么也不捕获，无法lambda函数体使用任何外部变量</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">[=] 按值的方式捕获所有变量</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">[&amp;] 按引用的方式捕获所有变量</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">可能的写法：</span></span>
<span class="line"><span style="color:#babed8;">1. [=, &amp;a, &amp;b] ：除了a,b使用引用传入外，其他变量使用值传递</span></span>
<span class="line"><span style="color:#babed8;">2. [&amp;, a, b] ：除了a,b值传递外，其他变量使用引用传递</span></span>
<span class="line"><span style="color:#babed8;">3. [=, &amp;a, =b] ：错误的，后边必须都是&amp;引用 会报warning</span></span>
<span class="line"><span style="color:#babed8;">4. [a, &amp;b]</span></span>
<span class="line"><span style="color:#babed8;">5. [&amp;a, b]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[] 什么也不捕获，无法lambda函数体使用任何外部变量</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">[=] 按值的方式捕获所有变量</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">[&amp;] 按引用的方式捕获所有变量</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">可能的写法：</span></span>
<span class="line"><span style="color:#24292e;">1. [=, &amp;a, &amp;b] ：除了a,b使用引用传入外，其他变量使用值传递</span></span>
<span class="line"><span style="color:#24292e;">2. [&amp;, a, b] ：除了a,b值传递外，其他变量使用引用传递</span></span>
<span class="line"><span style="color:#24292e;">3. [=, &amp;a, =b] ：错误的，后边必须都是&amp;引用 会报warning</span></span>
<span class="line"><span style="color:#24292e;">4. [a, &amp;b]</span></span>
<span class="line"><span style="color:#24292e;">5. [&amp;a, b]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>编译器对于 lambda 会将其翻译成一个类，然后捕获的值为类的 private，若传入的都是值传递，operator()成员函数为 const 类型，有一个引用传递，则不是 const</li></ul><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#BABED8;"> plus </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[=]</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> y </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> b</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">plus</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">LambdaClass</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">LambdaClass</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">xx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">yy</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">xx</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">y</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">yy</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">operator</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> y </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#F07178;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">LambdaClass</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">plus</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">y</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">plus</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> plus </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">] (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) -&gt; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b; };</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">plus</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LambdaClass</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">LambdaClass</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">xx</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">yy</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    : </span><span style="color:#6F42C1;">x</span><span style="color:#24292E;">(xx), </span><span style="color:#6F42C1;">y</span><span style="color:#24292E;">(yy) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">()</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">LambdaClass</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">plus</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">x</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">y</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">plus</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>捕获变量都是值传递，operator 为 const 类型，不能对值修改，否则会报错 <code>error: increment of read-only variable &#39;x&#39; { x++; return x + y + a + b; };</code> 则可以加上 mutable <code>int x = 1; int y = 2; auto plus = [=] (int a, int b) mutable -&gt; int { x++; return x + y + a + b; }; int c = plus(1, 2);</code></p><h5 id="thread-线程" tabindex="-1">thread 线程 <a class="header-anchor" href="#thread-线程" aria-label="Permalink to &quot;thread 线程&quot;">​</a></h5><p><a href="https://zhuanlan.zhihu.com/p/354676653" target="_blank" rel="noreferrer">文章链接</a></p><h5 id="函数传入函数参数" tabindex="-1">函数传入函数参数 <a class="header-anchor" href="#函数传入函数参数" aria-label="Permalink to &quot;函数传入函数参数&quot;">​</a></h5>`,15),e=[o];function t(c,r,y,i,D,F){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{b as __pageData,A as default};
