import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.42a4ab43.js";const u=JSON.parse('{"title":"杂类","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/knowledges/Tip+C++newthing.md","filePath":"algorithm/knowledges/Tip+C++newthing.md"}'),p={name:"algorithm/knowledges/Tip+C++newthing.md"},o=l(`<h1 id="杂类" tabindex="-1">杂类 <a class="header-anchor" href="#杂类" aria-label="Permalink to &quot;杂类&quot;">​</a></h1><h3 id="一些小技巧" tabindex="-1">一些小技巧 <a class="header-anchor" href="#一些小技巧" aria-label="Permalink to &quot;一些小技巧&quot;">​</a></h3><h4 id="输入输出重定向" tabindex="-1">输入输出重定向 <a class="header-anchor" href="#输入输出重定向" aria-label="Permalink to &quot;输入输出重定向&quot;">​</a></h4><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#82AAFF;">freopen</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">in.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">r</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">stdin</span><span style="color:#89DDFF;">);</span><span style="color:#464B5D;font-style:italic;"> //输入重定向，输入数据将从in.txt文件中读取</span></span>
<span class="line"><span style="color:#82AAFF;">freopen</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">out.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">w</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">stdout</span><span style="color:#89DDFF;">);</span><span style="color:#464B5D;font-style:italic;"> //输出重定向，输出数据将保存out.txt文件中</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">freopen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;in.txt&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;r&quot;</span><span style="color:#24292E;">,stdin);</span><span style="color:#6A737D;"> //输入重定向，输入数据将从in.txt文件中读取</span></span>
<span class="line"><span style="color:#6F42C1;">freopen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;out.txt&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;w&quot;</span><span style="color:#24292E;">,stdout);</span><span style="color:#6A737D;"> //输出重定向，输出数据将保存out.txt文件中</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><br><h4 id="快读快写" tabindex="-1">快读快写 <a class="header-anchor" href="#快读快写" aria-label="Permalink to &quot;快读快写&quot;">​</a></h4><blockquote><p><strong>一般地，在我们比赛/刷题过程中，当输入数字数量(次数)超过 $ 5 \\times 10^{4} $时使用它</strong></p></blockquote><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#C792EA;">inline</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> f </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">char</span><span style="color:#BABED8;"> ch </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">getchar</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">ch </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">||</span><span style="color:#BABED8;"> ch </span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">9</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#464B5D;font-style:italic;"> // 防止 cin 和 read 混用后出问题</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ch </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">            f </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        ch </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getchar</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">ch </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#BABED8;"> ch </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">9</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        x </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">x </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">x </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ch </span><span style="color:#89DDFF;">^</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">48</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#464B5D;font-style:italic;">        //等价于 x = (x + (x &lt;&lt; 2))&lt;&lt; 1 + (ch ^ 48);</span></span>
<span class="line"><span style="color:#F07178;">        ch </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getchar</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> x </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> ch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getchar</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(ch </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> ch </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;9&#39;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;"> // 防止 cin 和 read 混用后出问题</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(ch </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        ch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getchar</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(ch </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> ch </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;9&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (ch </span><span style="color:#D73A49;">^</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">48</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">        //等价于 x = (x + (x &lt;&lt; 2))&lt;&lt; 1 + (ch ^ 48);</span></span>
<span class="line"><span style="color:#24292E;">        ch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getchar</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> f;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li><code>(x &lt;&lt; 1) + (x &lt;&lt; 3) === (x * 10)</code></li><li><code>(ch ^ 48) === (ch - &#39;0&#39;)</code><blockquote><p><strong>快写比较少用</strong></p></blockquote></li></ul><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#C792EA;">inline</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">void</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">x </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    	</span><span style="color:#82AAFF;">putchar</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">		x </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">x </span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">		</span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">x </span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#82AAFF;">putchar</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">x </span><span style="color:#89DDFF;">%</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">putchar</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">x;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">putchar</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>一般情况下，使用<code>ios::sync_with_stdio(false), cin.tie(nullptr);</code> 也是可以的，但不能够使用<code>stdio.h</code>库中的<code>printf</code> <code>getchar()</code></li><li>案例：使用上边手写快读后，若加上<code>ios::</code> 会导致<strong>出错</strong>，所以将<code>read()</code>函数中的<code>getchar()</code> 改为<code>cin.get()</code><a href="https://blog.csdn.net/ljw_study_in_CSDN/article/details/114838633" target="_blank" rel="noreferrer">解释链接</a></li></ul><h3 id="c-line-numbers新特性" tabindex="-1">c++:line-numbers新特性 <a class="header-anchor" href="#c-line-numbers新特性" aria-label="Permalink to &quot;c++:line-numbers新特性&quot;">​</a></h3><h4 id="jiangly-的习惯" tabindex="-1">jiangly 的习惯 <a class="header-anchor" href="#jiangly-的习惯" aria-label="Permalink to &quot;jiangly 的习惯&quot;">​</a></h4><p><code>cout &lt;&lt; ... &lt;&lt; &quot;\\n&quot;[i != n];</code> 等同于 <code>cout &lt;&lt; ... &lt;&lt; (i!=n)?&#39;\\0&#39;:&#39;\\n&#39;;</code></p><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#89DDFF;">+--------+--------+</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">\\n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">\\0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#89DDFF;">+--------+--------+</span></span>
<span class="line"><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">        </span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">          </span><span style="color:#89DDFF;">&lt;--</span><span style="color:#BABED8;"> Offset</span></span>
<span class="line"><span style="color:#89DDFF;">false</span><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">true</span><span style="color:#BABED8;">       </span><span style="color:#89DDFF;">&lt;--</span><span style="color:#BABED8;"> Result of </span><span style="color:#82AAFF;">condition</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">a </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> n</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">a </span><span style="color:#89DDFF;">!=</span><span style="color:#BABED8;"> n   a </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> n     </span><span style="color:#89DDFF;">&lt;--</span><span style="color:#BABED8;"> Case</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">+--------+--------+</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\0</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#D73A49;">+--------+--------+</span></span>
<span class="line"><span style="color:#005CC5;">0</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">          </span><span style="color:#D73A49;">&lt;--</span><span style="color:#24292E;"> Offset</span></span>
<span class="line"><span style="color:#005CC5;">false</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">       </span><span style="color:#D73A49;">&lt;--</span><span style="color:#24292E;"> Result of </span><span style="color:#6F42C1;">condition</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> n)</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> n   a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> n     </span><span style="color:#D73A49;">&lt;--</span><span style="color:#24292E;"> Case</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>要把中括号内的东西看成数组的索引，因为只有两种可能，索引为 0，1；索引为 0 时则为他自己本身，为 1 则为类似于数组越界，为&#39;\\0&#39;</p></blockquote><h4 id="关于-c-line-numbers中结构体" tabindex="-1">关于 c++:line-numbers中结构体 <a class="header-anchor" href="#关于-c-line-numbers中结构体" aria-label="Permalink to &quot;关于 c++:line-numbers中结构体&quot;">​</a></h4><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#464B5D;font-style:italic;">// c++:line-numbers</span></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Ren</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> num1 </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> num2 </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ren</span><span style="color:#89DDFF;">;</span><span style="color:#464B5D;font-style:italic;"> // c++:line-numbers使用了 typedef 后 是将 struct Ren{...}命名为 ren ，所以 ren 是结构体类型</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">nHuma</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    string str1 </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">body</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    string str2 </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">leg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> human</span><span style="color:#89DDFF;">;</span><span style="color:#464B5D;font-style:italic;"> // human 为该结构体的一个变量</span></span>
<span class="line"><span style="color:#BABED8;">...</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    ren renlei</span><span style="color:#89DDFF;">;</span><span style="color:#464B5D;font-style:italic;"> // 等同于 Ren renlei;</span></span>
<span class="line"><span style="color:#BABED8;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> human</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">str1</span><span style="color:#89DDFF;">;</span><span style="color:#464B5D;font-style:italic;"> // human为变量可以直接使用点符号</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// c++:line-numbers</span></span>
<span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Ren</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#6F42C1;">ren</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // c++:line-numbers使用了 typedef 后 是将 struct Ren{...}命名为 ren ，所以 ren 是结构体类型</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nHuma</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    string str1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;body&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    string str2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;leg&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">} human;</span><span style="color:#6A737D;"> // human 为该结构体的一个变量</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    ren renlei;</span><span style="color:#6A737D;"> // 等同于 Ren renlei;</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> human.str1;</span><span style="color:#6A737D;"> // human为变量可以直接使用点符号</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#464B5D;font-style:italic;">// C</span></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">name</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> num1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> num2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#FFCB6B;">Ren</span><span style="color:#89DDFF;">;</span><span style="color:#464B5D;font-style:italic;"> // 使用 typedef 后将Ren  定义为 struct{...} 类型 赋值为 Ren ren1;</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Ren</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> num3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> num4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span><span style="color:#464B5D;font-style:italic;"> // 若没有 typedef， 赋值时则需要 struct Ren ren1;</span></span>
<span class="line"><span style="color:#C792EA;">struct</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> sex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">120</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#F07178;">Ren </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stupidsheep</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">};</span><span style="color:#464B5D;font-style:italic;"> // 可集体赋值</span></span>
<span class="line"><span style="color:#C792EA;">struct</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> num1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> num2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#F07178;">stu1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> stu2</span><span style="color:#89DDFF;">;</span><span style="color:#464B5D;font-style:italic;"> // 此时stu1, stu2 为该类型的变量，而后就无法再定义该类型的新变量</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// C</span></span>
<span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num1, num2;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6F42C1;">Ren</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // 使用 typedef 后将Ren  定义为 struct{...} 类型 赋值为 Ren ren1;</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Ren</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num3, num4;</span></span>
<span class="line"><span style="color:#24292E;">};</span><span style="color:#6A737D;"> // 若没有 typedef， 赋值时则需要 struct Ren ren1;</span></span>
<span class="line"><span style="color:#D73A49;">struct</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> sex;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> name[</span><span style="color:#005CC5;">120</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">}Ren </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;stupidsheep&quot;</span><span style="color:#24292E;">};</span><span style="color:#6A737D;"> // 可集体赋值</span></span>
<span class="line"><span style="color:#D73A49;">struct</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num1, num2;</span></span>
<span class="line"><span style="color:#24292E;">}stu1, stu2;</span><span style="color:#6A737D;"> // 此时stu1, stu2 为该类型的变量，而后就无法再定义该类型的新变量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="关于空指针" tabindex="-1">关于空指针 <a class="header-anchor" href="#关于空指针" aria-label="Permalink to &quot;关于空指针&quot;">​</a></h4><ul><li>首要原因：在 C 语言中，NULL(<code>#define NULL ((void *)0)</code>)能够隐性指针转换(即<code>int *t = NULL</code>),然而 c++:line-numbers语言要求更为严格，不允许进行这样的隐式转换，而是直接使用字面值 0 作为零指针。所以 c++:line-numbers的为<code>#define NULL 0</code>.从而让 NULL 表现的和整数 0 能够兼容，又不完全一样。</li></ul><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki material-theme-ocean vp-code-dark"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">int*</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">p</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">int</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">b</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">NULL</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">);</span><span style="color:#464B5D;font-style:italic;">  // compile error, ambiguous</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">);</span><span style="color:#464B5D;font-style:italic;">   // ok, but call f(int, int)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">( </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">p</span><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">( </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">( </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;"> );</span><span style="color:#6A737D;">  // compile error, ambiguous</span></span>
<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">( </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> );</span><span style="color:#6A737D;">   // ok, but call f(int, int)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>void * 不能隐式地转化为任意类型的指针(可以强制转化)，但空指针常数可以隐式地转换为任意类型的指针类型。</li></ul><ul><li>总结：NULL 在 C 语言中是(void _ )0，在 c++:line-numbers中却是 0。这是因为在 c++:line-numbers中 void _ 类型是不允许隐式转换成其他指针类型的，所以之前 c++:line-numbers中用 0 来代表空指针。但是，在重载整型和指针的情况下，会出现匹配错误的情况。所以，c++:line-numbers11 加入了<code>nullptr</code>，可以保证在任何情况下都代表空指针。</li></ul><h4 id="野指针与-delete-操作" tabindex="-1">野指针与 delete 操作 <a class="header-anchor" href="#野指针与-delete-操作" aria-label="Permalink to &quot;野指针与 delete 操作&quot;">​</a></h4><p>delete 后没有指定为 nullptr: 当你再次访问这个指针时，就会出现未定义行为（undefined behavior），可能会导致程序崩溃、数据损坏等问题。建议的做法是，在 delete 之后将指针设置为 nullptr，这样既能避免悬垂指针 dangling pointer 问题，又能保证内存的正确释放。若在 delete 前先设置为 nullptr，可能会导致无法释放原来的内存，出现内存泄漏。即使是在外部函数中动态分配的内存也需要 delete，当函数执行完毕后，函数栈上的局部变量和对象都会被自动销毁，但是在堆上分配的动态内存不会被自动销毁，需要手动调用 delete 运算符来释放。</p><h4 id="关于-ambiguous" tabindex="-1">关于 ambiguous <a class="header-anchor" href="#关于-ambiguous" aria-label="Permalink to &quot;关于 ambiguous&quot;">​</a></h4><p>在 c++:line-numbers中 left, right, max, 这些最好不用于变量名的使用，否则会报错，变量不明确。 其实原因是 end 为 std 内的保留字，但在 c++:line-numbers中这并不影响其被定义为一个变量，不过在调用它的时候便会出现报错——因为 end 存在多个指向。 但不将其放在 global 区当做全局变量就不会出该错误？reason</p>`,28),e=[o];function t(c,r,y,i,D,F){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{u as __pageData,A as default};
